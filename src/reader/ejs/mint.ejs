<% 

    let channelViewModel = it.baseViewModel.channelViewModel 
    let hostname = it.baseViewModel.hostname
    let baseURL = it.baseViewModel.baseURL
    let marketplaces = it.baseViewModel.marketplaces
    let externalLinks = it.baseViewModel.externalLinks
    let routablePages = it.baseViewModel.routablePages
    let attributeReport = it.baseViewModel.attributeReport
    let base64Version = it.baseViewModel.base64Version
    let channelId = it.baseViewModel.channelId
    let showMintPage = it.baseViewModel.showMintPage
    let showActivityPage = it.baseViewModel.showActivityPage
    let logo = it.baseViewModel.logo


  

    const link = (href) => {
        return `${baseURL + href}`
    }   



    const absoluteLink = (href) => {
      return `${hostname + baseURL + href}`
    }   

    
    let coverImageLink = channelViewModel.coverImage ? absoluteLink(`backup/${channelViewModel.coverImage.generated ? 'generated' : 'export'}/images/${channelViewModel.coverImage._id}.${channelViewModel.coverImage.generated ? 'png' : 'jpg'}`)  : ''


%>

<!DOCTYPE html>
<html lang="en">

  <head>

    <%~ include("headStart", {baseURL: baseURL}) %>


    <style>
      html {
        visibility: hidden;
        opacity: 0;
      }
    </style>


    <title>
      <%= it.title %>
    </title>


    <%~ 
      include("_meta_tags", {
        title: channelViewModel.channel.title,
        url: 'mint.html',
        imageUrl: coverImageLink,
        descriptionHTML: `Mint '${channelViewModel.channel.title}' NFTs`,
        hostname: hostname,
        baseURL: baseURL,
        excerptHtml: it.baseViewModel.excerptHtml,
        he: it.baseViewModel.he
      }) 
    %>

    

    <%~ it.baseViewModel.headEndContents %>
    
  </head>

  <body>

    <div id="app">

      <div class="view view-main">



        <div class="page" data-name="mint">

          <nav-bar
              logo="${logo}"
              library_url="<%=it.baseViewModel.libraryURL ? it.baseViewModel.libraryURL : ''%>"
              large_url="<%=it.baseViewModel.largeURL ? it.baseViewModel.largeURL : ''%>"
              title="Mint"
              active="Mint"
              show_mint_page="<%=showMintPage%>"
              show_activity_page="<%=showActivityPage%>"
              breadcrumbs="${breadcrumbs}"
              base_uri="${baseURI}"
              hostname="${hostname}"
          >
          </nav-bar>

          <div class="page-content infinite-scroll-content" id="mint-list-infinite-scroll">

            <div class="fixed-width-content center">

              <div class="card channel-card-show">

                <div class="card-header banner" <% if(channelViewModel?.channel.coverBannerId) { %>
                  style="background-image: url('<%= link(`backup/export/images/${channelViewModel.channel.coverBannerId}.jpg`) %>')"
                    <% } %>
                      >

                      <a href="<%= link('index.html') %>">

                        <% if (channelViewModel?.channel.coverImageId) { %>
                          <img src="<%= link(`backup/export/images/${channelViewModel.channel.coverImageId}.jpg`) %>" class="avatar" />
                        <% } else { %>
                          <i class="f7-icons avatar">photo</i>
                        <% } %>

                      </a>

                </div> 

                <div class="card-content card-content-padding">

                  <div class="title">
                    <a href="<%= link('index.html') %>"><%= channelViewModel.channel.title %></a>
                  </div>

                  <% if(channelViewModel?.authorDisplayName) { %>
                    <div class="name">
                      By <%= channelViewModel?.authorDisplayName %>
                    </div>
                  <% } %>
  
                </div>

              </div>
              
              <mint-list 
                baseurl="<%= baseURL %>"
                last_minted="${lastMinted}"
              >

              </mint-list>


              <%~ include("footer", {baseURL: baseURL}) %>


          </div>
    
          </div>

        </div>

      </div>

    </div>

    <%~ it.baseViewModel.bodyContents %>
    
    <script type="module" id="page-init-scripts">

      const init = (props, { $, $f7, $h, $on, $update }) => {  

        let channelWebService = globalThis.container.get("ChannelWebService")
        
        let baseURI = globalThis.container.get("baseURI")
        let hostname = globalThis.container.get("hostname")

        let itemWebService = globalThis.container.get("ItemWebService")
        let mintWebService = globalThis.container.get("MintWebService")
        let walletService = globalThis.container.get("WalletService")

        let totalItemCount = parseInt('<%= channelViewModel.itemCount %>')

        const PER_PAGE = 35

        let itemsShown = 0
        let hasMoreItems = true
        let loadingInProgress = false
        let pageCounter=0

        let virtualList
        let swiper
        let items = []
        let mintingViewModel 

        let lastMinted 

        let logo = JSON.parse(`<%~ JSON.stringify(logo ? logo : {})  %>`)

        let breadcrumbs = [{
                text: JSON.parse(`<%~ JSON.stringify(channelViewModel.channel.symbol)  %>`),
                path: baseURI()
            }, {
                text: "Mint"
        }]

        const resizeListener = (e) => {
          const viewPortWidth = getWidth()

          if (virtualList) {
            virtualList.params.cols = viewPortWidth >= 1024 ? 5 : 2
            virtualList.update()
          }

          if (swiper) {
            swiper.params.slidesPerView = viewPortWidth >= 1024 ? 5 : 2
            swiper.update()
          }


          console.log("Resized...")

        }

        const getWidth = () => {
          return Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)
        }

        const virtualListParams = {
          el: '#mint-list',
          createUl: false,
          renderItem(item) {
              return getTemplate(item)
          },
          height: 300,
          items: items,                    
          cols: getWidth() >= 1024 ? 5 : 2,
          emptyTemplate: `
              <li class="item-content">
                  <div class="item-inner">
                      Loading...
                  </div>
              </li>
              `
        }

        $on('pageInit', async () => {

          await channelWebService.loadChannel(
                  "<%= channelViewModel.channel._id %>",
                  '<%= baseURL %>',
                  '<%= hostname %>'
          )

          await $update()


          window.addEventListener('resize', resizeListener)
          
        })

        $on('pageBeforeOut', async () => {
          window.removeEventListener('resize', resizeListener)
        })        

        const createVirtualList = () => {
          
          if (virtualList) return

          virtualList = $f7.virtualList.create(virtualListParams)

          if (virtualList.items?.length <= totalItemCount) {
              document.getElementById("mint-list-infinite-scroll").addEventListener( 'infinite', infiniteScroll )
          } else {
              $('.infinite-scroll-preloader').hide()
          }

        }

        function unloadInfiniteScroll() {

          console.log("Unload infinite scroll")

          // Nothing more to load, detach infinite scroll events to prevent unnecessary loadings
          $f7.infiniteScroll.destroy('#mint-list-infinite-scroll')
          $f7.virtualList.destroy('#mint-list')
          virtualList = undefined

          $('.infinite-scroll-preloader').hide()
        
        }

        async function infiniteScroll(e) {

          // Exit, if loading in progress
          if (loadingInProgress || !hasMoreItems) return

          console.log(`Infinite scrolling...`)

          // Set loading flag
          loadingInProgress = true

          try {
              
              let itemPage = await itemWebService.itemPage(pageCounter)

              //Count actual items                    
              itemsShown += itemPage.items.length

              if (itemsShown >= totalItemCount) {
                  hasMoreItems = false
              }

              virtualList.appendItems(itemPage.items)
              pageCounter++

          } catch (ex) {
              console.log(ex)
          }

          $f7.preloader.hide()

          if (!hasMoreItems) {
              unloadInfiniteScroll()
          }

          loadingInProgress = false


        }

        function getTemplate(rowItemViewModel) {
          
          let tokenLink = link('t/' + rowItemViewModel.tokenId)
          let imgExt = rowItemViewModel.coverImageGenerated ? 'svg' : 'jpg'
          let imageLink = link('backup/export/images/' + rowItemViewModel.coverImageId + "." + imgExt)
          let title = rowItemViewModel.title

          return `<li class="flex-card">
                      <a href="${tokenLink}" class="item-link">
                          <div class="card" >
                              <div class="card-content">
                                  <div class="square">
                                      <img src="${imageLink}"/>
                                  </div>
                              </div>

                              <div class="card-footer">
                                  ${title}
                              </div>
                          </div>
                      </a>
                  </li>
          `
        }

        const countItems = (itemRows) => {
          //Count actual items
          let itemCount = 0

          for (let itemRow of itemRows) {
              itemCount += itemRow.items?.length
          }

          return itemCount
        }

        const selectPreviews = (amount) => {

          let selected = 0

          $('.flex-card').each( (ele) => {
            
            //Remove selected from all
            $(ele).removeClass('selected')

            if (selected < amount ) {
              $(ele).addClass('selected')
              selected++
              // console.log(ele)
            }

          })

        }

        const link = (href) => {
          return `${baseURI() + href}`
        } 

        document.addEventListener('mint-view-model-loaded', async (e) => {

          console.log("Loaded...")
          
          mintingViewModel = e?.mintingViewModel

          if (mintingViewModel) {

            //Get the total minted 
            let totalMinted = e?.mintingViewModel.totalMinted

            //Get the start page
            let startPage = parseInt(totalMinted / PER_PAGE)
            let lastPage = parseInt(totalItemCount / PER_PAGE)

            while (items.length < PER_PAGE && pageCounter <= lastPage) {
              
              let itemPage = await itemWebService.itemPage(pageCounter)

              let unminted = itemPage.items.filter( item => parseInt(item.tokenId) > totalMinted)

              //Remove any that are below totalMinted
              items.push(...unminted)

              pageCounter++

            }

            createVirtualList()

            if (items?.length > 0) {
              
              //Count actual items                    
              itemsShown += items.length

              if (itemsShown >= totalItemCount) {
                  hasMoreItems = false
              }

              if (!hasMoreItems) {
                unloadInfiniteScroll()
              }

            }


            swiper = $f7.swiper.create('#latest-mints-swiper', {
              pagination: {
                el: ".swiper-pagination",
                clickable: true,
                dynamicBullets: true
              },
              scrollbar: {
                el: '.swiper-scrollbar',
                dragSize: 50,
                draggable: true,
                hide: false
              },
              spaceBetween:0,
              slidesPerView:getWidth() >= 1024 ? 5 : 2,
            })

            if (document.getElementById('latest-mints-swiper')) {
              document.getElementById('latest-mints-swiper').style.display="block"
            }


            selectPreviews(1)


            const stepperMintAmount = $f7.stepper.create({
                el: '.stepper',
                min: 1,
                max: 10,
                value: 1
            })


            await $update()

          }

        })

        document.addEventListener('mint-view-model-refreshed', async (e) => {

          mintingViewModel = e?.mintingViewModel

          for (let latest of mintingViewModel.lastMinted) {
                 
            let removed = false

            //Loop through virtual list items and get the index to remove
            for (let i=0; i < virtualList.items?.length; i++) {
              
              // console.log(`${latest.item.tokenId} / ${virtualList.items[i].tokenId}`)

              if (virtualList.items[i].tokenId == latest.item.tokenId) {
                console.log("Deleting item")
                virtualList.deleteItem(i)
                removed = true
                break
              }

            }

            //If we didn't find this one we're not gonna find the next either since it's lower. Just break
            if (!removed) break

          }

          //Reselect the right quantity
          selectPreviews(e.quantity)

          await $update()

          if (document.getElementById('latest-mints-swiper')) {
              document.getElementById('latest-mints-swiper').style.display="block"
          }

        })

        <%~ 
          include("_meta_tags_js", {
            title: channelViewModel.channel.title,
            url: 'mint.html',
            imageUrl: coverImageLink,
            descriptionHTML: `Mint '${channelViewModel.channel.title}' NFTs`,
            hostname: hostname,
            baseURL: baseURL,
            excerptHtml: it.baseViewModel.excerptHtml,
            he: it.baseViewModel.he
          }) 
        %>

        document.querySelector('title').innerHTML = "Mint '<%=channelViewModel.channel.title%>' NFTs."

        $f7.preloader.hide()
    
        return $render


      }


    </script>

    <%~ 
      include("_init", {
        hostname: hostname,
        baseURL: baseURL,
        libraryURL: it.baseViewModel.libraryURL,
        routablePages: routablePages,
        base64Version: base64Version,
        channelId: channelId
      }) 
    %>


  </body>

</html>