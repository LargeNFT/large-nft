<!DOCTYPE html>
<html lang="en">

  <head>

    <%~ include("@headStart", {baseURL: it.baseViewModel.baseURL}) %>


    <style>
      html {
        visibility: hidden;
        opacity: 0;
      }
    </style>


    <title>
      <%= it.title %>
    </title>


    <%~ 
      include("@meta_tags", {
        title: it.baseViewModel.channelViewModel.channel.title,
        url: 'mint.html',
        imageUrl: it.baseViewModel.channelCoverImageLink(),
        descriptionHTML: `Mint '${it.baseViewModel.channelViewModel.channel.title}' NFTs`,
        hostname: it.baseViewModel.hostname,
        baseURL: it.baseViewModel.baseURL,
        excerptHtml: it.baseViewModel.excerptHtml,
        he: it.baseViewModel.he
      }) 
    %>

    

    <%~ it.baseViewModel.headEndContents %>
    
  </head>

  <body>

    <div id="app">

      <div class="view view-main">

        <!--pageContent-->
        <div class="page" data-name="mint">

          <nav-bar
              logo="${logo}"
              library_url="<%=it.baseViewModel.libraryURL ? it.baseViewModel.libraryURL : ''%>"
              large_url="<%=it.baseViewModel.largeURL ? it.baseViewModel.largeURL : ''%>"
              title="Mint"
              active="Mint"
              show_mint_page="<%=it.baseViewModel.showMintPage%>"
              show_activity_page="<%=it.baseViewModel.showActivityPage%>"
              breadcrumbs="${breadcrumbs}"
              base_uri="${baseURI}"
              hostname="${hostname}"
          >
          </nav-bar>

          <div class="page-content infinite-scroll-content" id="mint-list-infinite-scroll">

            <div class="fixed-width-content center">

              <div class="card channel-card-show">

                <div class="card-header banner" <% if(it.baseViewModel.channelViewModel ?.channel.coverBannerId) { %>
                  style="background-image: url('<%= it.baseViewModel.link(`backup/export/images/${it.baseViewModel.channelViewModel.channel.coverBannerId}.jpg`) %>')"
                    <% } %>
                      >

                      <a href="<%= it.baseViewModel.link('index.html') %>">

                        <% if (it.baseViewModel.channelViewModel?.channel.coverImageId) { %>
                          <img src="<%= it.baseViewModel.link(`backup/export/images/${it.baseViewModel.channelViewModel.channel.coverImageId}.jpg`) %>" class="avatar" />
                        <% } else { %>
                          <i class="f7-icons avatar">photo</i>
                        <% } %>

                      </a>

                </div> 

                <div class="card-content card-content-padding">

                  <div class="title">
                    <a href="<%= it.baseViewModel.link('index.html') %>"><%= it.baseViewModel.channelViewModel.channel.title %></a>
                  </div>

                  <% if(it.baseViewModel.channelViewModel?.authorDisplayName) { %>
                    <div class="name">
                      By <%= it.baseViewModel.channelViewModel?.authorDisplayName %>
                    </div>
                  <% } %>
  
                </div>

              </div>
              
              <div class="hidden-on-load">

                ${mintingViewModel ? $h`

                  ${mintingViewModel.minting ? $h`
                        
                      <div class="block block-strong inset">
                        <p>
                          <strong>Total Minted:</strong> ${mintingViewModel.totalMinted} of ${mintingViewModel.totalSupply}
                        </p>              
                      </div>
            
                      
                      <div class="card">
                        <div class="card-content">
                          <form class="list no-hairlines inset" @submit="${mintOnSubmit}">
                            <ul>
                
                              <li class="item-content item-input">
                                <div class="item-inner">
                                  <div class="item-title item-label">Select number to mint</div>
                                  <!-- additional "input-dropdown-wrap" class -->
                                  <div class="item-input-wrap input-dropdown-wrap">
                                    <select @change="${quantityChange}">
                                      <option value="1" selected>1</option>
                                      <option value="2">2</option>
                                      <option value="3">3</option>
                                      <option value="4">4</option>
                                      <option value="5">5</option>
                                      <option value="6">6</option>
                                      <option value="7">7</option>
                                      <option value="8">8</option>
                                      <option value="9">9</option>
                                      <option value="10">10</option>
                                    </select>
                                  </div>

                                </div>
                              </li>
                
                              <li>
                                <div class="item-content">
                                    <div class="item-inner">
                                        <div class="item-title mint-detail">
                                          <p>
                                            <strong>Mint Fee:</strong> ${mintingViewModel.mintPrice} ETH
                                          </p>
                                          <p>
                                            <strong>Quantity:</strong> ${quantity} 
                                          </p>
                                          <p>
                                            <strong>Total:</strong> ${total} ETH
                                          </p>
                                        </div>
                                    </div>
                                </div>
                              </li>
                
                              <li>
                                <label class="item-checkbox item-content">
                
                                    <input type="checkbox" checked="${exactTokensOnly}" @change=${exactTokensOnChange}/>
                                    
                                    <i class="icon icon-checkbox"></i>
                                    <div class="item-inner">
                
                                        <div class="item-title">
                                          <!-- Item header, must be first child of item-title -->
                                          <div class="item-header"></div>
                                          Exact Tokens Only
                                          <!-- Item footer, must be last child of item-title -->
                                          <div class="item-footer">If this box is checked the transaction will immediately fail if another transaction mints *any* of the selected tokens.</div>
                                        </div>
                
                                    </div>
                                </label>
                              </li>
                
                              <li>
                                <div class="item-content">
                                    <div class="item-inner">
                                      <button class="button button-fill ${quantity < 1 ? 'disabled': ''}" id="mint-button">Mint</button>
                                    </div>
                                </div>
                              </li>
                              
                            </ul>
                
                          </form>
                        </div>
                      </div>
            
                      <div class="card mint-list-card">
                        <div class="card-header">Next Up</div>
                        <div class="card-content">
            
                          <div class="list cards-list virtual-list" id="mint-list">
                            <ul class="item-flex"></ul>
                          </div>
                    
                          <div class="preloader infinite-scroll-preloader"></div>
            
                        </div>
                      </div>
                      
                  ` : $h`
                    <div class="card">
                      <div class="card-header">Minting Complete</div>
                      <div class="card-content card-content-padding">
                        Minting is complete. Thank you!
                      </div>
                    </div>
                  
                  `}
                
                ` : $h`
                  <li class="card skeleton-text skeleton-effect-wave">
                    <div class="card-header">Loading Loading Loading</div>
                    <div class="card-content card-content-padding">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi lobortis et massa ac
                        interdum. Cras consequat felis at consequat hendrerit. Aliquam vestibulum vitae lorem ac iaculis.
                        Praesent nec pharetra massa, at blandit lectus. Sed tincidunt, lectus eu convallis elementum, nibh nisi
                        aliquet urna, nec imperdiet felis sapien at enim.</div>
                  </li>
                `}


              </div>

              <%~ include("@footer", {baseURL: it.baseViewModel.baseURL}) %>


          </div>
    
          </div>

        </div>
        <!--/pageContent-->
      </div>

    </div>

    <%~ it.baseViewModel.bodyContents %>
    
    <script type="module" id="page-init-scripts">

      //pageInitScripts

      const init = (props, { $, $f7, $h, $on, $update }) => {  

        let channelWebService = globalThis.container.get("ChannelWebService")

        let baseURI = globalThis.container.get("baseURI")()
        let hostname = globalThis.container.get("hostname")

        let itemWebService = globalThis.container.get("ItemWebService")
        let mintWebService = globalThis.container.get("MintWebService")
        let walletService = globalThis.container.get("WalletService")
        let queueService = globalThis.container.get("QueueService")

        let totalItemCount = parseInt('<%= it.baseViewModel.channelViewModel.itemCount %>')

        const PER_PAGE = 35

        let itemsShown = 0
        let hasMoreItems = true
        let loadingInProgress = false
        let pageCounter=0

        let virtualList
        let items = []

        let mintingViewModel

        let total = 0 
        let quantity = 1
        let mintPriceWei
        let exactTokensOnly = false

        let lastMinted 

        let logo = JSON.parse(`<%~ JSON.stringify(it.baseViewModel.logo ? it.baseViewModel.logo : {})  %>`)

        let breadcrumbs = [{
                text: JSON.parse(`<%~ JSON.stringify(it.baseViewModel.channelViewModel.channel.symbol)  %>`),
                path: baseURI
            }, {
                text: "Mint"
        }]

        // const mintFetcher = {

        //   intervalId: null,

        //   start: (callback) => {
        //     if (this.intervalId === null) {
        //       console.log('Starting mint fetcher')
        //       this.intervalId = setInterval(callback, 5000)
        //     } 
        //   },

        //   stop: () => {
        //     if (this.intervalId !== null) {
        //       clearInterval(this.intervalId)
        //       this.intervalId = null
        //       console.log('Stopping mint fetcher')
        //     } 
        //   }

        // }


        const resizeListener = (e) => {
          const viewPortWidth = getWidth()

          if (virtualList) {
            virtualList.params.cols = viewPortWidth >= 1024 ? 5 : 2
            virtualList.update()
          }

          // if (swiper) {
          //   swiper.params.slidesPerView = viewPortWidth >= 1024 ? 5 : 2
          //   swiper.update()
          // }


          console.log("Resized...")

        }

        const getWidth = () => {
          return Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)
        }

        const virtualListParams = {
          el: '#mint-list',
          createUl: false,
          renderItem(item) {
              return getTemplate(item)
          },
          height: 300,
          items: items,                    
          cols: getWidth() >= 1024 ? 5 : 2,
          emptyTemplate: `
              <li class="item-content">
                  <div class="item-inner">
                      Loading...
                  </div>
              </li>
              `
        }

        $on('pageInit', async () => {

          $f7.preloader.show()

          await channelWebService.loadChannel(
                  "<%= it.baseViewModel.channelViewModel.channel._id %>",
                  '<%= it.baseViewModel.baseURL %>',
                  '<%= it.baseViewModel.hostname %>'
          )

          const stepperMintAmount = $f7.stepper.create({
              el: '.stepper',
              min: 1,
              max: 10,
              value: 1
          })

          await populate()

          // mintFetcher.start( async () => {
          //   console.log("HERE")
          //   // await populate()
          // })

          $('.hidden-on-load').removeClass('hidden-on-load')
          $('.hide-on-pageinit').hide()


          window.addEventListener('resize', resizeListener)

        })


        $on('pageBeforeOut', async () => {
          window.removeEventListener('resize', resizeListener)
          // mintFetcher.stop()
        })        

        const quantityChange = async (e) => {
          quantity = parseInt($(e.currentTarget).val())
          await updateTotal()
          selectPreviews(quantity)
        }


        const createVirtualList = () => {
          
          if (virtualList) return

          virtualList = $f7.virtualList.create(virtualListParams)

          if (virtualList.items?.length <= totalItemCount) {
              document.getElementById("mint-list-infinite-scroll").addEventListener( 'infinite', infiniteScroll )
          } else {
              $('.infinite-scroll-preloader').hide()
          }

        }

        function unloadInfiniteScroll() {

          console.log("Unload infinite scroll")

          // Nothing more to load, detach infinite scroll events to prevent unnecessary loadings
          $f7.infiniteScroll.destroy('#mint-list-infinite-scroll')
          $f7.virtualList.destroy('#mint-list')
          virtualList = undefined

          $('.infinite-scroll-preloader').hide()
        
        }

        async function infiniteScroll(e) {

          // Exit, if loading in progress
          if (loadingInProgress || !hasMoreItems) return

          console.log(`Infinite scrolling...`)

          // Set loading flag
          loadingInProgress = true

          try {
              
              let itemPage = await itemWebService.itemPage(pageCounter)

              //Count actual items                    
              itemsShown += itemPage.items.length

              if (itemsShown >= totalItemCount) {
                  hasMoreItems = false
              }

              virtualList.appendItems(itemPage.items)
              pageCounter++

          } catch (ex) {
              console.log(ex)
          }

          $f7.preloader.hide()

          if (!hasMoreItems) {
              unloadInfiniteScroll()
          }

          loadingInProgress = false


        }

        function getTemplate(rowItemViewModel) {
          
          let tokenLink = link('t/' + rowItemViewModel.tokenId)
          let imgExt = rowItemViewModel.coverImageGenerated ? 'svg' : 'jpg'
          let imageLink = link('backup/export/images/' + rowItemViewModel.coverImageId + "." + imgExt)
          let title = rowItemViewModel.title

          return `<li class="flex-card">
                      <a href="${tokenLink}" class="item-link">
                          <div class="card" >
                              <div class="card-content">
                                  <div class="square">
                                      <img src="${imageLink}"/>
                                  </div>
                              </div>

                              <div class="card-footer">
                                  ${title}
                              </div>
                          </div>
                      </a>
                  </li>
          `
        }

        const countItems = (itemRows) => {
          //Count actual items
          let itemCount = 0

          for (let itemRow of itemRows) {
              itemCount += itemRow.items?.length
          }

          return itemCount
        }

        const selectPreviews = (amount) => {

          let selected = 0

          $('.flex-card').each( (ele) => {
            
            //Remove selected from all
            $(ele).removeClass('selected')

            if (selected < amount ) {
              $(ele).addClass('selected')
              selected++
              // console.log(ele)
            }

          })

        }

        const link = (href) => {
          return `${baseURI + href}`
        } 

        const updateTotal = async () => {
          total = await mintWebService.updateTotal(mintPriceWei, quantity)
          await $update()
        }

        const mintOnSubmit = async (e) => {

          e.preventDefault()

          //Make sure we are connected
          await walletService.connect()


          let mintFunction

          if (exactTokensOnly) {
            let start = parseInt(mintingViewModel.totalMinted + 1)
            mintFunction = mintWebService.mintFromStartOrFail(quantity, start)
          } else {
            mintFunction = mintWebService.mint(quantity)
          }


          let promiseView = {
            title: `Minting token(s). Approve transaction and wait for it to be mined.`,
            promise: mintFunction
          }

          //Wait for it to be mined
          try {
            await queueService.queuePromiseView(promiseView)
          } catch(ex) {

            if (ex.message.indexOf("Token is past start") > -1) {
              $f7.dialog.alert("Selected tokens have already been minted please try again.", "There was an error")
            } else {
              $f7.dialog.alert(ex.message, "There was an error")
            }

          }

          await populate()

        }

        const exactTokensOnChange = async (e) => {
          exactTokensOnly = e.currentTarget.checked
        
          await $update()
        }

        const populate = async () => {

          console.log("Populating...")

          await walletService.connect()

          try {

            mintingViewModel = await mintWebService.getMintingViewModel()

            mintPriceWei = await mintWebService.parseUnits(mintingViewModel.mintPrice, 'ether')

            await updateTotal()

            await mintViewModelLoaded()
            await mintViewModelRefreshed()

            //Reselect the right quantity
            selectPreviews(quantity)

            await $update()

          } catch(ex) {

            $f7.dialog.confirm("Problem connecting to contract on Ethereum Mainnet. Is your wallet connected to the right network?", "Problem connecting to network", populate, () => {
              $f7.views.main.router.navigate(baseURI)
            })

          }

          $f7.preloader.hide()

        }

        const mintViewModelLoaded = async (e) => {

          console.log("Loaded...")

          if (mintingViewModel) {

            //Get the total minted 
            let totalMinted = mintingViewModel.totalMinted

            //Get the start page
            let startPage = parseInt(totalMinted / PER_PAGE)
            let lastPage = parseInt(totalItemCount / PER_PAGE)

            while (items.length < PER_PAGE && pageCounter <= lastPage) {
              
              let itemPage = await itemWebService.itemPage(pageCounter)

              let unminted = itemPage.items.filter( item => parseInt(item.tokenId) > totalMinted)

              //Remove any that are below totalMinted
              items.push(...unminted)

              pageCounter++

            }

            createVirtualList()

            if (items?.length > 0) {
              
              //Count actual items                    
              itemsShown += items.length

              if (itemsShown >= totalItemCount) {
                  hasMoreItems = false
              }

              if (!hasMoreItems) {
                unloadInfiniteScroll()
              }

            }


          }

        }

        const mintViewModelRefreshed = async (e) => {

          for (let latest of mintingViewModel.lastMinted) {
                
            let removed = false

            //Loop through virtual list items and get the index to remove
            for (let i=0; i < virtualList.items?.length; i++) {
              
              // console.log(`${latest.item.tokenId} / ${virtualList.items[i].tokenId}`)

              if (virtualList.items[i].tokenId == latest.item.tokenId) {
                console.log("Deleting item")
                virtualList.deleteItem(i)
                removed = true
                break
              }

            }

            //If we didn't find this one we're not gonna find the next either since it's lower. Just break
            if (!removed) break

          }



        }





        <%~ 
          include("@meta_tags_js", {
            title: it.baseViewModel.channelViewModel.channel.title,
            url: 'mint.html',
            imageUrl: it.baseViewModel.channelCoverImageLink(),
            descriptionHTML: `Mint '${it.baseViewModel.channelViewModel.channel.title}' NFTs`,
            hostname: it.baseViewModel.hostname,
            baseURL: it.baseViewModel.baseURL,
            excerptHtml: it.baseViewModel.excerptHtml,
            he: it.baseViewModel.he
          }) 
        %>

        document.querySelector('title').innerHTML = "Mint '<%=it.baseViewModel.channelViewModel.channel.title%>' NFTs."

        $f7.preloader.hide()
    
        return $render


      }

      ///pageInitScripts

    </script>

    <%~ 
      include("@init", {
        hostname: it.baseViewModel.hostname,
        baseURL: it.baseViewModel.baseURL,
        libraryURL: it.baseViewModel.libraryURL,
        routablePages: it.baseViewModel.routablePages,
        base64Version: it.baseViewModel.base64Version,
        channelId: it.baseViewModel.channelId
      }) 
    %>


  </body>

</html>