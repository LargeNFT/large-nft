<% 

    let channelViewModel = it.baseViewModel.channelViewModel 
    let hostname = it.baseViewModel.hostname
    let baseURL = it.baseViewModel.baseURL
    let marketplaces = it.baseViewModel.marketplaces
    let externalLinks = it.baseViewModel.externalLinks
    let routablePages = it.baseViewModel.routablePages
    let attributeReport = it.baseViewModel.attributeReport
    let base64Version = it.baseViewModel.base64Version
    let channelId = it.baseViewModel.channelId
    let showMintPage = it.baseViewModel.showMintPage
    let showActivityPage = it.baseViewModel.showActivityPage

    const link = (href) => {
        return `${baseURL + href}`
    }    

    let logo = link(`backup/export/images/${channelViewModel.channel.coverImageId}.jpg`)



    const absoluteLink = (href) => {
        return `${hostname + baseURL + href}`
    }   

    const escapeExcerpt = (excerpt) => {
        excerpt = it.baseViewModel.excerptHtml(excerpt, { pruneLength: 500 })
        return it.baseViewModel.he.encode(excerpt.toString())
    }
%>


<!DOCTYPE html>
<html lang="en">

<head>

    <%~ include("headStart", {baseURL: baseURL}) %>


    <style>
    html {
        visibility: hidden;
        opacity: 0;
    }
    </style>

    <!-- Required meta tags-->
    <meta charset="utf-8">
    <meta name="viewport"
    content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui, viewport-fit=cover">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <!-- Color theme for statusbar -->
    <title>
        Attribute Report for <%=channelViewModel.channel.title%>
    </title>

    <meta property="og:title" content="Attribute Report for <%=channelViewModel.channel.title%>" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="<%= link(`attribute`) %>" />
    <meta property="og:image" content="<%= absoluteLink(`backup/export/images/${channelViewModel.channel.coverImageId}.jpg`) %>" />
    <meta property="og:description" content="Attribute Report for <%=channelViewModel.channel.title%>" />

    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="<%= link(`attribute`) %>" />
    <meta property="twitter:title" content="Attribute Report for <%=channelViewModel.channel.title%>" />
    <meta property="twitter:description" content="Attribute Report for <%=channelViewModel.channel.title%>" />
    <meta property="twitter:image" content="<%= absoluteLink(`backup/export/images/${channelViewModel.channel.coverImageId}.jpg`) %>" />

    <%~ it.baseViewModel.headEndContents %>
    
</head>

<body>

    <div id="app">

        <div class="view view-main">

            <div class="page" data-name="attribute">

                <nav-bar
                    logo="<%=logo%>"
                    title="Attribute Report"
                    active="Attribute Report"
                    show_mint_page="<%=showMintPage%>"
                    show_activity_page="<%=showActivityPage%>"
                >
                </nav-bar>


                <div class="page-content infinite-scroll-content" id="attribute-tokens-infinite-scroll">

                    <div class="row">
            
                        <div class="fixed-width-content center">

                            <div class="hidden-on-load">

                                <div class="block block-strong inset col-100 no-margin-bottom">
                                    <div class="breadcrumbs ">
                                      <div class="breadcrumbs-item">
                                        <a href="<%=baseURL%>index.html" class="link">
                                          Home
                                        </a>
                                      </div> 
                                      <div class="breadcrumbs-separator"></div>
                                      <div class="breadcrumbs-item">
                                        <a href="<%=baseURL%>attributes">Attributes</a>
                                      </div>       
                                      <div class="breadcrumbs-separator"></div>
                                      <div class="breadcrumbs-item breadcrumbs-item-active">
                                        ${traitType} / ${value}
                                      </div> 
                                    </div>
                                </div>



                                <div class="block-title block-title-large">${traitType} / ${value}</div>
                            
                                <div class="block block-strong inset stats">
                            
                                    <div class="row">
                                        <div class="col-100 large-33 margin-bottom">
                                          Average Sale<br />
                                          <strong>${new Intl.NumberFormat('en-US').format(salesReport?.totals?.averageEthValue ? salesReport?.totals?.averageEthValue : 0)} ETH (${transactionWebService.abbreviateDollars(salesReport?.totals?.averageUsdValue ? salesReport?.totals?.averageUsdValue : 0, 2)})</strong>
                                        </div>
                                        <div class="col-100 large-33 margin-bottom">
                                          Number of Sales (Lifetime)<br />
                                          <strong>${new Intl.NumberFormat('en-US').format(salesReport?.totals?.events ? salesReport?.totals?.events : 0)}</strong>
                                        </div>
                                        <div class="col-100 large-33 margin-bottom">
                                          Total Value of All Sales (Lifetime)<br />
                                          <strong>${new Intl.NumberFormat('en-US').format(salesReport?.totals?.ethValue ? salesReport?.totals?.ethValue : 0)} ETH (${transactionWebService.abbreviateDollars(salesReport?.totals?.usdValue ? salesReport?.totals?.usdValue : 0, 2)})</strong>
                                        </div>
                                    </div>
                                
                                </div>



                                ${largestSales?.length > 0 ? $h`
                                    <div class="block-title block-title-medium">Largest Sales</div>
                                    <div class="block block-strong inset largest-sales">
                                        
                                        <div class="row">
                                            ${largestSales?.map( (sale, index) => $h`
                                                <div class="col-50 large-20 margin-bottom">
                        
                                                    <div class="rank">#${index+1}</div>
                        
                                                    <div class="square">
                                                        <a href="${link(`t/${sale.item.tokenId}`)}" class="item-link">
                                                        <img src="${link(`backup/export/images/${sale.item.coverImageId}.${sale.item.coverImageGenerated ? 'svg' : 'jpg'}`)}" alt="${sale.item.tokenId}" height="125" width="125"/>
                                                        </a>
                                                    </div>
                            
                                                    <div class="sale-info margin-top">
                                                        <a href="${link(`t/${sale.item.tokenId}`)}" class="item-link">${sale.item.title}</a><br />
                                                        ${new Intl.NumberFormat('en-US').format(sale.sale.ethValue)} ETH (${transactionWebService.abbreviateDollars(sale.sale.usdValue, 2)})
                                                        <div class="date">${moment(sale.sale.date).format('LL')}</div>
                                                    </div>
                        
                                                </div>
                                            `)}
                                        </div>
                                    </div>
                                ` : $h` `}


                                <div class="card">
                                    <div class="card-header">
                                        Leaderboard <span class="last-updated">Last updated: ${moment(lastUpdated).fromNow()}</span>

                                    </div>
                                    <div class="card-content data-table">
              
                                        <table class="leaderboard-table">
                                            <thead>
                                                <tr>
                                                    <th>Rank</th>
                                                    <th class="label-cell">Address</th>
                                                    <th>Last Active</th>
                                                    <th class="numeric-cell">Owned</th>
                                                </tr>
                                            </thead>
                                    
                                            <tbody>
                                    
                                            ${owners?.map(u => $h`
                                                <tr>
                                                    <th>${u.rank}</th>
                                                    <td class="label-cell">
    
                                                        ${u.ensName ? $h`
                                                            <a href="<%= baseURL %>u/?address=${u._id}">${u.ensName}</a>
                                                        ` : $h`
                                                            <a href="<%= baseURL %>u/?address=${u._id}">${u._id ? walletService.truncateEthAddress(u._id) : ' '}</a>
                                                        `} 
    
                                                    </td>
                                        
                                                    <td>
                                                        ${u.lastActive ? moment(u.lastActive).fromNow() : ""}
                                                    </td>
                                        
                                                    <td class="numeric-cell">
                                                        ${u.count}
                                                    </td>
                                        
                                                </tr>
                                            
                                            `)}
                                            </tbody>
                                
                                        </table>


                                    </div>
                                </div>

                                <div class="block-title block-title-medium">All Tokens</div>
                                <div class="list cards-list virtual-list" id="attribute-tokens-list">
                                    <ul class="item-flex"></ul>
                                </div>
                              
                                <div class="preloader infinite-scroll-preloader"></div>

                            
                            </div>

                            <div class="hide-on-pageinit">

                                <div class="card skeleton-text">
                                    <div class="card-header">User Info</div>
                                    <div class="card-content card-content-padding data-table">
                                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi
                                        lobortis et massa ac interdum. Cras consequat felis at consequat hendrerit.
                                    </div>

                                  </div>

                            </div>

                            <br /><br />

                            <%~ include("footer", {baseURL: baseURL}) %>

                        </div>
                    </div>
            
                </div>
              
            
            </div>

        </div>

    </div>

    <%~ it.baseViewModel.bodyContents %>

    <script type="module" id="page-init-scripts">

        const init = (props, { $, $f7, $h, $on, $update }) => {

            let transactionWebService = globalThis.container.get("TransactionWebService")
            let processedTransactionService = globalThis.container.get("ProcessedTransactionService")
            let itemWebService = globalThis.container.get("ItemWebService")

            let walletService = globalThis.container.get("WalletService")

            let baseURL = '<%= baseURL %>'

            let traitType
            let value 

            let salesReport
            let largestSales
            let owners



            let virtualList

            let PER_PAGE = 35

            let hasMoreItems = true
            let loadingInProgress = false
            let firstPageItems

            let totalTokens
            let attributeParams = {}


            let lastUpdated


            const link = (href) => {
              return baseURL + href
            }   

            const loadSalesReport = async () => {
                
                loading = true

                try  {

                    let keyValue = attributeKey.split("::::")
                    traitType = keyValue[0]
                    value = keyValue[1]

                    salesReport = await transactionWebService.getAttributeSalesReport(traitType, value)

                    largestSales = salesReport?.largestSalesViewModels
                    owners = salesReport?.owners

                    let latest = await transactionWebService.getLatest()
                    lastUpdated = latest.lastUpdated
    


                    attributeParams[traitType] = value


                    let result = await itemWebService.exploreList(attributeParams, 0, PER_PAGE)
                    firstPageItems = result.items
                    totalTokens = result.totalMatches



                    createVirtualList()


                } catch(ex) { 
                    $('.infinite-scroll-preloader').hide()
                    console.log(ex) 
                }
                
                loading = false

                await $update()

            }




            const createVirtualList = () => {

                virtualList = $f7.virtualList.create({
                    el: '#attribute-tokens-list',
                    createUl: false,
                    renderItem(item) {
                        return getTemplate(item)
                    },
                    height: 287,
                    items: firstPageItems,                    
                    cols: getWidth() >= 1024 ? 5 : 2,
                    emptyTemplate: `
                        <li class="item-content">
                            <div class="item-inner">
                                No results found.
                            </div>
                        </li>
                        `
                })


                if (virtualList.items?.length <= totalTokens) {
                    hasMoreItems = true
                    document.getElementById("attribute-tokens-infinite-scroll").addEventListener( 'infinite', infiniteScroll )
                } else {
                    hasMoreItems = false
                    $('.infinite-scroll-preloader').hide()
                }

            }

            const resizeListener = (e) => {

                const viewPortWidth = getWidth()

                virtualList.params.cols = viewPortWidth >= 1024 ? 5 : 2
                virtualList.update()

                console.log("Resized...")

            }

            const getWidth = () => {
                return Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)
            }

            const getTemplate = (rowItemViewModel) => {

                let tokenLink = link('t/' + rowItemViewModel.tokenId)
                let imgExt = rowItemViewModel.coverImageGenerated ? 'svg' : 'jpg'
                let imageLink = link('backup/export/images/' + rowItemViewModel.coverImageId + "." + imgExt)
                let title = rowItemViewModel.title

                return `<li class="flex-card">
                        <a href="${tokenLink}" class="item-link">
                            <div class="card" >
                                <div class="card-content">
                                    <div class="square">
                                        <img src="${imageLink}"/>
                                    </div>
                                </div>

                                <div class="card-footer">
                                    ${title}
                                </div>
                            </div>
                        </a>
                    </li>
            `
            
            }

            async function infiniteScroll(e) {

                // Exit, if loading in progress
                if (loadingInProgress || !hasMoreItems) return

                console.log(`Infinite scrolling...`)

                // Set loading flag
                loadingInProgress = true
                $('.infinite-scroll-preloader').show()


                try {
                    
                    let result = await itemWebService.exploreList(attributeParams, virtualList.items?.length, PER_PAGE)


                    let items = result.items

                    virtualList.appendItems(items)

                    if (virtualList.items?.length >= totalTokens) {
                        hasMoreItems = false
                    }

                } catch (ex) {
                    console.log(ex)
                }

                $f7.preloader.hide()
                $('.infinite-scroll-preloader').hide()


                loadingInProgress = false


            }

















            $on('pageInit', async () => {

                window.addEventListener('resize', resizeListener)


                attributeKey = $f7.views.main.router.currentRoute?.query?.attributeKey

                $('.infinite-scroll-preloader').show()

                await loadSalesReport()

                $('.hidden-on-load').removeClass('hidden-on-load')
                $('.hide-on-pageinit').hide()

                await $update()

            })


            $on('pageReinit', async () => {

                address = $f7.views.main.router.currentRoute?.query?.address

                await loadSalesReport()

                $('.hide-on-pageinit').hide()

                await $update()


            })


            document.querySelector('meta[property="og:title"]').setAttribute("content", "Attribute Reportfor <%=channelViewModel.channel.title%>")
            document.querySelector('meta[property="og:url"]').setAttribute("content", "<%= link(`attribute`) %>")
            document.querySelector('meta[property="og:image"]').setAttribute("content", "<%= absoluteLink(`backup/export/images/${channelViewModel.channel.coverImageId}.jpg`) %>")
            document.querySelector('meta[property="og:description"]').setAttribute("content", "Attribute Report for <%=channelViewModel.channel.title%>")

            document.querySelector('meta[property="twitter:url"]').setAttribute("content", "<%= link(`attribute`) %>")
            document.querySelector('meta[property="twitter:title"]').setAttribute("content", "Attribute Report <%=channelViewModel.channel.title%>")
            document.querySelector('meta[property="twitter:image"]').setAttribute("content", "<%= absoluteLink(`backup/export/images/${channelViewModel.channel.coverImageId}.jpg`) %>")
            document.querySelector('meta[property="twitter:description"]').setAttribute("content", "Attribute Report for <%=channelViewModel.channel.title%>" )

            document.querySelector('title').innerHTML = "Attribute Report <%=channelViewModel.channel.title%>"

            $f7.preloader.hide()

            return $render

        }


    </script>

    <script type="module" id="page-scripts">

        let baseURL = '<%= baseURL %>'
        let hostname = '<%= hostname %>'
        let channelId = '<%= channelId %>'
        let version = atob('<%= base64Version %>').replace('"', '').replace('"', '')

        let routablePages = JSON.parse(`<%~ JSON.stringify(routablePages) %>`)

        let app = reader.initReader(baseURL, hostname, version, routablePages, channelId )



    </script>

</body>

</html>