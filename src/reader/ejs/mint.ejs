<!DOCTYPE html>
<html lang="en">

  <head>

    <%~ include("@headStart", {baseURL: it.baseViewModel.baseURL}) %>


    <style>
      html {
        visibility: hidden;
        opacity: 0;
      }
    </style>


    <title>
      <%= it.title %>
    </title>


    <%~ 
      include("@meta_tags", {
        title: it.baseViewModel.channelViewModel.channel.title,
        url: 'mint.html',
        imageUrl: it.baseViewModel.channelCoverImageLink(),
        descriptionHTML: `Mint '${it.baseViewModel.channelViewModel.channel.title}' NFTs`,
        hostname: it.baseViewModel.hostname,
        baseURL: it.baseViewModel.baseURL,
        excerptHtml: it.baseViewModel.excerptHtml,
        he: it.baseViewModel.he
      }) 
    %>

    

    <%~ it.baseViewModel.headEndContents %>
    
  </head>

  <body>

    <div id="app">

      <div class="view view-main">

        <!--pageContent-->
        <div class="page" data-name="mint">

          <nav-bar
              logo="${logo}"
              library_url="<%=it.baseViewModel.libraryURL ? it.baseViewModel.libraryURL : ''%>"
              large_url="<%=it.baseViewModel.largeURL ? it.baseViewModel.largeURL : ''%>"
              title="Mint"
              active="Mint"
              show_mint_page="<%=it.baseViewModel.showMintPage%>"
              show_activity_page="<%=it.baseViewModel.showActivityPage%>"
              breadcrumbs="${breadcrumbs}"
              base_uri="${baseURI}"
              hostname="${hostname}"
          >
          </nav-bar>

          <div class="page-content infinite-scroll-content" id="mint-list-infinite-scroll">

            <div class="fixed-width-content center">

              <div class="block-title block-title-large">Mint</div>
              
              <div class="hidden-on-load">

                ${mintingViewModel ? $h`

                  ${mintingViewModel.minting ? $h`
                      
                      <div class="block block-strong inset">
                        <p>
                          <strong>Total Minted:</strong> ${mintingViewModel.totalMinted} of ${mintingViewModel.totalSupply}
                        </p>              
                      </div>

                      <form class="list" @submit="${mintOnSubmit}">
                        <ul>  
                        
                          <li>
                            <div class="item-content">
                                <div class="item-inner">
                                    <div class="item-title mint-detail">

                                      <p>
                                        <strong>Quantity:</strong>
                                        <div class="stepper stepper-init">
                                          <div class="stepper-button-minus"></div>
                                          <div class="stepper-input-wrap">
                                            <input type="text" readonly min="1" max="10" step="1" value="1" />
                                          </div>
                                          <div class="stepper-button-plus"></div>
                                        </div>
                                      </p>

                                      <p>
                                        <strong>Mint Fee:</strong> ${mintingViewModel.mintPrice} ETH
                                      </p>
                                      <p>
                                        <strong>Total:</strong> ${total} ETH
                                      </p>
                                    </div>
                                </div>
                            </div>
                          </li>
            
                          <li>
                            <label class="item-checkbox item-content">
            
                                <input type="checkbox" checked="${exactTokensOnly}" @change=${exactTokensOnChange}/>
                                
                                <i class="icon icon-checkbox"></i>
                                <div class="item-inner">
            
                                    <div class="item-title">
                                      <div class="item-header"></div>
                                      Exact Tokens Only
                                      <div class="item-footer">If this box is checked the transaction will immediately fail if another transaction mints *any* of the selected tokens.</div>
                                    </div>
            
                                </div>
                            </label>
                          </li>
            
                          <li>
                            <div class="item-content">
                                <div class="item-inner">
                                  <button class="button button-fill ${quantity < 1 ? 'disabled': ''}" id="mint-button">Mint</button>
                                </div>
                            </div>
                          </li>
                          
                        </ul>
            
                      </form>
            
                      <div class="card mint-list-card">
                        <div class="card-header">Next Up</div>
                        <div class="card-content">
            
                          <div class="list cards-list virtual-list" id="mint-list">
                            <ul class="item-flex"></ul>
                          </div>
                    
                          <div class="preloader infinite-scroll-preloader"></div>
            
                        </div>
                      </div>
                      
                  ` : $h`
                    <div class="card">
                      <div class="card-header">Minting Complete</div>
                      <div class="card-content card-content-padding">
                        Minting is complete. Thank you!
                      </div>
                    </div>
                  
                  `}
                
                ` : $h`
                  <li class="card skeleton-text skeleton-effect-wave">
                    <div class="card-header">Loading Loading Loading</div>
                    <div class="card-content card-content-padding">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi lobortis et massa ac
                        interdum. Cras consequat felis at consequat hendrerit. Aliquam vestibulum vitae lorem ac iaculis.
                        Praesent nec pharetra massa, at blandit lectus. Sed tincidunt, lectus eu convallis elementum, nibh nisi
                        aliquet urna, nec imperdiet felis sapien at enim.</div>
                  </li>
                `}


              </div>

              <%~ include("@footer", {baseURL: it.baseViewModel.baseURL}) %>


          </div>
    
          </div>

        </div>
        <!--/pageContent-->
      </div>

    </div>

    <%~ it.baseViewModel.bodyContents %>
    
    <script type="module" id="page-init-scripts">

      //pageInitScripts

      const init = (props, { $, $f7, $h, $on, $update }) => {  

        let channelWebService = globalThis.container.get("ChannelWebService")

        let baseURI = globalThis.container.get("baseURI")()
        let hostname = globalThis.container.get("hostname")

        let itemWebService = globalThis.container.get("ItemWebService")
        let mintWebService = globalThis.container.get("MintWebService")
        let walletService = globalThis.container.get("WalletService")
        let queueService = globalThis.container.get("QueueService")

        let totalItemCount = parseInt('<%= it.baseViewModel.channelViewModel.itemCount %>')

        const PER_PAGE = 40

        let hasMoreItems = true
        let loadingInProgress = false
        let pageCounter=0
        let lastPage = parseInt(totalItemCount / PER_PAGE)

        let virtualList
        let items = []

        let mintingViewModel

        let total = 0 
        let quantity = 1
        let mintPriceWei
        let exactTokensOnly = true

        let lastMinted 

        let logo = JSON.parse(`<%~ JSON.stringify(it.baseViewModel.logo ? it.baseViewModel.logo : {})  %>`)

        let breadcrumbs = [{
                text: JSON.parse(`<%~ JSON.stringify(it.baseViewModel.channelViewModel.channel.symbol)  %>`),
                path: baseURI
            }, {
                text: "Mint"
        }]

        const mintFetcher = {

          intervalId: null,

          start: (callback) => {
            if (mintFetcher.intervalId === null) {
              console.log('Starting mint fetcher')
              mintFetcher.intervalId = setInterval(callback, 5000)
            } 
          },

          stop: () => {
            if (mintFetcher.intervalId !== null) {
              clearInterval(mintFetcher.intervalId)
              mintFetcher.intervalId = null
              console.log('Stopping mint fetcher')
            } 
          }

        }


        const resizeListener = (e) => {
          const viewPortWidth = getWidth()

          if (virtualList) {
            virtualList.params.cols = viewPortWidth >= 1024 ? 5 : 2
            virtualList.update()
          }

          // if (swiper) {
          //   swiper.params.slidesPerView = viewPortWidth >= 1024 ? 5 : 2
          //   swiper.update()
          // }


          console.log("Resized...")

        }

        const getWidth = () => {
          return Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)
        }

        const startMintFetcher = () => {

          mintFetcher.start( async () => {

            console.log("Grabbing mints...")

            //Grab latest view model and remove any that have been minted.
            mintingViewModel = await mintWebService.getMintingViewModel()

            await removeMinted()

            //Reselect the right quantity
            selectPreviews(quantity)

            await $update()

          })

        }


        $on('pageInit', async () => {

          $f7.preloader.show()

          await channelWebService.loadChannel(
                  "<%= it.baseViewModel.channelViewModel.channel._id %>",
                  '<%= it.baseViewModel.baseURL %>',
                  '<%= it.baseViewModel.hostname %>'
          )

          await populate()

          //Reselect the right quantity
          selectPreviews(quantity)

          startMintFetcher()

          $('.hidden-on-load').removeClass('hidden-on-load')
          $('.hide-on-pageinit').hide()


          window.addEventListener('resize', resizeListener)

        })

        $on('stepper:change', async (e) => {
          quantity = parseInt(e.detail)
          await updateTotal()
          selectPreviews(quantity)
        })

        $on('pageBeforeOut', async () => {
          window.removeEventListener('resize', resizeListener)
          mintFetcher.stop()
        })        

        const quantityChange = async (e) => {
          quantity = parseInt($(e.currentTarget).val())
          await updateTotal()
          selectPreviews(quantity)
        }

        const createVirtualList = () => {
          
          if (virtualList) return

          virtualList = $f7.virtualList.create({
            el: '#mint-list',
            createUl: false,
            renderItem(item) {
                return getTemplate(item)
            },
            height: 300,
            items: items,                    
            cols: getWidth() >= 1024 ? 5 : 2,
            emptyTemplate: `
                <li class="item-content">
                    <div class="item-inner">
                        Loading...
                    </div>
                </li>
                `
          })

          if (virtualList.items?.length <= totalItemCount) {
              document.getElementById("mint-list-infinite-scroll").addEventListener( 'infinite', infiniteScroll )
          } else {
              $('.infinite-scroll-preloader').hide()
          }

        }

        function unloadInfiniteScroll() {

          console.log("Unload infinite scroll")

          // Nothing more to load, detach infinite scroll events to prevent unnecessary loadings
          $f7.infiniteScroll.destroy('#mint-list-infinite-scroll')
          // $f7.virtualList.destroy('#mint-list')
          // virtualList = undefined

          $('.infinite-scroll-preloader').hide()
        
        }

        async function infiniteScroll(e) {

          // Exit, if loading in progress
          if (loadingInProgress || !hasMoreItems) return

          console.log(`Infinite scrolling...`)

          // Set loading flag
          loadingInProgress = true

          try {
              
              let itemPage = await itemWebService.itemPage(pageCounter)

              if (pageCounter >= lastPage) {
                  hasMoreItems = false
              }

              virtualList.appendItems(itemPage.items)
              pageCounter++

          } catch (ex) {
              console.log(ex)
          }

          $f7.preloader.hide()

          if (!hasMoreItems) {
              unloadInfiniteScroll()
          }

          loadingInProgress = false


        }

        function getTemplate(rowItemViewModel) {
          
          let tokenLink = link('t/' + rowItemViewModel.tokenId)
          let imgExt = rowItemViewModel.coverImageGenerated ? 'svg' : 'jpg'
          let imageLink = link('backup/export/images/' + rowItemViewModel.coverImageId + "." + imgExt)
          let title = rowItemViewModel.title

          return `<li class="flex-card">
                      <a href="${tokenLink}" class="item-link">
                          <div class="card" >
                              <div class="card-content">
                                  <div class="square">
                                      <img src="${imageLink}"/>
                                  </div>
                              </div>

                              <div class="card-footer">
                                  ${title}
                              </div>
                          </div>
                      </a>
                  </li>
          `
        }

        const countItems = (itemRows) => {
          //Count actual items
          let itemCount = 0

          for (let itemRow of itemRows) {
              itemCount += itemRow.items?.length
          }

          return itemCount
        }

        const selectPreviews = (amount) => {

          let selected = 0

          $('.flex-card').each( (ele) => {
            
            //Remove selected from all
            $(ele).removeClass('selected')

            if (selected < amount ) {
              $(ele).addClass('selected')
              selected++
              // console.log(ele)
            }

          })

        }

        const link = (href) => {
          return `${baseURI + href}`
        } 

        const updateTotal = async () => {
          total = await mintWebService.updateTotal(mintPriceWei, quantity)
          await $update()
        }

        const mintOnSubmit = async (e) => {

          e.preventDefault()

          //Make sure we are connected
          await walletService.connect()


          let mintFunction

          if (exactTokensOnly) {
            let start = parseInt(mintingViewModel.totalMinted + 1)
            mintFunction = mintWebService.mintFromStartOrFail(quantity, start)
          } else {
            mintFunction = mintWebService.mint(quantity)
          }


          let promiseView = {
            title: `Minting token(s). Approve transaction and wait for it to be mined.`,
            promise: mintFunction
          }

          //Wait for it to be mined
          try {
            await queueService.queuePromiseView(promiseView)
          } catch(ex) {

            if (ex.message.indexOf("Token is past start") > -1) {
              $f7.dialog.alert("Selected tokens have already been minted please try again.", "There was an error")
            } else {
              $f7.dialog.alert(ex.message, "There was an error")
            }

          }

          await populate()

          await removeMinted()

          //Reselect the right quantity
          selectPreviews(quantity)

        }

        const exactTokensOnChange = async (e) => {
          exactTokensOnly = e.currentTarget.checked
        
          await $update()
        }

        const populate = async () => {

          console.log("Populating...")

          await walletService.connect()

          try {

            mintingViewModel = await mintWebService.getMintingViewModel()

            mintPriceWei = await mintWebService.parseUnits(mintingViewModel.mintPrice, 'ether')

            await updateTotal()

            await mintViewModelLoaded()

            await $update()

          } catch(ex) {

            $f7.dialog.confirm("Problem connecting to contract on Ethereum Mainnet. Is your wallet connected to the right network?", "Problem connecting to network", populate, () => {
              $f7.views.main.router.navigate(baseURI)
            })

          }

          $f7.preloader.hide()

        }

        const mintViewModelLoaded = async (e) => {

          console.log("Loaded...")

          if (mintingViewModel) {

            //Get the total minted 
            let totalMinted = mintingViewModel.totalMinted

            //Get the start page
            let startPage = parseInt(totalMinted / PER_PAGE)

            items = []
            pageCounter = 0

            while (items.length < PER_PAGE && pageCounter <= lastPage) {
              
              let itemPage = await itemWebService.itemPage(pageCounter)

              let unminted = itemPage.items.filter( item => parseInt(item.tokenId) > totalMinted)

              //Remove any that are below totalMinted
              items.push(...unminted)

              pageCounter++

            }

            createVirtualList()

            if (items?.length > 0) {

              if (pageCounter >= lastPage) {
                  hasMoreItems = false
              }

              if (!hasMoreItems) {
                unloadInfiniteScroll()
              }

            }


          }

        }

        const removeMinted = async (e) => {

          let totalMinted = mintingViewModel.totalMinted

          let toRemove = []

          //Loop through virtual list items and get the index to remove
          for (let i=0; i < virtualList.items?.length; i++) {
            
            // console.log(`${totalMinted} / ${virtualList.items[i].tokenId}`)

            if (virtualList.items[i].tokenId <= totalMinted) {
              // console.log(`Deleting item ${virtualList.items[i].tokenId}`)
              toRemove.push(i)
            }

          }

          toRemove.sort((a, b) => b - a)

          for (let r of toRemove) {
            virtualList.deleteItem(r)
          }


        }

        <%~ 
          include("@meta_tags_js", {
            title: it.baseViewModel.channelViewModel.channel.title,
            url: 'mint.html',
            imageUrl: it.baseViewModel.channelCoverImageLink(),
            descriptionHTML: `Mint '${it.baseViewModel.channelViewModel.channel.title}' NFTs`,
            hostname: it.baseViewModel.hostname,
            baseURL: it.baseViewModel.baseURL,
            excerptHtml: it.baseViewModel.excerptHtml,
            he: it.baseViewModel.he
          }) 
        %>

        document.querySelector('title').innerHTML = "Mint '<%=it.baseViewModel.channelViewModel.channel.title%>' NFTs."

        $f7.preloader.hide()
    
        return $render


      }

      ///pageInitScripts

    </script>

    <%~ 
      include("@init", {
        hostname: it.baseViewModel.hostname,
        baseURL: it.baseViewModel.baseURL,
        libraryURL: it.baseViewModel.libraryURL,
        routablePages: it.baseViewModel.routablePages,
        base64Version: it.baseViewModel.base64Version,
        channelId: it.baseViewModel.channelId
      }) 
    %>


  </body>

</html>