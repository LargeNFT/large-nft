{"version":3,"file":"large/admin/app/js/main.admin.js","mappings":"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BlS,WAAa,uCAClBkS,EAAiBlS,WAAW/e,2EACtC,6SAOEixB,EAAiBjuB,QAAQnC,wIAEiBowB,EAAiBzL,iFAG/DyL,EAAiBtI,kBAAoB,uFAE9BsI,GAAkBtI,4EAEvB,iFAEgDsI,EAAiBjuB,QAAQ3G,iJAQjG,OAAO,SAAUmQ,GACLA,EAAKC,EAAb,IACIC,EAAKF,EAAKE,GACFF,EAAKG,MACPH,EAAKZ,IACAY,EAAKI,SACJJ,EAAKK,UACRL,EAAKM,OACJN,EAAKX,QACNW,EAAKO,OAElB,OAAOL,CAAE;;;;OAIR,kBAAsBsjB;;;;;;;;;;yFAU4DU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2DrF,CAEJ,CACA,GAAoB7yB,GAAK,aACzB,GAAoBmP,MAAQ,SAI5B,YC9PA,IACI,UACA,YACA,OACA,YACA,OACA,WACA,UACA,SACA,YACA,WACA,WACA,SACA,UACA,SACA,cACA,UACA,UACA,SACA,aACA,UACA,mBACA,UACA,UACA,SACA,YACA,UACA,qBACA,gBACA,WACA,UACA,0BACA,UACA,sDACA,UACA,UACA,WACA,OACA,WACA,QACA,SACA,6BACA,iBACA,WACA,YACA,WACA,MACA,UACA,SACA,UACA,SACA,QACA,0BACA,WACA,QACA,WACA,SACA,iBACA,iBACA,2BACA,UACA,WACA,0BACA,QACA,SACA,SACA,QACA,YACA,YACA,YACA,MACA,OACA,aACA,6DACA,cACA,YACA,UACA,QACA,UACA,WACA,WACA,UACA,SACA,WACA,SACA,cACA,OACA,QACA,SACA,qBACA,UACA,SACA,MACA,QACA,UACA,+BACA,mCACA,UACA,aACA,eACA,aACA,WACA,QACA,YACA,UACA,OACA,QACA,UACA,cACA,gCACA,YACA,QACA,iBACA,mBACA,SACA,SACA,gBACA,YACA,mBACA,oBACA,oBACA,sBACA,SACA,QACA,QACA,oBACA,OACA,mBACA,iBACA,UACA,SACA,aACA,UACA,UACA,QACA,UACA,SACA,QACA,WACA,YACA,UACA,QAC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","sources":["webpack://admin/./src/admin/service/core/types.ts","webpack://admin/./src/admin/service/core/container-service.ts","webpack://admin/./src/admin/service/core/ui-service.ts","webpack://admin/./src/admin/dto/animation.ts","webpack://admin/./src/admin/service/core/database-service.ts","webpack://admin/./src/admin/repository/animation-repository.ts","webpack://admin/./src/admin/dto/author.ts","webpack://admin/./src/admin/repository/author-repository.ts","webpack://admin/./src/admin/dto/channel.ts","webpack://admin/./src/admin/repository/channel-repository.ts","webpack://admin/./src/admin/dto/settings.ts","webpack://admin/./src/admin/repository/settings-repository.ts","webpack://admin/./src/admin/dto/image.ts","webpack://admin/./src/admin/repository/image-repository.ts","webpack://admin/./src/admin/dto/item.ts","webpack://admin/./src/admin/repository/changesets/item-changeset.ts","webpack://admin/./src/admin/repository/item-repository.ts","webpack://admin/./src/admin/dto/static-page.ts","webpack://admin/./src/admin/repository/static-page-repository.ts","webpack://admin/./src/admin/dto/theme.ts","webpack://admin/./src/admin/repository/theme-repository.ts","webpack://admin/./src/admin/dto/token-metadata-cache.ts","webpack://admin/./src/admin/repository/token-metadata-cache-repository.ts","webpack://admin/./src/admin/dto/query-cache.ts","webpack://admin/./src/admin/repository/query-cache-repository.ts","webpack://admin/./src/admin/dto/attribute.ts","webpack://admin/./src/admin/repository/attribute-count-repository.ts","webpack://admin/./src/admin/dto/original-metadata.ts","webpack://admin/./src/admin/repository/original-metadata-repository.ts","webpack://admin/./src/admin/dto/car.ts","webpack://admin/./src/admin/repository/car-repository.ts","webpack://admin/./src/admin/service/core/schema-service.ts","webpack://admin/./src/admin/components/admin/toolbar.f7.html","webpack://admin/./src/admin/components/admin/app.f7.html","webpack://admin/./src/admin/service/core/queue-service.ts","webpack://admin/./src/admin/service/quill-service.ts","webpack://admin/./src/admin/util/validation-exception.ts","webpack://admin/./src/admin/service/svg-service.ts","webpack://admin/./src/admin/service/theme-service.ts","webpack://admin/./src/admin/service/image-service.ts","webpack://admin/./src/admin/service/core/settings-service.ts","webpack://admin/./src/admin/service/core/hugging-face-service.ts","webpack://admin/./src/admin/service/quill-editor-service.ts","webpack://admin/./src/admin/service/core/upload-service.ts","webpack://admin/./src/admin/service/core/wallet-service-impl.ts","webpack://admin/./src/admin/service/author-service.ts","webpack://admin/./src/admin/service/core/query-cache-service.ts","webpack://admin/./src/admin/service/original-metadata-service.ts","webpack://admin/./src/admin/service/item-service.ts","webpack://admin/./src/admin/service/attribute-count-service.ts","webpack://admin/./src/admin/service/channel-service.ts","webpack://admin/./src/admin/service/core/ipfs-service.ts","webpack://admin/./src/admin/service/animation-service.ts","webpack://admin/./src/admin/service/static-page-service.ts","webpack://admin/./src/admin/service/core/export-service.ts","webpack://admin/./src/admin/service/web/item-web-service.ts","webpack://admin/./src/admin/service/web/channel-web-service.ts","webpack://admin/./src/admin/service/web/author-web-service.ts","webpack://admin/./src/admin/service/core/gitlab-service.ts","webpack://admin/./src/admin/service/core/routing-service.ts","webpack://admin/./src/admin/util/model-view.ts","webpack://admin/./src/admin/util/route-map.ts","webpack://admin/./src/admin/components/admin/navbar.f7.html","webpack://admin/./src/admin/components/admin/channel/index.f7.html","webpack://admin/./src/admin/util/languages.ts","webpack://admin/./src/admin/components/admin/channel/form.f7.html","webpack://admin/./src/admin/components/admin/channel/create.f7.html","webpack://admin/./src/admin/components/admin/channel/token-navigator.f7.html","webpack://admin/./src/admin/components/admin/channel/show.f7.html","webpack://admin/./src/admin/components/admin/channel/theme-form.f7.html","webpack://admin/./src/admin/components/admin/channel/themes.f7.html","webpack://admin/./src/admin/components/admin/channel/static-page-form.f7.html","webpack://admin/./src/admin/components/admin/channel/static-pages.f7.html","webpack://admin/./src/admin/components/admin/channel/edit.f7.html","webpack://admin/./src/admin/components/admin/channel/create-menu.f7.html","webpack://admin/./src/admin/service/core/erc-event-service.ts","webpack://admin/./src/admin/service/core/import-service.ts","webpack://admin/./src/admin/components/admin/channel/fork.f7.html","webpack://admin/./src/admin/components/admin/channel/fork-contract.f7.html","webpack://admin/./src/admin/components/admin/channel/fork-reader.f7.html","webpack://admin/./src/admin/components/admin/channel/upgrade.f7.html","webpack://admin/./src/admin/controller/channel-controller.ts","webpack://admin/./src/admin/service/core/github-service.ts","webpack://admin/./src/admin/service/car-service.ts","webpack://admin/./src/admin/service/core/git-service.ts","webpack://admin/./src/admin/components/admin/item/form.f7.html","webpack://admin/./src/admin/components/admin/item/create.f7.html","webpack://admin/./src/admin/components/admin/item/show.f7.html","webpack://admin/./src/admin/components/admin/item/edit.f7.html","webpack://admin/./src/admin/controller/item-controller.ts","webpack://admin/./src/admin/components/admin/author/show.f7.html","webpack://admin/./src/admin/components/admin/author/edit.f7.html","webpack://admin/./src/admin/controller/author-controller.ts","webpack://admin/./src/admin/components/admin/settings/index.f7.html","webpack://admin/./src/admin/controller/settings-controller.ts","webpack://admin/./src/admin/components/admin/connect/index.f7.html","webpack://admin/./src/admin/controller/connect-controller.ts","webpack://admin/./src/admin/components/admin/publish/index.f7.html","webpack://admin/./src/admin/components/admin/publish/export.f7.html","webpack://admin/./src/admin/service/core/publish-ipfs-service.ts","webpack://admin/./src/admin/service/core/publish-service.ts","webpack://admin/./src/admin/components/admin/publish/ipfs.f7.html","webpack://admin/./src/admin/components/admin/publish/fork-reader.f7.html","webpack://admin/./src/admin/components/admin/publish/publish-reader.f7.html","webpack://admin/./src/admin/service/core/deploy-service.ts","webpack://admin/./src/admin/components/admin/publish/contract.f7.html","webpack://admin/./src/admin/controller/publish-controller.ts","webpack://admin/./src/admin/service/core/paging-service.ts","webpack://admin/./src/admin/components/admin/channel/channel-card.f7.html","webpack://admin/./src/admin/inversify.config.ts","webpack://admin/./src/admin/index.ts"],"sourcesContent":["const TYPES = {\n    WalletService: Symbol(\"WalletService\"),\n};\n\nexport default TYPES","\nimport { container } from \"../../inversify.config.js\"\nimport TYPES from \"./types.js\"\nimport { WalletService } from \"./wallet-service.js\"\n\nclass ContainerService {\n\n    static getInstance(clazz) {\n        \n        return container.get(clazz)\n    }\n\n    static getContainer() {\n        return container\n    }\n\n    static getWalletService() {\n        return container.get<WalletService>(TYPES.WalletService)\n\n    }\n\n\n}\n\nexport {\n    ContainerService\n}","import { injectable, inject } from \"inversify\";\n\n\n\n@injectable()\nclass UiService {\n\n    constructor(@inject(\"framework7\") public app) {\n    }\n\n    showExceptionPopup(ex) {\n        console.log(ex)\n        this.app.dialog.alert(ex.message, \"There was an error\")\n    }\n\n    showPopup(message) {\n        this.app.dialog.alert(message)\n    }\n\n\n\n    showAlert(message) {\n        this.app.dialog.alert(message)\n    }\n\n\n    /**\n     * Spinner\n     */\n\n    spinnerDialog: any\n\n    showSpinner(message?:string) {\n\n        if (this.spinnerDialog) this.hideSpinner()\n        this.spinnerDialog = this.app.dialog.preloader(message ? message : \"Loading\")\n    }\n\n\n    hideSpinner() {\n        if (this.spinnerDialog) {\n            this.spinnerDialog.close()\n            this.spinnerDialog = null \n        }\n    }\n\n\n    progressDialog:any\n\n    showProgress(message:string) {\n\n        if (this.progressDialog) this.hideProgress()\n\n        var progress = 0\n\n        this.progressDialog = this.app.dialog.progress(message ? message : \"Loading\", progress)\n\n    }\n\n    setProgress(progress:number, message:string) {\n        if (this.progressDialog) {\n            this.progressDialog.setProgress(progress)\n            this.progressDialog.setText(message)\n        }\n    }\n\n    hideProgress() {\n        if (this.progressDialog) {\n            this.progressDialog.close()\n            this.progressDialog = null \n        }\n    }\n\n\n}\n\nexport {\n    UiService\n}","import { IsNotEmpty, Allow } from 'class-validator'\n\n\nclass Animation {\n    \n    @Allow()\n    _id?:string\n\n    @Allow()\n    _rev?:string \n\n    @Allow()\n    content?:string\n    \n    @IsNotEmpty()\n    cid?:string \n\n    @Allow()\n    dateCreated?:string\n    \n    \n}\n\nexport {\n    Animation\n}","import { inject, injectable } from 'inversify';\n\n\n@injectable()\nclass DatabaseService {\n\n    dbCache = {}\n\n    constructor(\n        @inject(\"pouch-prefix\") private pouchPrefix:string,\n        @inject('PouchDB') private PouchDB\n    ) {}\n\n    async getDatabase(name:string, changesets?:Changeset[]) {\n\n        let PouchDB = this.PouchDB()\n\n        const fullName = `${this.pouchPrefix}-large-${name}`\n\n        if (this.dbCache[fullName]) return this.dbCache[fullName]\n\n        //Create or open database\n        this.dbCache[fullName] = new PouchDB(fullName, { auto_compaction: true })\n\n        const details = await this.dbCache[fullName].info()\n\n        //Check if it's a brand new database\n        let isEmpty = details.doc_count == 0 && details.update_seq == 0\n\n        //If it's empty build the indexes\n        if (isEmpty) {\n\n            //Create indexes\n            if (changesets) {\n\n                console.log(`Creating indexes for ${fullName}`)\n\n                let localChangesets:LocalChangeset = { \n                    _id: \"_local/changesets\",\n                    ids: [] \n                }\n\n                for (let changeset of changesets) {\n                    await changeset.changeset(this.dbCache[fullName])\n                    localChangesets.ids.push(changeset.id)\n                    console.log(`New changeset detected...${changeset.id}`)\n                }\n\n                //Mark changesets as run\n                await this.dbCache[fullName].put(localChangesets)\n\n                \n            }\n\n        } else {\n\n            //Otherwise check if each changeset has been applied and if not then apply it.\n            if (changesets) {\n\n                let localChangesets:LocalChangeset \n\n                try {\n                    localChangesets = await this.dbCache[fullName].get(\"_local/changesets\")\n                } catch(ex) {}\n\n                if (!localChangesets) {\n                    localChangesets = { \n                        _id: \"_local/changesets\",\n                        ids: [] \n                    }\n                }\n\n\n                let updated = false\n\n                for (let changeset of changesets) {\n                    \n                    //If it hasn't been run then run it.\n                    if (!localChangesets.ids.includes(changeset.id)) {\n\n                        try {\n                            //Execute the changes. This could fail if the changes have actually been applied but it wasn't marked. \n                            //But in that scenario we just accept the failure and mark it applied. \n                            await changeset.changeset(this.dbCache[fullName])\n                        } catch(ex) { }\n                        \n                        \n                        localChangesets.ids.push(changeset.id)\n                        \n                        updated = true\n                        \n                        console.log(`New changeset detected...${changeset.id}`)\n                    }\n\n                }\n\n\n                if (updated) {\n                    console.log(`Saving changeset log...`, localChangesets)\n                    await this.dbCache[fullName].put(localChangesets)\n                }   \n            }\n        }\n\n        return this.dbCache[fullName]\n\n    }\n\n    async getEmptyDatabase(name:string) {\n\n        let PouchDB = this.PouchDB()\n\n        const fullName = `${this.pouchPrefix}-large-${name}`\n\n        //Create or open database\n        this.dbCache[fullName] = new PouchDB(fullName, { auto_compaction: true })\n\n        return this.dbCache[fullName]\n\n    }\n\n    async getLatestRevision(db, _id:string) {\n        \n        let latest\n\n        try {\n            latest = await db.get(_id)\n        } catch(ex) {}\n\n        if (latest) return latest\n\n        let results = await db.allDocs({key: _id, include_docs: true, deleted: 'ok' })\n\n        if (results.rows?.length > 0) {\n\n            //Return a deleted representation\n            let result = {\n                _id: _id,\n                _rev: results.rows[0].value.rev,\n                _deleted: true\n            }\n    \n            return result\n    \n        }\n\n        \n\n    }\n\n\n}\n\n\ninterface Changeset {\n    id:string\n    changeset(db): Promise<void>\n}\n\ninterface LocalChangeset {\n    _id:string\n    ids:string[]\n}\n\nexport {\n    DatabaseService, Changeset\n}","import { injectable } from \"inversify\"\nimport { Animation } from \"../dto/animation.js\"\nimport { Changeset, DatabaseService } from \"../service/core/database-service.js\"\n\n\n@injectable()\nclass AnimationRepository {\n\n    changesets:Changeset[] = [{\n        id: '0',\n        changeset: async (db) => {\n\n            await db.createIndex({\n                index: {\n                    fields: ['dateCreated']\n                }\n            })\n\n        }\n    }]\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n\n    async load(channelId:string) {\n        this.db = await this.databaseService.getDatabase(`${channelId}-animation`, this.changesets)\n    }\n\n    async loadEmpty(channelId:string) {\n        this.db = await this.databaseService.getEmptyDatabase(`${channelId}-animation`)\n    }\n\n    async get(_id: string): Promise<Animation> {\n        return Object.assign(new Animation(), await this.db.get(_id))\n    }\n\n    async put(animation: Animation) {\n        await this.db.put(animation)\n    }\n\n    async delete(animation: Animation): Promise<void> {\n        await this.db.remove(animation)\n    }\n\n    async getByIds(ids:string[]) {\n        let results = await this.db.allDocs({\n            keys: ids,\n            include_docs: true\n\n        })\n\n        return results.rows?.map( d => d.doc)\n    }\n\n}\n\nexport {\n    AnimationRepository\n}","import { Allow, IsNotEmpty } from 'class-validator'\n\nclass Author {\n\n  @Allow()\n  _id?: string\n\n  @Allow()\n  _rev?:string\n\n  @IsNotEmpty()\n  walletAddress?: string\n\n  @Allow()\n  name?: string\n\n  @Allow()\n  description?: string\n\n  @Allow()\n  url?:string \n\n  @Allow()\n  coverPhotoId?: string\n\n  @Allow()\n  dateCreated?:string\n  \n  @Allow()\n  lastUpdated?:string\n\n}\n\nexport {\n  Author\n}","import { injectable } from \"inversify\"\nimport { Author } from \"../dto/author.js\"\nimport { DatabaseService } from \"../service/core/database-service.js\"\n\n\n@injectable()\nclass AuthorRepository {\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n\n    async load(channelId:string) {\n        this.db = await this.databaseService.getDatabase(`${channelId}-author`)\n    }\n\n    async loadEmpty(channelId:string) {\n        this.db = await this.databaseService.getEmptyDatabase(`${channelId}-author`)\n    }\n\n    async getLatestRevision(_id:string) : Promise<Author> {\n        return Object.assign(new Author(), await this.databaseService.getLatestRevision(this.db, _id))\n    }\n    \n    async get(_id: string): Promise<Author> {\n        return Object.assign(new Author(), await this.db.get(_id))\n    }\n\n    async put(author: Author) {\n        return this.db.put(author)\n    }\n\n}\n\nexport {\n    AuthorRepository\n}","import { MinLength, ArrayNotEmpty, ArrayMinSize, ValidateNested, IsNotEmpty, Allow } from 'class-validator'\n\nimport { AttributeOptions } from \"./attribute.js\";\n\nclass Channel {\n\n    @Allow()\n    _id?:string\n\n    @Allow()\n    _rev?:string \n\n    @Allow()\n    forkedFromCid?:string\n\n    @Allow()\n    forkedFromId?:string\n\n    @Allow()\n    forkedFromFeeRecipient?:string\n\n    @Allow()\n    forkType?:string\n\n    @Allow()\n    disableForks?:boolean\n\n    @Allow()\n    authorId?:string\n\n    @MinLength(3, { message: \"Title must be more than 3 characters.\" })\n    title?:string\n\n    @IsNotEmpty()\n    symbol?:string\n\n    @Allow()\n    link?:string\n\n    @Allow()\n    description?:any\n\n    @Allow()\n    descriptionHTML?:string\n\n    @Allow()\n    descriptionMarkdown?:string\n\n    @Allow()\n    license?:any\n\n    @Allow()\n    licenseHTML?:string\n\n    @Allow()\n    licenseMarkdown?:string\n\n    @Allow()\n    category?:string[]\n\n    @Allow()\n    language?:string\n\n    @Allow()\n    coverImageId?:string\n\n    @Allow()\n    coverBannerId?:string\n\n    @Allow()\n    mintPrice?:string\n\n    @Allow()\n    attributeOptions?:AttributeOptions[]\n\n    // @Allow()\n    // sellerFeeBasisPoints?:number\n\n    // @Allow()\n    // royaltyPercent?:string\n\n    @Allow()\n    contractAddress?:string\n\n    @Allow()\n    pinJobId?:string\n\n    @Allow()\n    pinJobStatus?:string\n\n\n    @Allow()\n    gitProvider?:string\n\n    @Allow()\n    httpUrlToRepo?:string\n\n    @Allow()\n    publishReaderRepoId?:string\n\n    @Allow()\n    publishReaderRepoPath?:string\n\n    @Allow()\n    publishReaderRepoBranch?:string\n\n    @Allow()\n    publishReaderRepoStatus?:string\n\n    @Allow()\n    publishReaderIPFSStatus?:any\n\n    @Allow()\n    pubDate?:string\n\n\n    /** Production config */\n\n    @Allow()\n    productionHostname?:string\n\n    @Allow()\n    productionBaseURI?:string\n\n    @Allow()\n    productionBaseLibraryURI?:string\n\n    @Allow()\n    showMintPage?:boolean\n\n    @Allow()\n    showActivityPage?:boolean\n\n    @Allow()\n    marketplaces?:MarketplaceConfig\n\n    @Allow()\n    externalLinks?:ExternalLinkConfig\n\n    /** End production config */\n\n\n\n\n    @Allow()\n    importSuccess?:boolean\n\n    @Allow()\n    dateCreated?:string\n\n    @Allow()\n    lastUpdated?:string\n\n}\n\ninterface MarketplaceConfig {\n    name:string\n    link?:string\n}\n\ninterface ExternalLinkConfig {\n    name:string\n    link?:string\n}\n\n\nexport {\n    Channel\n}\n","import { injectable } from \"inversify\"\nimport { Channel } from \"../dto/channel.js\"\nimport { Changeset, DatabaseService } from \"../service/core/database-service.js\"\n\n\n@injectable()\nclass ChannelRepository {\n\n    changesets:Changeset[] = [{\n        id: '0',\n        changeset: async (db) => {\n\n            //Create indexes\n            await db.createIndex({ index: { fields: ['dateCreated'] } })\n            await db.createIndex({ index: { fields: ['lastUpdated'] } })\n\n        }\n    }]\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n\n    async load() {\n        this.db = await this.databaseService.getDatabase(\"channel\", this.changesets)\n    }\n\n    async get(_id: string): Promise<Channel> {\n        return Object.assign(new Channel(), await this.db.get(_id))\n    }\n\n    async getLatestRevision(_id:string) : Promise<Channel> {\n        return Object.assign(new Channel(), await this.databaseService.getLatestRevision(this.db, _id))\n    }\n\n    async put(channel: Channel) {\n        return this.db.put(channel)\n    }\n\n    async list(limit: number, skip: number): Promise<Channel[]> {\n\n        // console.log(await this.db.allDocs({include_docs: true}))\n\n        let response = await this.db.find({\n            selector: { \"dateCreated\": { $exists: true } },\n            sort: [{ 'dateCreated': 'desc' }],\n            limit: limit,\n            skip: skip\n        })\n\n        return response.docs\n\n    }\n\n    async delete(channel: Channel): Promise<void> {\n        await this.db.remove(channel)\n    }\n\n\n}\n\nexport {\n    ChannelRepository\n}","import { IsNotEmpty, Allow, IsBoolean } from 'class-validator'\n\n\nclass Settings {\n\n    @Allow()\n    _id?: string\n\n    @Allow()\n    _rev?:string\n\n    @Allow()\n    ipfsHost?:string\n\n    @Allow()\n    defaultGitProvider?:string\n\n    @Allow()\n    gitProviders?:{} \n\n    @Allow()\n    gitCorsProxy?:string\n\n    @Allow()\n    username?:string \n\n    @Allow()\n    personalAccessToken?:string\n\n    @Allow()\n    alchemyKey?:string\n\n    @Allow()\n    huggingFace?:string\n\n    @Allow()\n    @IsBoolean()\n    welcomeHide?:boolean\n\n    @Allow()\n    dateCreated?:string\n\n    @Allow()\n    lastUpdated?:string\n\n\n}\n\nexport {\n    Settings\n}","import { injectable } from \"inversify\"\nimport { Settings } from \"../dto/settings.js\"\nimport { Changeset, DatabaseService } from \"../service/core/database-service.js\"\n\n\n@injectable()\nclass SettingsRepository {\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n    async load() {\n        this.db = await this.databaseService.getDatabase(\"settings\")\n    }\n    async get(): Promise<Settings> {\n        return Object.assign(new Settings(), await this.db.get(\"single\"))\n    }\n\n    async put(settings: Settings) {\n\n        //Force it to have the 'single' id\n        settings._id = \"single\"\n\n        await this.db.put(settings)\n    }\n\n}\n\nexport {\n    SettingsRepository\n}","import { MinLength, ArrayNotEmpty, ArrayMinSize, ValidateNested,IsNotEmpty, Allow } from 'class-validator'\n\n\nclass Image {\n    \n    @Allow()\n    _id?:string\n\n    @Allow()\n    _rev?:string \n\n    @Allow()\n    buffer?:any\n\n    @Allow()\n    svg?:string\n\n    @Allow()\n    title?:string\n    \n    @IsNotEmpty()\n    cid?:string \n\n    @Allow()\n    generated?:boolean\n\n    @Allow()\n    dateCreated?:string\n    \n    \n}\n\nexport {\n    Image\n}","import { injectable } from \"inversify\"\nimport { Image } from \"../dto/image.js\"\nimport { Changeset, DatabaseService } from \"../service/core/database-service.js\"\n\n\n@injectable()\nclass ImageRepository {\n\n    changesets:Changeset[] = [{\n        id: '0',\n        changeset: async (db) => {\n            await db.createIndex({\n                index: {\n                    fields: ['dateCreated']\n                }\n            })\n        }\n    }]\n\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n\n    async load(channelId?:string) {\n        this.db = await this.databaseService.getDatabase(`${channelId}-image`, this.changesets)\n    }\n\n    async loadEmpty(channelId?:string) {\n        this.db = await this.databaseService.getEmptyDatabase(`${channelId}-image`)\n    }\n\n    async get(_id: string): Promise<Image> {\n        return Object.assign(new Image(), await this.db.get(_id))\n    }\n\n    async put(image: Image) {\n        await this.db.put(image)\n    }\n\n    async delete(image: Image): Promise<void> {\n        await this.db.remove(image)\n    }\n\n    async getByIds(ids:string[]) {\n        let results = await this.db.allDocs({\n            keys: ids,\n            include_docs: true\n\n        })\n\n        return results.rows?.map( d => d.doc)\n    }\n\n\n}\n\nexport {\n    ImageRepository\n}","import { AttributeOptions, AttributeSelection } from \"./attribute.js\"\n\nimport { MinLength, ArrayNotEmpty, ArrayMinSize ,IsNotEmpty, Allow } from 'class-validator'\n\nclass Item {\n    \n    @Allow()\n    _id?:string\n    \n    @Allow()\n    _rev?:string\n\n    @Allow()\n    forkedFromId?:string\n    \n    @IsNotEmpty()\n    channelId?:string\n    \n    @IsNotEmpty()\n    tokenId?:number \n    \n    @Allow()\n    title?:string \n\n    @Allow()\n    link?:string \n\n    @Allow()\n    description?:string\n\n    @Allow()\n    content?:any\n\n    @Allow()\n    contentHTML?:string\n\n    @Allow()\n    excerpt?:string\n\n    @Allow()\n    authorId?:string\n\n    @Allow()\n    category?:string[]\n\n    @Allow()\n    attributeSelections?: AttributeSelection[] \n\n    @Allow()\n    coverImageId?:string\n\n    @Allow()\n    coverImageGenerated?:boolean\n\n    @Allow()\n    animationId?:string\n\n    @Allow()\n    themes?:string[]\n\n    @Allow()\n    coverImageCSS?:string \n\n    @Allow()\n    animationCSS?:string\n\n    @Allow()\n    coverImageAsAnimation?:boolean\n\n    @Allow()\n    originalJSONMetadataId?:string\n\n    @Allow()\n    imageIds?:string[]\n\n    @Allow()\n    datePublished?:string\n\n    @Allow()\n    dateCreated?:string\n    \n    @Allow()\n    lastUpdated?:string\n}\n\n\n\n\n\nexport { Item }","//@ts-nocheck\n\nimport { Changeset } from \"../../service/core/database-service.js\"\n\nlet changesets:Changeset[] = [\n    {\n        id: '0',\n        changeset: async (db) => {\n            \n            await db.createIndex({\n                index: {\n                    fields: ['dateCreated']\n                }\n            })\n                    \n        }\n    },\n\n    {\n        id: '1',\n        changeset: async (db) => {\n\n            await db.put({\n                _id: '_design/attribute_counts',\n                views: {\n                  attribute_counts: {\n                    map: function (doc) { \n\n                        if (doc.attributeSelections?.length > 0) {\n                            for (let as of doc.attributeSelections) {\n                                emit ([doc.channelId, as.traitType, as.value])\n                            }\n                        }\n\n                    }.toString(),\n                    reduce: '_count'\n                  }\n                }\n            })\n\n\n        }\n    },\n\n    {\n        id: '5',\n        changeset: async (db) => {\n\n            await db.put({\n                _id: '_design/by_channel_token',\n                views: {\n                    by_channel_token: {\n                        map: function (doc) { \n                            emit([doc.channelId, doc.tokenId])\n                        }.toString(),\n                    }\n                }\n            })\n\n            await db.put({\n                _id: '_design/by_channel_token_stats',\n                views: {\n                    by_channel_token_stats: {\n                        map: function (doc) { \n                            emit(doc.channelId, doc.tokenId)\n                        }.toString(),\n                        reduce: \"_stats\"\n                    }\n                }\n            })\n\n\n        }\n    },\n    {\n        id: '6',\n        changeset: async (db) => {\n\n            await db.createIndex({\n                index: {\n                    fields: ['animationId']\n                }\n            })\n\n            await db.put({\n                _id: '_design/by_image_id',\n                views: {\n                    by_image_id: {\n                        map: function (doc) { \n\n                            if (doc.imageIds && doc.imageIds?.length > 0) {\n                                for (let imageId of doc.imageIds) {\n                                    emit(imageId)\n                                }\n                            }\n\n                        }.toString(),\n                    }\n                }\n            })\n\n        }\n    }\n\n]\n\n\nexport {\n    changesets\n}","import { injectable } from \"inversify\"\nimport { Item } from \"../dto/item.js\"\nimport { Changeset, DatabaseService } from \"../service/core/database-service.js\"\nimport { AttributeCount, AttributeSelection } from \"../dto/attribute.js\"\n\nimport { changesets } from \"./changesets/item-changeset.js\"\n\n\n@injectable()\nclass ItemRepository {\n\n    static CHUNK_SIZE = 35\n\n    changesets:Changeset[] = changesets\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n    async load(channelId:string) {\n        this.db = await this.databaseService.getDatabase(`${channelId}-item`, this.changesets)\n    }\n\n    async loadEmpty(channelId:string) {\n        this.db = await this.databaseService.getEmptyDatabase(`${channelId}-item`)\n    }\n\n    async get(_id: string): Promise<Item> {\n        return Object.assign(new Item(), await this.db.get(_id))\n    }\n\n    async getIds() : Promise<string[]> {\n\n        let result = await this.db.allDocs({ include_docs: true })\n\n        let rows = result.rows.filter(row => !row.id.startsWith(\"_design\") && !row.id.startsWith(\"_local\"))\n\n        return rows.sort((a, b) => parseInt(a.value.tokenId) - parseInt(b.value.tokenId)).map( r => r.id)\n\n    }\n\n    async getLatestRevision(_id:string) : Promise<Item> {\n        return Object.assign(new Item(), await this.databaseService.getLatestRevision(this.db, _id))\n    }\n\n    async getByTokenId(channelId: string, tokenId:number) : Promise<Item> {\n\n        let result = await this.db.query('by_channel_token', {\n            reduce: false,\n            include_docs: true,\n            key: [channelId, tokenId],\n            limit: 1\n        })\n        \n        if (result.rows?.length > 0) {\n            return Object.assign(new Item(), result.rows[0].doc)\n        }\n       \n    }\n\n    async put(item: Item) {\n        await this.db.put(item)\n    }\n\n    async listByChannel(channelId: string, limit: number, skip: number): Promise<Item[]> {\n\n        let items:Item[] = []\n\n        let result = await this.db.query('by_channel_token', {\n            reduce: false,\n            include_docs: true ,\n            startkey: [channelId, 0],\n            endkey: [channelId, {}],\n            limit: limit,\n            skip: skip\n        })\n\n        if (result.rows?.length > 0) {\n\n            for (let row of result.rows) {\n                items.push(Object.assign(new Item(), row.doc))\n            }\n        }\n\n\n        return items\n\n\n    }\n\n    async delete(item: Item): Promise<void> {\n        await this.db.remove(item)\n    }\n\n    async getAttributeCountByChannel(channelId:string) : Promise<AttributeCount[]> {\n\n        let result = await this.db.query('attribute_counts', {\n            reduce: true,\n            startKey:[channelId, \"\", \"\"],\n            endKey:[channelId, {}, {}],\n            include_docs: false,\n            group_level: 3\n        })\n\n        return result.rows.map(row => {\n            return {\n                traitType: row.key[1],\n                value: row.key[2],\n                count: row.value,\n                channelId: channelId\n            }\n        })\n\n    }\n\n    async getAttributeInfoBySelections(channelId:string, attributeSelections:AttributeSelection[]) : Promise<AttributeCount[]> {\n\n        let result = await this.db.query('attribute_counts', {\n            reduce: true,\n            keys:attributeSelections.map( as => [channelId, as.traitType, as.value]),\n            include_docs: false,\n            group_level: 3\n        })\n\n        // console.log(result)\n\n        return result.rows.map(row => {\n            return {\n                traitType: row.key[1],\n                value: row.key[2],\n                count: row.value,\n                channelId: channelId\n            }\n        })\n\n    }\n\n    async getByImageId(imageId:string) : Promise<Item[]> {\n\n        let result = await this.db.query('by_image_id', {\n            reduce: false,\n            include_docs: true,\n            key: imageId\n        })\n\n        return result.rows?.map( r => r.doc)\n\n\n    }\n\n    async getByAnimationId(animationId:string) : Promise<Item[]> {\n\n        let response = await this.db.find({\n            selector: { \"animationId\": { $eq: animationId } }\n        })\n\n        return response.docs\n\n    }\n\n}\n\ninterface AttributeInfo {   \n    traitType:string\n    value:string\n    count:number \n    percent:number\n}\n\n\nexport {\n    ItemRepository, AttributeInfo\n}","import { Allow, IsNotEmpty } from 'class-validator'\n\nclass StaticPage {\n\n  @Allow()\n  _id?: string\n\n  @Allow()\n  _rev?:string\n\n  @Allow()\n  forkedFromId?:string\n\n  @IsNotEmpty()\n  channelId?:string\n\n  @IsNotEmpty()\n  name?: string\n\n  @IsNotEmpty()\n  slug?:string\n\n  @Allow()\n  content?:any\n\n  @Allow()\n  contentHTML?:string\n\n  @Allow()\n  contentMarkdown?:string\n\n  @Allow()\n  locations?:string[] \n\n  @Allow()\n  dateCreated?:string\n  \n  @Allow()\n  lastUpdated?:string\n\n}\n\n\n\nexport {\n  StaticPage\n}","import { injectable } from \"inversify\"\nimport { StaticPage } from \"../dto/static-page.js\"\nimport { Changeset, DatabaseService } from \"../service/core/database-service.js\"\n\n\n@injectable()\nclass StaticPageRepository {\n\n    changesets:Changeset[] = [{\n        id: '0',\n        changeset: async (db) => {\n            await db.createIndex({\n                index: {\n                    fields: ['channelId']\n                }\n            })\n    \n            await db.createIndex({\n                index: {\n                    fields: ['dateCreated']\n                }\n            })\n    \n        }\n    }]\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n\n    async load(channelId:string) {\n        this.db = await this.databaseService.getDatabase(`${channelId}-static-page`, this.changesets)\n    }\n\n    async loadEmpty(channelId:string) {\n        this.db = await this.databaseService.getEmptyDatabase(`${channelId}-static-page`)\n    }\n\n    async get(_id: string): Promise<StaticPage> {\n        return Object.assign(new StaticPage(), await this.db.get(_id))\n    }\n\n    async getIds() : Promise<string[]> {\n\n        let result = await this.db.allDocs({ include_docs: false})\n\n        return result.rows.filter(row => !row.id.startsWith(\"_design\") && !row.id.startsWith(\"_local\")).map( r => r.id)\n\n    }\n\n    async getLatestRevision(_id:string) : Promise<StaticPage> {\n        return Object.assign(new StaticPage(), await this.databaseService.getLatestRevision(this.db, _id))\n    }\n\n    async put(staticPage: StaticPage) {\n        await this.db.put(staticPage)\n    }\n\n    async delete(staticPage:StaticPage) {\n        await this.db.remove(staticPage)\n    }\n\n    async listByChannel(channelId: string, limit: number, skip: number): Promise<StaticPage[]> {\n\n        let response = await this.db.find({\n            selector: {\n                channelId: { $eq: channelId },\n                dateCreated: { $exists: true }\n            },\n            sort: [{ 'dateCreated': 'asc' }],\n            limit: limit,\n            skip: skip\n        })\n\n        return response.docs\n\n    }\n\n}\n\nexport {\n    StaticPageRepository\n}","import { Allow, IsNotEmpty } from 'class-validator'\n\nclass Theme {\n\n  @Allow()\n  _id?: string\n\n  @Allow()\n  _rev?:string\n\n  @Allow()\n  forkedFromId?:string\n\n  @IsNotEmpty()\n  channelId?:string\n\n  @IsNotEmpty()\n  name?: string\n\n  @Allow()\n  coverImageCSS?: string\n\n  @Allow()\n  animationCSS?:string \n\n  @Allow()\n  dateCreated?:string\n  \n  @Allow()\n  lastUpdated?:string\n\n}\n\nexport {\n  Theme\n}","import { injectable } from \"inversify\"\nimport { Theme } from \"../dto/theme.js\"\nimport { Changeset, DatabaseService } from \"../service/core/database-service.js\"\n\n\n@injectable()\nclass ThemeRepository {\n\n    changesets:Changeset[] = [{\n        id: '0',\n        changeset: async (db) => {\n            await db.createIndex({\n                index: {\n                    fields: ['channelId']\n                }\n            })\n    \n            await db.createIndex({\n                index: {\n                    fields: ['dateCreated']\n                }\n            })\n        }\n    }]\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n\n    async load(channelId:string) {\n        this.db = await this.databaseService.getDatabase(`${channelId}-theme`, this.changesets)\n    }\n\n    async loadEmpty(channelId:string) {\n        this.db = await this.databaseService.getEmptyDatabase(`${channelId}-theme`)\n    }\n\n    async get(_id: string): Promise<Theme> {\n        return Object.assign(new Theme(), await this.db.get(_id))\n    }\n\n    async getIds() : Promise<string[]> {\n\n        let result = await this.db.allDocs({ include_docs: false})\n\n        return result.rows.filter(row => !row.id.startsWith(\"_design\") && !row.id.startsWith(\"_local\")).map( r => r.id)\n\n    }\n\n    async getLatestRevision(_id:string) : Promise<Theme> {\n        return Object.assign(new Theme(), await this.databaseService.getLatestRevision(this.db, _id))\n    }\n\n    async put(theme: Theme) {\n        await this.db.put(theme)\n    }\n\n    async delete(theme:Theme) {\n        await this.db.remove(theme)\n    }\n\n    async listByChannel(channelId: string, limit: number, skip: number): Promise<Theme[]> {\n\n        let response = await this.db.find({\n            selector: {\n                channelId: { $eq: channelId },\n                dateCreated: { $exists: true }\n            },\n            sort: [{ 'dateCreated': 'asc' }],\n            limit: limit,\n            skip: skip\n        })\n\n        return response.docs\n\n    }\n\n}\n\nexport {\n    ThemeRepository\n}","import { IsNotEmpty, Allow } from 'class-validator'\n\n\nclass TokenMetadataCache {\n    \n    @Allow()\n    _id?:string\n\n    @Allow()\n    _rev?:string \n\n    @Allow()\n    tokenMetadata?:TokenMetadata\n    \n    @Allow()\n    dateCreated?:string\n    \n    \n}\n\ninterface TokenMetadata {\n    tokenId:number\n    name: string\n    \n    image: string\n    image_url:string \n\n    external_url: string \n    animation_url:string\n    attributes: [{\n        trait_type: string\n        value:string\n    }]\n}\n\n\n\nexport {\n    TokenMetadataCache, TokenMetadata\n}","import { TokenMetadata, TokenMetadataCache } from \"../dto/token-metadata-cache.js\"\nimport { injectable } from \"inversify\"\nimport { DatabaseService } from \"../service/core/database-service.js\"\n\n\n@injectable()\nclass TokenMetadataCacheRepository {\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n\n    async load() {\n        this.db = await this.databaseService.getDatabase(\"token-metadata-cache\")\n    }\n    \n    async get(_id: string): Promise<TokenMetadataCache> {\n        return Object.assign(new TokenMetadataCache(), await this.db.get(_id))\n    }\n\n    async put(tokenMetadataCache: TokenMetadataCache) {\n        await this.db.put(tokenMetadataCache)\n    }\n\n}\n\nexport {\n    TokenMetadataCacheRepository\n}","import { A } from '@svgdotjs/svg.js'\nimport { IsNotEmpty, Allow } from 'class-validator'\n\n\nclass QueryCache {\n    \n    @Allow()\n    _id?:string\n\n    @Allow()\n    _rev?:string \n\n    @Allow()\n    result:any\n\n    @Allow()\n    stale?:boolean\n\n    @Allow()\n    lastUpdated?:string\n\n    @Allow()\n    dateCreated?:string\n    \n    \n}\n\nexport {\n    QueryCache\n}","import { QueryCache } from \"../dto/query-cache.js\"\nimport { injectable } from \"inversify\"\nimport { DatabaseService } from \"../service/core/database-service.js\"\n\n\n@injectable()\nclass QueryCacheRepository {\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n\n    async load() {\n        this.db = await this.databaseService.getDatabase(\"query-cache\")\n    }\n\n    async get(_id: string): Promise<QueryCache> {\n        return Object.assign(new QueryCache(), await this.db.get(_id))\n    }\n\n    async put(queryCache: QueryCache) {\n        await this.db.put(queryCache)\n    }\n\n\n    async delete(_id:string): Promise<void> {\n        await this.db.remove(_id)\n    }\n\n}\n\nexport {\n    QueryCacheRepository\n}","import { IsNotEmpty, Allow } from 'class-validator'\n\n\n\ninterface AttributeOptions {\n    id?:string\n    traitType?:string\n    values?:string[]\n}\n\ninterface AttributeSelection {\n    id?:string\n    traitType?:string\n    value?:string \n}\n\n\nclass AttributeCount {\n    \n    @Allow()\n    _id?:string\n\n    @Allow()\n    _rev?:string \n\n    @Allow()\n    channelId?:string \n\n    @Allow()\n    traitType:string\n\n    @Allow()\n    value: string\n\n    @Allow()\n    count: number\n\n    @Allow()\n    lastUpdated?:string\n\n    @Allow()\n    dateCreated?:string\n    \n    \n}\n\nexport {\n    AttributeOptions, AttributeSelection, AttributeCount\n}","import { QueryCache } from \"../dto/query-cache.js\"\nimport { injectable } from \"inversify\"\nimport { DatabaseService } from \"../service/core/database-service.js\"\nimport { AttributeCount } from \"../dto/attribute.js\"\n\n\n@injectable()\nclass AttributeCountRepository {\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n    async load(channelId:string) {\n        this.db = await this.databaseService.getDatabase(`${channelId}-attribute-counts`)\n    }\n\n    async loadEmpty(channelId:string) {\n        this.db = await this.databaseService.getEmptyDatabase(`${channelId}-attribute-counts`)\n    }\n\n    async get(_id: string): Promise<AttributeCount> {\n        return Object.assign(new AttributeCount(), await this.db.get(_id))\n    }\n\n    async put(attributeCount: AttributeCount) {\n        await this.db.put(attributeCount)\n    }\n\n\n    async delete(_id:string): Promise<void> {\n        await this.db.remove(_id)\n    }\n\n}\n\nexport {\n    AttributeCountRepository\n}","import { IsNotEmpty, Allow } from 'class-validator'\n\n\nclass OriginalMetadata {\n    \n    @Allow()\n    _id?:string\n\n    @Allow()\n    _rev?:string \n\n    @Allow()\n    content?:string\n    \n    @IsNotEmpty()\n    cid?:string \n\n    @Allow()\n    dateCreated?:string\n    \n    \n}\n\nexport {\n    OriginalMetadata\n}","import { injectable } from \"inversify\"\nimport { Changeset, DatabaseService } from \"../service/core/database-service.js\"\nimport { OriginalMetadata } from \"../dto/original-metadata.js\"\n\n\n@injectable()\nclass OriginalMetadataRepository {\n\n    changesets:Changeset[] = [{\n        id: '0',\n        changeset: async (db) => {\n\n            await db.createIndex({\n                index: {\n                    fields: ['dateCreated']\n                }\n            })\n\n        }\n    }]\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n\n    async load(channelId:string) {\n        this.db = await this.databaseService.getDatabase(`${channelId}-original-metadata`, this.changesets)\n    }\n\n    async loadEmpty(channelId:string) {\n        this.db = await this.databaseService.getEmptyDatabase(`${channelId}-original-metadata`)\n    }\n\n    async get(_id: string): Promise<OriginalMetadata> {\n        return Object.assign(new OriginalMetadata(), await this.db.get(_id))\n    }\n\n    async put(originalMetadata: OriginalMetadata) {\n        await this.db.put(originalMetadata)\n    }\n\n    async delete(originalMetadata: OriginalMetadata): Promise<void> {\n        await this.db.remove(originalMetadata)\n    }\n\n    async getByIds(ids:string[]) {\n        let results = await this.db.allDocs({\n            keys: ids,\n            include_docs: true\n\n        })\n\n        return results.rows?.map( d => d.doc)\n    }\n\n}\n\nexport {\n    OriginalMetadataRepository\n}","import { IsNotEmpty, Allow } from 'class-validator'\n\n\nclass Car {\n    \n    @Allow()\n    _id?:string\n\n    @Allow()\n    _rev?:string \n\n    @IsNotEmpty()\n    cid?:string \n\n    @Allow()\n    content?:Uint8Array\n\n    @Allow()\n    dateCreated?:string\n        \n}\n\nexport {\n    Car\n}","import { injectable } from \"inversify\"\nimport { DatabaseService } from \"../service/core/database-service.js\"\nimport { Car } from \"../dto/car.js\"\n\n\n@injectable()\nclass CarRepository {\n\n    db: any\n\n    constructor(\n        private databaseService: DatabaseService\n    ) { }\n\n    async load(channelId:string) {\n        this.db = await this.databaseService.getDatabase(`${channelId}-car`)\n    }\n\n    async loadEmpty(channelId:string) {\n        this.db = await this.databaseService.getEmptyDatabase(`${channelId}-car`)\n    }\n\n    async get(_id: string): Promise<Car> {\n        return Object.assign(new Car(), await this.db.get(_id))\n    }\n\n    async put(car: Car) {\n        await this.db.put(car)\n    }\n\n    async delete(car: Car): Promise<void> {\n        await this.db.remove(car)\n    }\n\n    async getByIds(ids:string[]) {\n        let results = await this.db.allDocs({\n            keys: ids,\n            include_docs: true\n\n        })\n\n        return results.rows?.map( d => d.doc)\n    }\n\n}\n\nexport {\n    CarRepository\n}","import { injectable } from \"inversify\";\n\nimport { AnimationRepository } from \"../../repository/animation-repository.js\";\nimport { AuthorRepository } from \"../../repository/author-repository.js\";\nimport { ChannelRepository } from \"../../repository/channel-repository.js\";\nimport { SettingsRepository } from \"../../repository/settings-repository.js\";\nimport { ImageRepository } from \"../../repository/image-repository.js\";\nimport { ItemRepository } from \"../../repository/item-repository.js\";\nimport { StaticPageRepository } from \"../../repository/static-page-repository.js\";\nimport { ThemeRepository } from \"../../repository/theme-repository.js\";\nimport { TokenMetadataCacheRepository } from \"../../repository/token-metadata-cache-repository.js\";\nimport { QueryCacheRepository } from \"../../repository/query-cache-repository.js\";\nimport { AttributeCountRepository } from \"../../repository/attribute-count-repository.js\";\nimport { Channel } from \"../../dto/channel.js\";\nimport { DatabaseService } from \"./database-service.js\";\nimport { OriginalMetadataRepository } from \"../../repository/original-metadata-repository.js\";\nimport { CarRepository } from \"../../repository/car-repository.js\";\n\n@injectable()\nclass SchemaService {\n\n    loadedChannelId:string\n\n    constructor(\n        private authorRepository:AuthorRepository,\n        private channelRepository:ChannelRepository,\n        private imageRepository:ImageRepository,\n        private itemRepository:ItemRepository,\n        private settingsRepository:SettingsRepository,\n        private animationRepository:AnimationRepository,\n        private themeRepository:ThemeRepository,\n        private staticPageRepository:StaticPageRepository,\n        private tokenMetadataCacheRepository:TokenMetadataCacheRepository,\n        private queryCacheRepository:QueryCacheRepository,\n        private attributeCountRepository:AttributeCountRepository,\n        private originalMetadataRepository:OriginalMetadataRepository,\n        private carRepository:CarRepository,\n        private databaseService:DatabaseService\n    ) {}\n\n    async load() {\n\n        console.log(`Loading databases`)\n\n        //Open and cache databases\n        await this.channelRepository.load()\n        await this.settingsRepository.load()\n        await this.tokenMetadataCacheRepository.load()\n        await this.queryCacheRepository.load()\n\n    }\n\n    async loadChannel(channelId:string) {\n\n        if (this.loadedChannelId == channelId) return\n\n        console.time(`Loading channel: ${channelId}`)\n\n        await this.authorRepository.load(channelId)\n        await this.itemRepository.load(channelId)\n        await this.animationRepository.load(channelId)\n        await this.originalMetadataRepository.load(channelId)\n        await this.imageRepository.load(channelId)\n        await this.themeRepository.load(channelId)\n        await this.staticPageRepository.load(channelId)\n        await this.attributeCountRepository.load(channelId)\n        await this.carRepository.load(channelId)\n\n        this.loadedChannelId = channelId\n\n        console.timeEnd(`Loading channel: ${channelId}`)\n\n    }\n\n    async loadEmptyChannel(channelId:string) {\n\n        if (this.loadedChannelId == channelId) return\n\n        console.time(`Loading empty channel: ${channelId}`)\n\n        await this.authorRepository.loadEmpty(channelId)\n        await this.itemRepository.loadEmpty(channelId)\n        await this.animationRepository.loadEmpty(channelId)\n        await this.originalMetadataRepository.loadEmpty(channelId)\n        await this.imageRepository.loadEmpty(channelId)\n        await this.themeRepository.loadEmpty(channelId)\n        await this.staticPageRepository.loadEmpty(channelId)\n        await this.attributeCountRepository.loadEmpty(channelId)\n        await this.carRepository.loadEmpty(channelId)\n\n        this.loadedChannelId = channelId\n\n        console.timeEnd(`Loading empty channel: ${channelId}`)\n\n    }\n\n\n\n    async loadChannelBackup(channelBackup:ChannelBackup) {\n\n        console.time(`Loading channel from backup`)\n\n\n        await this.loadEmptyChannel(channelBackup.channel._id)\n\n        console.log(`Loading:\n            Items: ${channelBackup.items ? channelBackup.items.length : 0}\n            Themes: ${channelBackup.themes ? channelBackup.themes.length : 0}\n            Static Pages: ${channelBackup.staticPages ? channelBackup.staticPages.length : 0}\n            Attribute Counts: ${channelBackup.attributeCounts ? channelBackup.attributeCounts.length : 0}\n            Authors: ${channelBackup.authors ? channelBackup.authors.length : 0}\n            Original Metadata: ${channelBackup.originalMetadata ? channelBackup.originalMetadata.length : 0}\n\n        `)\n\n        const prepareRows = (rows) => {\n\n            rows.map(row => {\n                delete row._rev\n                delete row['_rev_tree'] \n            })\n\n        }\n\n\n        prepareRows(channelBackup.items)\n        prepareRows(channelBackup.themes)\n        prepareRows(channelBackup.staticPages)\n        prepareRows(channelBackup.attributeCounts)\n        prepareRows(channelBackup.authors)\n        prepareRows(channelBackup.originalMetadata)\n\n\n        await this.itemRepository.db.bulkDocs(channelBackup.items)\n        await this.themeRepository.db.bulkDocs(channelBackup.themes)\n        await this.staticPageRepository.db.bulkDocs(channelBackup.staticPages)\n        await this.attributeCountRepository.db.bulkDocs(channelBackup.attributeCounts)\n        await this.authorRepository.db.bulkDocs(channelBackup.authors)\n        await this.channelRepository.db.bulkDocs([channelBackup.channel])\n        await this.originalMetadataRepository.db.bulkDocs(channelBackup.originalMetadata)\n\n        console.timeEnd(`Loading channel from backup`)\n\n\n    }\n\n\n    async backupChannel() : Promise<ChannelBackup> {\n\n        let channel = await this.channelRepository.get(this.loadedChannelId)\n\n        let itemDocs = await this.itemRepository.db.allDocs({ include_docs: true })\n        let animationsDocs = await this.animationRepository.db.allDocs({ include_docs: true })\n        let imagesDocs = await this.imageRepository.db.allDocs({ include_docs: true })\n        let themesDocs = await this.themeRepository.db.allDocs({ include_docs: true })\n        let staticPagesDocs = await this.staticPageRepository.db.allDocs({ include_docs: true })\n        let attributeCountsDocs = await this.attributeCountRepository.db.allDocs({ include_docs: true })\n        let authorDocs = await this.authorRepository.db.allDocs({ include_docs: true })\n        let originalMetadataDocs = await this.originalMetadataRepository.db.allDocs({ include_docs: true })\n\n\n        return {\n            channel: channel,\n            items: itemDocs.rows.map(r => r.doc),\n            animations: animationsDocs.rows.map(r => r.doc),\n            images: imagesDocs.rows.map(r => r.doc),\n            themes: themesDocs.rows.map(r => r.doc),\n            staticPages: staticPagesDocs.rows.map(r => r.doc),\n            attributeCounts: attributeCountsDocs.rows.map(r => r.doc),\n            authors: authorDocs.rows.map(r => r.doc),\n            originalMetadata: originalMetadataDocs.rows.map(r => r.doc)\n        }\n\n    }\n\n\n    async dropChannel(channelId:string) {\n\n        console.log(`Dropping channel: ${channelId}`)\n\n        //Delete all files and then compact()\n        let clearDatabase = async (db) => {\n\n            let updatedRows = []\n\n            let result = await db.allDocs()\n\n            for (let row of result.rows) {\n\n                if (row.id.startsWith(\"_design\") || row.id.startsWith(\"_local\")) continue\n\n                updatedRows.push({\n                    _id: row.id,\n                    _rev: row.value.rev,\n                    _deleted: true\n                })\n            }\n\n            const details = await db.info()\n\n            //Remove\n            await db.bulkDocs(updatedRows)\n\n            //Compact\n            await db.compact()\n\n            //Clear cached copy\n            delete this.databaseService.dbCache[details.db_name]\n\n        }\n\n        await clearDatabase(this.authorRepository.db)\n        await clearDatabase(this.itemRepository.db)\n        await clearDatabase(this.animationRepository.db)\n        await clearDatabase(this.originalMetadataRepository.db)\n        await clearDatabase(this.imageRepository.db)\n        await clearDatabase(this.themeRepository.db)\n        await clearDatabase(this.staticPageRepository.db)\n        await clearDatabase(this.attributeCountRepository.db)\n        await clearDatabase(this.carRepository.db)\n\n    }\n\n\n\n}\n\ninterface ChannelBackup {\n    channel:Channel,\n    items: any,\n    originalMetadata: any,\n    authors:any,\n    animations?: any,\n    images?: any,\n    themes: any,\n    staticPages: any,\n    attributeCounts: any\n}\n\n\nexport {\n    SchemaService, ChannelBackup\n}","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../service/core/container-service\";\nfunction framework7Component(props, {\n  $on,\n  $f7,\n  $update\n}) {\n  let version = ContainerService.getInstance(\"version\");\n  const clone = document.getElementById(\"footer-template\")?.content?.cloneNode(true);\n  let footerTemplate;\n  if (clone) {\n    const serializer = new XMLSerializer();\n    footerTemplate = serializer.serializeToString(clone);\n  }\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"toolbar toolbar-bottom\">\n\n    <div class=\"toolbar-inner\" style=\"display: block; padding: 10px;\">\n\n      \n      ${footerTemplate ? $h`\n        \n        <div innerHTML='${footerTemplate}'></div>\n      \n      ` : $h`\n        <span class=\"footer-link\">\n          Code licensed under <a href=\"https://github.com/LargeNFT/large-nft/blob/master/LICENSE.md\" class=\"external\">MIT</a>\n        </span>\n\n        <span class=\"footer-link\">\n          <a href=\"https://github.com/LargeNFT/large-nft\" class=\"external\">GitHub</a>\n        </span>\n\n        <span class=\"footer-link\"><a href=\"https://www.npmjs.com/package/large-nft/v/${version}\" class=\"external\">${version}</a></span>\n      \n      `}\n\n\n      \n    </div>\n  </div>\n\n\n`\n    }\n    ;\n}\nframework7Component.id = 'fa23e5dd96';\nframework7Component.style = `\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../service/core/container-service\";\nimport { UiService } from \"../../service/core/ui-service\";\nimport { WalletService } from \"../../service/core/wallet-service\";\nimport { SchemaService } from \"../../service/core/schema-service\";\nimport Toolbar from \"../../components/admin/toolbar.f7.html\";\nfunction framework7Component(props, {\n  $on,\n  $f7ready,\n  $f7,\n  $f7router,\n  $update\n}) {\n  $f7ready(async () => {\n    let getHash = () => {\n      return window.location.hash?.length > 2 ? window.location.hash.substring(2) : undefined;\n    };\n    let baseURI = window.location.pathname;\n    let hash = getHash();\n    let mainView;\n    let uiService = ContainerService.getInstance(UiService);\n    let walletService = ContainerService.getWalletService();\n    let schemaService = ContainerService.getInstance(SchemaService);\n    let walletAddress;\n    const displayAddress = async e => {\n      walletAddress = undefined;\n      if (!walletService.provider) {\n        await walletService.initProvider();\n      }\n      walletAddress = await walletService.getAddress();\n      if (walletAddress) {\n        walletService.address = walletAddress;\n        if (!walletService.wallet) {\n          await walletService.connect();\n        }\n      }\n      await $update();\n    };\n    const connectWallet = async e => {\n      await walletService.initWallet();\n\n      //Connect to metamask\n      await walletService.connect();\n      await displayAddress();\n    };\n    document.addEventListener('connect-wallet', async e => {\n      await connectWallet();\n    });\n    async function init() {\n      uiService.showSpinner(\"Loading...\");\n      await schemaService.load();\n      await displayAddress();\n      mainView = $f7.views.create('.view-main', {\n        url: hash ? hash : '/',\n        browserHistory: true,\n        browserHistoryRoot: baseURI,\n        reloadCurrent: true\n      });\n\n      // mainView.router.navigate(\"/\", { reloadCurrent : true })\n\n      uiService.hideSpinner();\n    }\n    await init();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n  <div id=\"app\">\n\n\n    <!-- Status bar overlay for fullscreen mode-->\n    <div class=\"statusbar\"></div>\n\n    <div class=\"view view-main\" >\n\n      <${Toolbar} />\n\n    </div>\n\n\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = 'a65a026990';\nexport default framework7Component;","\nimport { inject, injectable } from \"inversify\";\nimport { PromiseView } from \"../../util/promise-view.js\";\n\n@injectable()\nclass QueueService {\n\n    constructor(\n      @inject(\"framework7\") private app,\n    ) {}\n\n    async queuePromiseView(promiseView: PromiseView) : Promise<any> {\n\n      const self = this\n\n      let queueItem: QueueItem = {\n        id: Guid.newGuid(),\n        icon: promiseView.icon,\n        title: promiseView.title,\n      }\n\n      let before = async function () {\n        return new Promise<void>((resolve, reject) => {\n          self._beforeSaveAction(queueItem)\n          resolve()\n        })\n      }\n\n      let after = async function() {\n\n        let result = await promiseView.promise\n\n        try {\n          self._showSuccess(result, queueItem)\n        } catch(ex) {\n          self._showError(ex, queueItem)\n        }\n\n        return result\n\n      }\n\n      return before()\n              .then(after)\n    }\n\n\n    \n    private _beforeSaveAction(queueItem: QueueItem) : void {     \n\n      // Create toast with close button\n      queueItem.toast = this.app.toast.create({\n        text: queueItem.title,\n        closeButton: false\n      })\n\n      queueItem.toast.open()\n\n    }\n\n    private _showError(error, queueItem:QueueItem) {\n\n      queueItem.toast.close()\n\n      console.log(error)\n\n      let toast = {\n        text: error.message,\n        closeButton: true,\n        closeButtonText: \"Close\",\n        closeTimeout: 5000\n      }\n\n      this.app.toast.create(toast).open()\n\n    }\n\n\n    private _showSuccess(result, queueItem:QueueItem): void {\n\n      const self = this\n\n      queueItem.toast.close()\n\n      let toast = {\n        text: \"Transaction Submitted\",\n        closeButton: true,\n        closeTimeout: 5000\n      }\n\n      this.app.toast.create(toast).open()\n    }\n\n\n\n}\n\ninterface QueueItem {\n  toast?: any\n\n  id: string,\n  icon: string,\n  title: string,\n}\n\n//from https://stackoverflow.com/questions/26501688/a-typescript-guid-class\nclass Guid {\n  static newGuid() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n          var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n          return v.toString(16);\n      });\n  }\n}\n\nexport { QueueService, QueueItem }\n","import { QuillDeltaToHtmlConverter } from \"quill-delta-to-html\"\nimport { deltaToMarkdown } from 'quill-delta-to-markdown'\n\n// import { toDelta } from \"delta-markdown-for-quill\"\nimport pkg from 'delta-markdown-for-quill'\nconst { toDelta } = pkg\n\nimport { injectable } from 'inversify'\n\n\n@injectable()\nclass QuillService {\n\n  constructor() {}\n\n  async translateContent(content: any, suppressSrc:boolean=false): Promise<string> {\n\n    if (!content?.ops) return \"\"\n\n    const qdc = new QuillDeltaToHtmlConverter(content.ops, { \n      encodeHtml: false\n    })\n\n    //Render dividers into HTML\n    qdc.renderCustomWith(renderCustom(suppressSrc))\n\n    return qdc.convert()\n  }\n\n  async translateContentEncodeHtml(content: any, suppressSrc:boolean=false): Promise<string> {\n\n    if (!content?.ops) return \"\"\n\n    const qdc = new QuillDeltaToHtmlConverter(content.ops, { })\n\n    //Render dividers into HTML\n    qdc.renderCustomWith(renderCustom(suppressSrc))\n\n    return qdc.convert()\n  }\n\n\n\n  async generateMarkdown(content: any) : Promise<string> {\n    return deltaToMarkdown(content.ops)\n  }\n\n  async deltaFromMarkdown(ops:string) : Promise<string> {\n    return toDelta(ops)\n  }\n\n\n}\n\n\nconst renderCustom = (suppressSrc) => {\n\n  return function (customOp, contextOp) {\n\n    if (customOp.insert.type === 'divider') {\n      return \"<hr />\"\n    }\n  \n    if (customOp.insert.type === 'ipfsimage') {\n      \n      let img = `<img `\n  \n      if (!suppressSrc) {\n        img += `src=\"${customOp.insert.value.src}\" `\n      }\n  \n      \n      if (customOp.insert.value.width) {\n        img += `width=\"${customOp.insert.value.width}\" `\n      }\n  \n      if (customOp.insert.value.height) {\n        img += `height=\"${customOp.insert.value.height}\" `\n      }\n  \n      if (customOp.insert.value.style) {\n        img += `style=\"${customOp.insert.value.style}\"`\n      }\n  \n      img += \"/>\"\n  \n      return img\n    }\n  \n  }\n\n\n\n}\n\nexport { QuillService }\n\n","import { validate, ValidationError } from 'class-validator';\n\n\nclass ValidationException extends Error {\n\n    constructor(\n        public errors:ValidationError[]\n    ) {\n        super()\n    }\n\n}\n\nexport {\n    ValidationException\n}","import { injectable } from \"inversify\"\n\n\n@injectable()\nclass SvgService {\n\n    constructor() {}\n\n    async fromText(title:string, text:string, individualCss?:string, themeCss?:string) : Promise<string> {\n\n        let fontSize = \"140px\"\n        let lineHeight = \"160px\"\n\n\n        if (title) {\n            text = `<span class='svg-title'>${title}</span><br /><br /><span class='svg-text'>${text}</span>`\n        }\n\n\n        if (text.length > 50 && text.length <= 100) {\n            fontSize = \"110px\"\n            lineHeight = \"130px\"\n        }\n\n        if (text.length > 100 && text.length <= 175) {\n            fontSize = \"90px\"\n            lineHeight = \"110px\"\n        }\n\n        if (text.length > 175) {\n            fontSize = \"75px\"\n            lineHeight = \"95px\"\n        }\n\n\n        let start = `<svg viewBox='0 0 1200 1200' xmlns='http://www.w3.org/2000/svg' version='1.1'>\n            <style>\n                * {\n                    --lh: ${lineHeight};\n                    height:100%;\n                    margin: 0;\n                    padding: 0;\n                    box-sizing: border-box;\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n                }\n\n\n                @keyframes gradient {\n                    0% {\n                        background-position: 0% 50%;\n                    }\n                    25% {\n                        background-position: 50%% 50%;\n                    }\n                    50% {\n                        background-position: 100% 50%;\n                    }\n                    75% {\n                        background-position: 50% 50%;\n                    }\n                    100% {\n                        background-position: 0% 50%;\n                    }\n                }\n\n\n                .svg-h1 {\n\n                    border: 25px solid rgb(78,130,177);\n                    \n                    background: rgb(241,241,241);\n                    background: linear-gradient(-45deg, rgba(241,241,241,1) 13%, rgba(239,243,248,1) 37%, rgba(176,209,220,0.927608543417367) 69%, rgba(255,255,255,1) 100%);\n                    background-size: 400% 400%;\n                    animation: gradient 15s ease infinite;\n\n                    text-align: center;\n                    font-size: ${fontSize};\n                    padding: 70px;            \n                    line-height: var(--lh);\n                    height: 1200px;\n                    width: 1200px;  \n                    -webkit-mask-image: linear-gradient(180deg, rgb(0,0,0) 60%, transparent);        \n                }\n\n                .svg-title {\n                    font-weight: 700;\n                    font-size: 1.25em;\n                }\n\n                .svg-text {\n                    width: 100%;\n                    font-weight: 500;\n                }\n\n                ${themeCss ? themeCss : ''}\n\n                ${individualCss ? individualCss : ''}\n\n            </style>\n            <g>\n                <foreignObject x='0' y='0' width='1200' height='1200'>\n                    <h1 class=\"svg-h1\" xmlns='http://www.w3.org/1999/xhtml'>${text}</h1>\n                </foreignObject>\n            </g>\n        </svg>`\n\n\n        return start\n    }\n\n}\n\nexport {\n    SvgService\n}","import { Theme } from \"../dto/theme.js\";\nimport { inject, injectable } from \"inversify\";\nimport { ThemeRepository } from \"../repository/theme-repository.js\";\nimport { validate, ValidationError } from \"class-validator\";\nimport { ValidationException } from \"../util/validation-exception.js\";\nimport { WalletService } from \"./core/wallet-service.js\";\nimport TYPES from \"./core/types.js\";\nimport { v4 as uuidv4 } from 'uuid';\n\n@injectable()\nclass ThemeService {\n\n  db: any\n\n  constructor(\n    private themeRepository: ThemeRepository,\n    @inject(TYPES.WalletService) private walletService: WalletService\n  ) { }\n\n  async get(_id: string): Promise<Theme> {\n    return this.themeRepository.get(_id)\n  }\n\n  async getIds() : Promise<string[]> {\n    return this.themeRepository.getIds()\n  }\n\n  async getLatestRevision(_id:string) : Promise<Theme> {\n    return this.themeRepository.getLatestRevision(_id)\n  }\n\n  async put(theme: Theme) {\n\n    if (!theme._id) {\n      theme._id = uuidv4()\n      theme.dateCreated = new Date().toJSON()\n    } else {\n      theme.lastUpdated = new Date().toJSON()\n    }\n\n  \n    //Validate\n    let errors: ValidationError[] = await validate(theme, {\n      forbidUnknownValues: true,\n      whitelist: true\n    })\n\n    if (errors.length > 0) {\n      throw new ValidationException(errors)\n    }\n\n    await this.themeRepository.put(theme)\n  }\n\n  async delete(theme:Theme) {\n    return this.themeRepository.delete(theme)\n  }\n\n\n  async listByChannel(channelId: string, limit: number, skip: number): Promise<Theme[]> {\n    return this.themeRepository.listByChannel(channelId, limit, skip)\n  }\n\n\n\n}\n\n\nexport { ThemeService }\n\n","\n\nimport { injectable } from \"inversify\"\n\nimport truncate from \"html-truncate\"\nimport svgToMiniDataURI from 'mini-svg-data-uri'\nimport he from 'he'\n\nimport Hash from 'ipfs-only-hash'\n\n\nimport { Image } from \"../dto/image.js\"\nimport { ValidationException } from \"../util/validation-exception.js\"\nimport { validate, ValidationError } from 'class-validator'\nimport { ImageRepository } from \"../repository/image-repository.js\"\nimport { SvgService } from \"./svg-service.js\"\nimport { QuillService } from \"./quill-service.js\"\n\nimport { Item } from \"../dto/item.js\"\nimport { Theme } from \"../dto/theme.js\"\nimport { ThemeService } from \"./theme-service.js\"\n\n\n@injectable()\nclass ImageService {\n\n  db: any\n\n  constructor(\n    private imageRepository: ImageRepository,\n    private svgService:SvgService,\n    private quillService:QuillService,\n    private themeService:ThemeService\n  ) { }\n\n  async load(channelId:string) {\n    this.db = await this.imageRepository.load(channelId)\n  }\n\n  async get(_id: string): Promise<Image> {\n    return this.imageRepository.get(_id)\n  }\n\n  async put(image: Image) {\n\n    if (!image._id) {\n      image._id = image.cid\n      image.dateCreated = new Date().toJSON()\n    } \n\n    //Validate\n    let errors: ValidationError[] = await validate(image, {\n      forbidUnknownValues: true,\n      whitelist: true\n    })\n\n    if (errors.length > 0) {\n      throw new ValidationException(errors)\n    }\n\n    await this.imageRepository.put(image)\n  }\n\n  async delete(image:Image): Promise<void> {\n    await this.imageRepository.delete(image)\n  }\n\n  async newFromBuffer(buffer: Uint8Array): Promise<Image> {\n\n    const image: Image = new Image()\n\n    image.buffer = buffer\n    image.cid = await Hash.of(buffer)\n    image.generated = false\n\n    return image\n\n  }\n\n  async newFromSvg(svg:string) {\n\n    const image: Image = new Image()\n\n    image.svg = svg\n    image.cid = await Hash.of(image.svg)\n    image.generated = true\n\n    return image\n\n  }\n\n  async getUrl(image: Image) {\n\n    if (!image.buffer && !image.svg) return \"\"\n\n    //If we have a buffer return it as a URL\n    if (image.buffer) {\n      let blob = this.bufferToBlob(image.buffer)\n      return this.blobToDataURL(blob)\n    } \n\n    if (image.svg) {\n      return this.getSVGURL(image)\n    }\n    \n\n  }\n\n  async getSVGURL(image: Image) {\n\n    if (!image.svg) return \"\"\n    return this.svgToDataURL(image.svg)\n\n  }\n\n  public bufferToBlob(buffer: Uint8Array): Promise<Blob> {\n\n    if (Blob != undefined) {\n      //@ts-ignore\n      return new Blob([buffer], { type: \"image/jpg\" })\n    }\n\n  }\n\n  public blobToDataURL(blob): Promise<string> {\n\n    let dataUrl\n\n    return new Promise((resolve, reject) => {\n\n      const fr = new FileReader()\n\n      fr.onload = async function () {\n        dataUrl = fr.result\n        resolve(dataUrl)\n      }\n\n      fr.readAsDataURL(blob)\n    })\n\n  }\n\n  public svgToDataURL(svgStr) {  \n    return svgToMiniDataURI(svgStr)\n\n    // return \"data:image/svg+xml;base64,\" + Buffer.from(svgStr).toString(\"base64\")\n  }\n\n  public async newFromItem(item:Item) {\n\n    let content = await this.quillService.translateContentEncodeHtml(item.content)\n\n    let themes:Theme[] = []\n    \n    if (item.themes) {\n\n      for (let theme of item.themes) {\n        themes.push(await this.themeService.get(theme))\n      } //might not exist because it got deleted.\n\n    }\n\n\n    let allThemeCss = \"\"\n\n    if (themes?.length > 0) {\n        for (let css of themes?.map( theme => theme?.coverImageCSS)) {\n            if (css?.length > 0) allThemeCss += css\n        }\n    }\n\n\n    let excerpt = this.getExcerptByFirstParagraph(content, {\n      pruneLength: 500\n    })\n\n    if (!excerpt || excerpt.length == 0) { \n      throw new Error(\"No text\") \n    }\n\n    const image: Image = new Image()\n\n    image.svg = await this.svgService.fromText(item.title, excerpt, item.coverImageCSS, allThemeCss)\n    image.cid = await Hash.of(image.svg)\n\n    // console.log(new TextEncoder().encode(image.svg))\n    // console.log(image.cid)\n\n    image.generated = true\n    \n    return image\n\n\n  }\n\n  //Grabbing from the \n  private getExcerptByFirstParagraph (excerpt, options) {\n\n    //Strip tags except for <p>\n    // excerpt = excerpt.replace(/<(?![p|br]\\s*\\/?)[^>]+>/g, '')\n    \n    excerpt = he.unescape(excerpt)\n   \n    const pruneLength = typeof options.pruneLength === 'number' ? options.pruneLength : 140\n\n    if (pruneLength > 0) {\n      excerpt = truncate(excerpt, pruneLength, {\n        ellipsis: \"\"\n      })\n    }\n\n    excerpt = he.encode(excerpt, {allowUnsafeSymbols: true})\n\n    return excerpt\n\n\n  }\n\n  async getByIds(ids:string[]) {\n    return this.imageRepository.getByIds(ids)\n  }\n\n  async getImageContent(image:Image) {\n\n    let content\n\n    if (image.buffer) {\n\n        if (content instanceof Uint8Array) {\n          content = image.buffer\n        } else {\n\n          if (image.buffer.data?.length > 0) {\n            content = new Uint8Array(image.buffer.data) \n          } else {\n            // @ts-ignore\n            content = Buffer.from(Object.values(image.buffer)) //this is because pouchdb allDocs is returning a weird format of the data on node, but just sometimes.\n          }\n\n        }\n\n    } else if (image.svg) {\n        content = new TextEncoder().encode(image.svg)\n    }\n\n    return content\n\n  }\n\n  async loadImage(image, imageData) {\n\n    return new Promise (function (resolved, rejected) {\n\n      //@ts-ignore\n      image.onload = function(){\n\n        //@ts-ignore\n        resolved()\n      }\n\n      image.src = URL.createObjectURL(new Blob([imageData], {'type': 'image/jpg'}))\n\n    })\n\n\n  }\n\n  async phlipImage(inputImage) {\n\n    const outputImage = document.createElement(\"canvas\")\n    outputImage.width = inputImage.naturalWidth\n    outputImage.height = inputImage.naturalHeight\n      \n    const ctx = outputImage.getContext(\"2d\")\n  \n    // Phlip the image by scaling negatively to the left\n    ctx.scale(-1, 1)\n  \n    // Draw the image on the canvas\n    // Starts at [-width, 0] because the phlip scaled negatively\n    ctx.drawImage(inputImage, -outputImage.width, 0)\n\n\n    const imageData = ctx.getImageData(0, 0, outputImage.width, outputImage.height)\n\n    const binary = new Uint8Array(imageData.data.length)\n    \n    for (let i = 0; i < imageData.data.length; i++) {\n        binary[i] = imageData.data[i]\n    }\n\n    return binary\n\n  }\n\n\n\n\n}\n\nexport {\n  ImageService\n}","import { Settings } from \"../../dto/settings.js\";\nimport { injectable } from \"inversify\";\nimport { SettingsRepository } from \"../../repository/settings-repository.js\";\nimport { validate, ValidationError } from \"class-validator\";\nimport { ValidationException } from \"../../util/validation-exception.js\";\n\n@injectable()\nclass SettingsService {\n\n    constructor(\n        private settingsRepository:SettingsRepository\n    ) {}\n\n    async get(): Promise<Settings> {\n\n        let settings \n\n        try {\n            settings = await this.settingsRepository.get()\n        } catch(ex) {}\n        \n        if (settings) return settings\n\n        return Object.assign(new Settings(), {\n            _id: 'single',\n            defaultGitProvider: 'github',\n            gitProviders:{\n                gitlab:{\n                    name: \"gitlab\" //username and password added when saved\n                },\n                github: {\n                    name: \"github\" //username and password added when saved\n                }\n            },\n            welcomeHide: false\n        })\n\n\n        \n    }\n\n    async put(settings: Settings) {\n\n        if (!settings._id) {\n            settings._id = \"single\"\n            settings.dateCreated = new Date().toJSON()\n        } else {\n            settings.lastUpdated = new Date().toJSON()\n        }\n\n        //Validate\n        let errors: ValidationError[] = await validate(settings, {\n            forbidUnknownValues: true,\n            whitelist: true\n        })\n\n        if (errors.length > 0) {\n            throw new ValidationException(errors)\n        }\n\n        await this.settingsRepository.put(settings)    \n    }\n\n\n}\n\nexport {\n    SettingsService\n}","import { HfInference } from \"@huggingface/inference\";\nimport { inject, injectable } from \"inversify\";\nimport { SettingsService } from \"./settings-service.js\";\n\n@injectable()\nclass HuggingFaceService {\n\n    inference:HfInference\n\n    constructor(\n        private settingsService:SettingsService\n    ) {}\n\n    async init() {\n\n        let settings = await this.settingsService.get()\n\n        if (!settings.huggingFace) return\n\n        this.inference = new HfInference(settings.huggingFace)\n\n    }\n\n    async generateImage(model:string, prompt:string, negativePrompt?:string) : Promise<Blob> {\n\n        let options:any = {\n            inputs: prompt,\n            parameters: {\n                width: 1200,\n                height: 1200\n            },\n            model: model\n        }\n\n        if (negativePrompt) {\n            options.parameters.negative_prompt = negativePrompt\n        }\n\n        return this.inference.textToImage(options)\n\n    }\n\n\n}\n\nexport {\n    HuggingFaceService\n}\n\n","//@ts-nocheck\nimport { injectable } from 'inversify';\n\nimport Quill from 'quill';\nimport QuillImageDropAndPaste from 'quill-image-drop-and-paste'\nimport BlotFormatter, { AlignAction, DeleteAction, ResizeAction, ImageSpec } from 'quill-blot-formatter'\nimport \"quill-paste-smart\";\nimport { Dom7 } from \"framework7\"\n\nimport { ImageService } from './image-service.js'\nimport { readAndCompressImage } from 'browser-image-resizer';\nimport { UiService } from './core/ui-service.js';\nimport { HuggingFaceService } from './core/hugging-face-service.js';\n\n\nvar $$ = Dom7;\n\n/**\n * END UTIL\n */\n\n@injectable()\nclass QuillEditorService {\n\n  public activeEditor: any\n\n  initialized: boolean = false\n\n  constructor(\n    private imageService: ImageService,\n    private huggingFaceService: HuggingFaceService,\n    private uiService:UiService\n  ) {\n\n    const self = this\n\n\n\n    // console.log(\"Quill service init\")\n\n  }\n\n\n  init() {\n\n    const self = this\n    if (this.initialized) return\n\n    Quill.register('modules/imageDropAndPaste', QuillImageDropAndPaste)\n    Quill.register('modules/blotFormatter', BlotFormatter)\n    Quill.debug(false)\n\n    let Inline = Quill.import('blots/inline');\n\n\n    class BoldBlot extends Inline {\n      static blotName?: string\n      static tagName?: string\n    }\n\n    BoldBlot.blotName = 'bold';\n    BoldBlot.tagName = 'strong';\n\n\n    class ItalicBlot extends Inline {\n      static blotName?: string\n      static tagName?: string\n    }\n\n    ItalicBlot.blotName = 'italic';\n    ItalicBlot.tagName = 'em';\n\n\n    // class LinkBlot extends Inline {\n\n    //   static blotName?: string\n    //   static tagName?: string\n\n    //   static create(value) {\n    //     let node = super.create();\n    //     // Sanitize url value if desired\n    //     node.setAttribute('href', value);\n    //     // Okay to set other non-format related attributes\n    //     // These are invisible to Parchment so must be static\n    //     node.setAttribute('target', '_blank')\n    //     return node;\n    //   }\n\n    //   static formats(node) {\n    //     // We will only be called with a node already\n    //     // determined to be a Link blot, so we do\n    //     // not need to check ourselves\n    //     return node.getAttribute('href')\n    //   }\n    // }\n    // LinkBlot.blotName = 'link'\n    // LinkBlot.tagName = 'a'\n\n\n    let Block = Quill.import('blots/block')\n\n    class BlockquoteBlot extends Block {\n      static blotName?: string\n      static tagName?: string\n    }\n\n    BlockquoteBlot.blotName = 'blockquote'\n    BlockquoteBlot.tagName = 'blockquote'\n\n\n    class HeaderBlot extends Block {\n      static blotName?: string\n      static tagName?: string[]\n\n      static formats(node) {\n        return HeaderBlot.tagName.indexOf(node.tagName) + 1;\n      }\n    }\n    HeaderBlot.blotName = 'header';\n    HeaderBlot.tagName = ['H1', 'H2'];\n\n\n\n    let BlockEmbed = Quill.import('blots/block/embed')\n\n    class DividerBlot extends BlockEmbed {\n      static blotName?: string\n      static tagName?: string\n    }\n    DividerBlot.blotName = 'divider';\n    DividerBlot.tagName = 'hr';\n\n\n    class IpfsImageBlot extends BlockEmbed {\n      static blotName?: string\n      static tagName?: string\n\n      static create(value) {\n  \n        let node = super.create()\n\n        node.setAttribute('src', value.src)\n        node.setAttribute('data-cid', value.cid)\n\n        if (value.width) node.setAttribute('width', value.width)\n        if (value.height) node.setAttribute('height', value.height)\n        if (value.style) node.setAttribute('style', value.style)\n        \n\n\n        return node\n      }\n\n      static value(node) {\n\n        let src = node.getAttribute('src')\n        let cid = node.getAttribute('data-cid')\n\n        let width = node.getAttribute('width')\n        let height = node.getAttribute('height')\n        let style = node.getAttribute('style')\n\n        return {\n          src: src,\n          cid: cid,\n          width: width,\n          height: height,\n          style: style\n        }\n      }\n    }\n\n    IpfsImageBlot.blotName = 'ipfsimage';\n    IpfsImageBlot.tagName = 'img';\n\n\n\n\n    Quill.register(IpfsImageBlot)\n    // Quill.register(DividerBlot)\n    // Quill.register(HeaderBlot)\n    Quill.register(BlockquoteBlot)\n    // Quill.register(LinkBlot)\n    Quill.register(BoldBlot)\n    Quill.register(ItalicBlot)\n\n    this.initialized = true\n\n  }\n\n\n  buildQuillPostEditor(selector: string, toolbarSelector: string): Quill {\n\n    this.init()\n\n    // this.activeEditor = undefined\n    this.activeEditor = new Quill(selector, {\n      bounds: \".page-content\",\n      modules: {\n        imageDropAndPaste: {\n          // add an custom image handler\n          handler: (imageDataUrl, type, imageData) => {\n            this.imageDropAndPasteHandler(imageDataUrl, type, imageData)\n          }\n        },\n\n        toolbar: toolbarSelector,\n\n        blotFormatter: {\n          specs: [\n            CustomImageSpec,\n          ],\n          align: {\n            icons: {\n              left: \"<i class='material-icons'>align_horizontal_left</i>\",\n              center: \"<i class='material-icons'>align_horizontal_center</i>\",\n              right: \"<i class='material-icons'>align_horizontal_right</i>\"\n            },\n  \n            toolbar: {\n              svgStyle: {\n                fontSize: '21px',\n              },\n            }\n          }\n        },\n\n      },\n      handlers: {\n        'link': (value) => {\n\n          if (value) {\n            var href = prompt('Enter the URL');\n            this.quill.format('link', href);\n          } else {\n            this.quill.format('link', false);\n          }\n        }\n      },\n\n      theme: \"snow\"\n    })\n\n    return this.activeEditor\n  }\n\n\n  async generateAIImage(prompt:string, negativePrompt?:string): Promise<void> {\n    \n    this.uiService.showSpinner(\"Generating AI image. This may take a few minutes...\")\n\n    let result:Blob = await this.huggingFaceService.generateImage(prompt, negativePrompt)\n\n    await this.insertBlobInEditor(result, this.activeEditor)\n\n    this.uiService.hideSpinner()\n\n  }\n\n\n  imageClick() {\n\n  }\n\n  async imageSelected(fileElement: Element): Promise<void> {\n\n    this.uiService.showSpinner(\"Processing image...\")\n\n    this.insertImage(fileElement.files[0])\n    \n    this.uiService.hideSpinner()\n\n  }\n\n\n  async insertImage(file) {\n    \n    let image = await this.insertImageInEditor(file, this.activeEditor)    \n\n    const imageSelectedEvent = new CustomEvent('image-selected', {\n      detail: { _id: image._id }\n    })\n\n    document.dispatchEvent(imageSelectedEvent)\n\n  }\n\n  async insertImageInEditor(file, editor) {\n\n    let resizedImageBlob = await readAndCompressImage(file, {\n      maxWidth: 1024\n    })\n\n    return this.insertBlobInEditor(resizedImageBlob, editor)\n\n\n  }\n\n  async insertBlobInEditor(blob:Blob, editor) {\n\n    let imageArrayBuffer:ArrayBuffer = await blob.arrayBuffer()\n\n    let image:Image = await this.imageService.newFromBuffer(new Uint8Array(imageArrayBuffer))\n    \n    try {\n      await this.imageService.put(image)\n    } catch(ex) { console.log(ex)} //Might already exist. That's fine.  \n\n    let src = await this.imageService.getUrl(image)\n    let dimensions = await this.getHeightAndWidthFromDataUrl(src)\n\n\n    let range = editor.getSelection(true)\n\n    editor.insertText(range.index, '\\n', Quill.sources.USER)\n\n    const resizeImage = (originalWidth, originalHeight) => {\n\n      var maxWidth = 500\n      var maxHeight = 500\n      \n      var widthRatio = maxWidth / originalWidth;\n      var heightRatio = maxHeight / originalHeight;\n      \n      var resizeRatio = Math.min(widthRatio, heightRatio);\n      \n      var newWidth = Math.floor(originalWidth * resizeRatio);\n      var newHeight = Math.floor(originalHeight * resizeRatio);\n      \n      return {\n        width: newWidth,\n        height: newHeight\n      }\n    }\n\n    let calculatedDimensions = resizeImage(dimensions.width, dimensions.height)\n\n    editor.insertEmbed(range.index, 'ipfsimage', { \n      cid: image.cid,\n      src: src,\n      height: calculatedDimensions.height,\n      width: calculatedDimensions.width\n    }, Quill.sources.USER)\n\n    editor.setSelection(range.index + 2, Quill.sources.SILENT)\n\n    return image\n  }\n\n\n  async imageDropAndPasteHandler(imageDataUrl, type, imageData) {\n    const file = imageData.toFile()\n    await this.insertImage(file)\n  }\n\n  async getHeightAndWidthFromDataUrl(dataURL) {\n    return new Promise(resolve => {\n      const img = new Image()\n      img.onload = () => {\n        resolve({\n          height: img.height,\n          width: img.width\n        })\n      }\n      img.src = dataURL\n    })\n  }\n\n}\n\n\n\n\n\n\n/**\n * THESE CLASSES ARE HERE BECAUSE I NEEDED TO OVERRIDE THEM TO FIX A PROBLEM WITH DELETING\n * IMAGES BUT I DONT KNOW WHERE THEY SHOULD GO. SO THEY'RE HERE FOR NOW\n */\n\n class CustomDeleteAction extends DeleteAction {\n\n  keyUpListener\n\n  onCreate() {\n\n    const self = this\n\n    this.keyUpListener = function (e: KeyboardEvent) {\n      self.onKeyUp(e)\n    }\n\n    document.addEventListener('keyup', self.keyUpListener, true);\n    this.formatter.quill.root.addEventListener('input', self.keyUpListener, true);\n  }\n\n  onDestroy() {\n    const self = this\n\n    document.removeEventListener('keyup', self.keyUpListener);\n    this.formatter.quill.root.removeEventListener('input', self.keyUpListener);\n  }\n\n  //@ts-ignore\n  onKeyUp(e: KeyboardEvent) {\n\n    if (!this.formatter.currentSpec) {\n      return;\n    }\n\n    // delete or backspace\n    if (e.keyCode === 46 || e.keyCode === 8) {\n\n      const blot = Quill.find(this.formatter.currentSpec.getTargetElement());\n      if (blot) {\n        blot.deleteAt(0);\n      }\n      this.formatter.hide();\n    }\n  }\n\n}\n\n\nclass CustomImageSpec extends ImageSpec {\n  getActions() {\n    return [AlignAction, ResizeAction, CustomDeleteAction]\n  }\n}\n\n\nexport { QuillEditorService, CustomImageSpec }\n\n","import { Buffer } from 'buffer'\nimport { injectable } from 'inversify';\n\n@injectable()\nclass UploadService {\n\n  constructor(\n  ) {}\n\n  async uploadFile(fileElement) : Promise<Buffer> {\n\n    const self = this;\n\n    let buf\n\n    return new Promise((resolve, reject) => {\n\n      const reader = new FileReader()\n\n      reader.onload = async function () {\n        // @ts-ignore\n        buf = new Buffer(reader.result)\n\n        if (buf) {\n          resolve(buf)\n        }\n\n      };\n\n      if (fileElement.files.length > 0) {\n        reader.readAsArrayBuffer(fileElement.files[0])\n      } else {\n        resolve(buf)\n      }\n\n    });\n  }\n\n}\n\n\n\n\nexport { UploadService }\n\n","import { Contract, ethers } from \"ethers\"\nimport { inject, injectable } from \"inversify\"\nimport { WalletService } from \"./wallet-service.js\"\n\n\n@injectable()\nclass WalletServiceImpl implements WalletService {\n\n  public wallet: any\n  public address: any\n\n  public ethersContracts:any = {}\n  public provider \n\n\n  constructor(\n    @inject(\"contracts\") private contracts:Contract[],\n    @inject(\"provider\") private getProvider:Function,\n    @inject(\"framework7\") private $f7\n  ) {}\n\n\n  async initProvider() {\n\n    this.provider = this.getProvider()\n\n    globalThis.ethereum?.on('accountsChanged', async (accounts) => {\n          \n      delete this.address\n\n      if (accounts?.length > 0) {\n        await this.initWallet()\n      }\n\n      this.$f7.views.main.router.refreshPage()\n\n\n    })\n\n  }\n\n\n\n  async initWallet() {\n\n    console.log('Init wallet')\n\n    delete this.address\n\n    if (!this.provider) {\n      await this.initProvider()\n    }\n\n    let accounts = await this.provider.send(\"eth_accounts\", [])\n\n    if (accounts?.length > 0) {\n      // this.address = accounts[0]\n      return this.connect()\n    }\n    \n    console.log(\"Init wallet complete\") \n\n\n  }\n\n\n  async connect() {\n    \n    console.log(\"Connect wallet\")\n\n    await this.provider.send(\"eth_requestAccounts\", [])\n    \n    this.wallet = await this.provider.getSigner()\n    this.address = await this.getAddress()\n    \n    console.log(`Wallet ${this.address} connected`) \n\n  }\n\n\n\n  async getAddress() {\n\n    if (!this.provider) return\n\n    let accounts = await this.provider.send(\"eth_accounts\", []);\n      \n      if (accounts?.length > 0) {\n        return accounts[0]\n      }\n\n  }\n\n  async getWallet() {\n    return this.provider.getSigner()\n  }\n\n  getContract(address:string)  {\n\n    //If it's cached and the same wallet just return it.\n    if (this.ethersContracts[address] && this.ethersContracts[address].signer == this.wallet) return this.ethersContracts[address]\n\n    //Initialize and return\n    let c = this.contracts[\"Channel\"]\n    this.ethersContracts[address] = new ethers.Contract(address, c.abi, this.wallet ? this.wallet : this.provider)\n\n    // console.log(`Getting contract ${name}`)\n\n    return this.ethersContracts[address]\n  }\n\n\n\n  truncateEthAddress(address) : string {\n    // Captures 0x + 4 characters, then the last 4 characters.\n    const truncateRegex = /^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/\n    const match = address.match(truncateRegex)\n    if (!match) return address\n    return `${match[1]}…${match[2]}`\n  }\n\n\n}\n\n\n\n\nexport {\n    WalletServiceImpl\n}\n\n","import { Author } from \"../dto/author.js\";\nimport { inject, injectable } from \"inversify\";\nimport { AuthorRepository } from \"../repository/author-repository.js\";\nimport { validate, ValidationError } from \"class-validator\";\nimport { ValidationException } from \"../util/validation-exception.js\";\nimport { WalletService } from \"./core/wallet-service.js\";\nimport TYPES from \"./core/types.js\";\n\n@injectable()\nclass AuthorService {\n\n  db: any\n\n  constructor(\n    private authorRepository: AuthorRepository,\n    @inject(TYPES.WalletService) private walletService: WalletService\n  ) { }\n\n  async load(channelId:string) {\n    this.db = await this.authorRepository.load(channelId)\n  }\n\n  async get(_id: string): Promise<Author> {\n    return this.authorRepository.get(_id)\n  }\n\n  async put(author: Author) {\n\n    if (!author._id) {\n      author._id = author.walletAddress\n      author.dateCreated = new Date().toJSON()\n    } else {\n      author.lastUpdated = new Date().toJSON()\n    }\n\n    //Validate\n    let errors: ValidationError[] = await validate(author, {\n      forbidUnknownValues: true,\n      whitelist: true\n    })\n\n    if (errors.length > 0) {\n      throw new ValidationException(errors)\n    }\n\n    return this.authorRepository.put(author)\n  }\n\n  async insertIfNew(walletAddress: string) {\n\n    let existing\n\n    try {\n      existing = await this.get(walletAddress)\n    } catch (ex) { }\n\n    if (!existing) {\n\n      await this.put(Object.assign(new Author(), {\n        _id: walletAddress,\n        walletAddress: walletAddress\n      }))\n\n    }\n\n\n  }\n\n  getDisplayName(author: Author): string {\n    if (!author) return\n    if (author.name) return author.name\n    return this.walletService.truncateEthAddress(author._id)\n  }\n\n  async getLatestRevision(_id:string) : Promise<Author> {\n    return this.authorRepository.getLatestRevision(_id)\n  }\n  \n\n}\n\n\nexport { AuthorService }\n\n","import { injectable } from \"inversify\"\nimport { QueryCacheRepository } from \"../../repository/query-cache-repository.js\"\nimport { QueryCache } from \"../../dto/query-cache.js\"\n\n\n\n\n@injectable()\nclass QueryCacheService {\n\n    constructor(\n        private queryCacheRepository:QueryCacheRepository\n    ) {}\n\n\n    async put(queryCache:QueryCache) {\n        \n        if (!queryCache) {\n            queryCache = new QueryCache()\n            queryCache.dateCreated = new Date().toJSON()\n        } \n\n        queryCache.lastUpdated = new Date().toJSON()\n\n        await this.queryCacheRepository.put(queryCache)\n    }\n\n    async get(queryName:string) : Promise<QueryCache> {\n        return this.queryCacheRepository.get(queryName)\n    }\n\n    async delete(_id:string) {\n        console.log(_id)\n        await this.queryCacheRepository.delete(_id)\n    }\n\n\n}\n\n\n\nfunction cacheQuery(queryName: string) {\n\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        \n        const serializeArgs = (...args: any[]) =>\n            args\n            .map((arg: any) => arg?.toString())\n            .join(':')\n\n        const originalValue = descriptor.value;\n    \n        descriptor.value = async function () { \n\n            const serializedArguments = serializeArgs(...arguments)\n\n            let queryCacheService = globalThis.container.get(QueryCacheService)\n\n            let cacheQueryName = `${queryName}_${serializedArguments}`\n\n            let cachedResult = await queryCacheService.get(cacheQueryName)\n            if (cachedResult && !cachedResult.stale) return cachedResult.result\n    \n\n            // call the original function\n            let result\n            if (Array.isArray(arguments)) {\n                result = await originalValue.apply(this, ...arguments)\n            } else {\n                result = await originalValue.apply(this, arguments)\n            }\n\n            if (!cachedResult) {\n                cachedResult = {\n                    _id: cacheQueryName\n                }\n            }\n\n            cachedResult.result = result\n            cachedResult.stale = false\n\n            await queryCacheService.put(cachedResult)\n\n            return result\n    \n        }\n    }\n}\n\n\n\n\nexport {\n    QueryCacheService, cacheQuery\n}","import { injectable } from \"inversify\"\n\n\nimport { ValidationException } from \"../util/validation-exception.js\"\nimport { validate, ValidationError } from 'class-validator'\n\nimport { OriginalMetadataRepository } from \"../repository/original-metadata-repository.js\"\nimport { OriginalMetadata } from \"../dto/original-metadata.js\"\n\nimport Hash from 'ipfs-only-hash'\n\n\n\n@injectable()\nclass OriginalMetadataService {\n\n  db: any\n\n  constructor(\n    private originalMetadataRepository: OriginalMetadataRepository\n  ) { }\n\n  async get(_id: string): Promise<OriginalMetadata> {\n    return this.originalMetadataRepository.get(_id)\n  }\n\n  async put(originalMetadata:OriginalMetadata) {\n\n    if (!originalMetadata._id) {\n      originalMetadata._id = originalMetadata.cid\n      originalMetadata.dateCreated = new Date().toJSON()\n    } \n\n    //Validate\n    let errors: ValidationError[] = await validate(originalMetadata, {\n      forbidUnknownValues: true,\n      whitelist: true\n    })\n\n    if (errors.length > 0) {\n      throw new ValidationException(errors)\n    }\n\n    await this.originalMetadataRepository.put(originalMetadata)\n  }\n\n  async delete(originalMetadata:OriginalMetadata): Promise<void> {\n    await this.originalMetadataRepository.delete(originalMetadata)\n  }\n\n  async getByIds(ids:string[]) {\n    return this.originalMetadataRepository.getByIds(ids)\n  }\n\n\n  public async newFromText(content) {\n  \n    const originalMetadata: OriginalMetadata = new OriginalMetadata()\n    originalMetadata.content = content\n\n    originalMetadata.cid = await Hash.of(originalMetadata.content)\n    \n    return originalMetadata\n\n  }\n\n\n}\n\nexport {\n  OriginalMetadataService\n}","import { injectable } from \"inversify\";\nimport { Item } from \"../dto/item.js\";\n\nimport { NFTMetadata } from \"../dto/nft-metadata.js\";\nimport { ValidationException } from \"../util/validation-exception.js\";\nimport { validate, ValidationError } from 'class-validator';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ItemRepository } from \"../repository/item-repository.js\";\n\nimport { Channel } from \"../dto/channel.js\";\nimport { ImageService } from \"./image-service.js\";\n\nimport { Image } from \"../dto/image.js\";\nimport { QueryCacheService } from \"./core/query-cache-service.js\";\nimport { QueryCache } from \"../dto/query-cache.js\";\nimport { AttributeCount, AttributeSelection } from \"../dto/attribute.js\";\nimport { OriginalMetadataService } from \"./original-metadata-service.js\";\n\n@injectable()\nclass ItemService {\n\n    constructor(\n        private itemRepository: ItemRepository,\n        private imageService:ImageService,\n        private queryCacheService:QueryCacheService,\n        private originalMetadataService:OriginalMetadataService\n    ) { }\n\n    async get(_id: string): Promise<Item> {\n        return this.itemRepository.get(_id)\n    }\n    \n    async getIds() : Promise<string[]> {\n        return this.itemRepository.getIds()\n    }\n\n    async getLatestRevision(_id:string) : Promise<Item> {\n        return this.itemRepository.getLatestRevision(_id)\n    }\n\n    async getByTokenId(channelId: string, tokenId:number) : Promise<Item> {\n        return this.itemRepository.getByTokenId(channelId, tokenId)\n    }\n\n    async put(item: Item) {\n\n        if (!item._id) {\n            \n            item._id = uuidv4()\n            item.dateCreated = new Date().toJSON()\n\n            //Get next token ID\n            if (item.tokenId == undefined) {\n                item.tokenId = await this.getNextTokenId(item.channelId)\n            }\n\n\n        } else {\n            item.lastUpdated = new Date().toJSON()\n        }\n\n        //Validate\n        let errors: ValidationError[] = await validate(item, {\n            forbidUnknownValues: true,\n            whitelist: true\n        })\n\n\n        if (errors.length > 0) {\n            throw new ValidationException(errors)\n        }\n\n        await this.itemRepository.put(item)\n\n    }\n\n    async delete(item:Item): Promise<void> {\n        await this.itemRepository.delete(item)\n    }\n\n    async getByImageId(imageId:string) : Promise<Item[]> {\n        return this.itemRepository.getByImageId(imageId)\n    }\n\n    async getByAnimationId(animationId:string) : Promise<Item[]> {\n        return this.itemRepository.getByAnimationId(animationId)\n    }\n\n    async listByChannel(channelId: string, limit: number, skip: number): Promise<Item[]> {\n        return this.itemRepository.listByChannel(channelId, limit, skip)\n    }\n\n    async exportNFTMetadata(channel:Channel, item:Item, coverImage:Image): Promise<NFTMetadata> {\n\n        //We are publishing an existing collection that we are not editing then export the original metadata\n        if (channel.forkType == \"existing\") {\n            \n            console.log(`Exporting original metadata for token #${item.tokenId}`)\n\n            let originalMetadata = await this.originalMetadataService.get(item.originalJSONMetadataId)\n            return JSON.parse(originalMetadata.content)\n        }\n\n\n\n        let result: NFTMetadata = {\n            tokenId: item.tokenId,\n            name: item.title,\n            description: item.description,\n            \n        }\n\n        if (item.animationId && !item.coverImageAsAnimation) {\n            result.animation_url = `ipfs://${item.animationId}`\n        }\n\n        if (item.coverImageId) {\n            result.image = `ipfs://${coverImage.cid}`\n        }\n\n        //Only show attributes that are valid at the category level. \n        if (channel.attributeOptions.length > 0) {\n\n            result.attributes = channel.attributeOptions.map( ao => {\n\n                //find the one selected by this item\n                let selections = item?.attributeSelections?.filter( as => ao.traitType == as.traitType)\n\n                return {\n                    trait_type: ao.traitType,\n                    value: selections?.length > 0 ? selections[0].value : '' \n                }\n\n            })\n        }\n\n        return result\n\n    }\n\n    async setDefaultCoverImage(item:Item) {\n\n        let generated = await this.imageService.newFromItem(item)\n\n        //Save it if it doesn't exist\n        let existing = await this.get(generated.cid)\n\n        if (existing) {\n\n            item.coverImageId = existing._id\n\n        } else {\n\n            await this.imageService.put(generated)\n            item.coverImageId = generated._id\n            \n        }\n    }\n\n    async getNextTokenId(channelId:string) {\n\n        let queryCache:QueryCache\n\n        try {\n            queryCache = await this.queryCacheService.get(`token_id_stats_by_channel_${channelId}`)\n\n            let tokenIdStats = queryCache?.result\n            return tokenIdStats?.max ? tokenIdStats.max + 1 : 1\n\n        } catch(ex) {}\n\n        //If we had problems just return 1\n        return 1\n\n    }\n\n    async getAttributeCountByChannel(channelId:string) : Promise<AttributeCount[]> {\n        return this.itemRepository.getAttributeCountByChannel(channelId)\n    }\n\n    async getAttributeInfoBySelections(channelId:string, attributeSelections:AttributeSelection[]) : Promise<AttributeCount[]> {\n        return this.itemRepository.getAttributeInfoBySelections(channelId, attributeSelections)\n    }\n\n\n}\n\nexport {\n    ItemService\n}","import {  injectable } from \"inversify\";\nimport { validate, ValidationError } from \"class-validator\";\nimport { ValidationException } from \"../util/validation-exception.js\";\n\nimport { AttributeCountRepository } from \"../repository/attribute-count-repository.js\";\nimport { AttributeCount } from \"../dto/attribute.js\";\n\n@injectable()\nclass AttributeCountService {\n\n  db: any\n\n  constructor(\n    private attributeCountRepository: AttributeCountRepository,\n  ) { }\n\n  async get(_id: string): Promise<AttributeCount> {\n    return this.attributeCountRepository.get(_id)\n  }\n\n  async put(attributeCount: AttributeCount) {\n\n    if (!attributeCount._id) {\n      attributeCount._id = `${attributeCount.channelId}-${attributeCount.traitType}-${attributeCount.value}`\n      attributeCount.dateCreated = new Date().toJSON()\n    } else {\n      attributeCount.lastUpdated = new Date().toJSON()\n    }\n\n    //Validate\n    let errors: ValidationError[] = await validate(attributeCount, {\n      forbidUnknownValues: true,\n      whitelist: true\n    })\n\n    if (errors.length > 0) {\n      throw new ValidationException(errors)\n    }\n\n    await this.attributeCountRepository.put(attributeCount)\n  }\n\n\n\n\n}\n\n\nexport { AttributeCountService }\n\n","import { inject, injectable } from \"inversify\"\nimport { validate, ValidationError } from 'class-validator';\nimport { Channel } from \"../dto/channel.js\"\n\nimport { ValidationException } from \"../util/validation-exception.js\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ContractMetadata } from \"../dto/contract-metadata.js\";\nimport { ImageService } from \"./image-service.js\";\nimport { Image } from \"../dto/image.js\";\nimport { ItemService } from \"./item-service.js\";\n\nimport { ChannelRepository } from \"../repository/channel-repository.js\";\n\nimport { QuillService } from \"./quill-service.js\";\n\nimport { QueryCacheService } from \"./core/query-cache-service.js\";\nimport { QueryCache } from \"../dto/query-cache.js\";\nimport { AttributeCount } from \"../dto/attribute.js\";\nimport { AttributeCountService } from \"./attribute-count-service.js\";\nimport { SchemaService } from \"./core/schema-service.js\";\nimport { Settings } from \"../dto/settings.js\";\nimport { WalletService } from \"./core/wallet-service.js\";\nimport TYPES from \"./core/types.js\";\n\n@injectable()\nclass ChannelService {\n\n  constructor(\n    private channelRepository:ChannelRepository,\n    private imageService:ImageService,\n    private itemService:ItemService,\n    private quillService:QuillService,\n    private schemaService:SchemaService,\n    private queryCacheService:QueryCacheService,\n    private attributeCountService:AttributeCountService,\n    @inject(TYPES.WalletService) private walletService: WalletService,\n\n\n  ) { }\n\n  async get(_id:string): Promise<Channel> {\n    return this.channelRepository.get(_id)\n  }\n\n  async getLatestRevision(_id:string) : Promise<Channel> {\n    return this.channelRepository.getLatestRevision(_id)\n  }\n\n  async put(channel: Channel) {\n    \n    if (!channel._id) {\n      channel._id = uuidv4()\n      channel.dateCreated = new Date().toJSON()\n    } else {\n      channel.lastUpdated = new Date().toJSON()\n    }\n    \n    if (channel.description) {\n\n      //Translate description content\n      channel.descriptionHTML = await this.quillService.translateContent(channel.description)\n\n      //Generate markdown\n      channel.descriptionMarkdown = await this.quillService.generateMarkdown(channel.description)\n\n    }\n\n    if (channel.license) {\n\n      //Translate description content\n      channel.licenseHTML = await this.quillService.translateContent(channel.license)\n\n      //Generate markdown\n      channel.licenseMarkdown = await this.quillService.generateMarkdown(channel.license)\n\n    }\n\n    \n    //Validate\n    let errors:ValidationError[] = await validate(channel, {\n      forbidUnknownValues: true,\n      whitelist: true\n    })\n    \n    if (errors.length > 0) {\n      throw new ValidationException(errors)\n    }\n\n    return this.channelRepository.put(channel)\n\n  }\n\n  async list(limit: number, skip:number): Promise<Channel[]> {\n    \n    return this.channelRepository.list(limit, skip)\n\n  }\n\n  async delete(channel:Channel): Promise<void> {\n    await this.schemaService.dropChannel(channel._id)\n    await this.channelRepository.delete(channel)\n  }\n\n  async countItemsByChannel(channelId:string) : Promise<number> {\n\n    let queryCache:QueryCache\n\n    try {\n      queryCache = await this.queryCacheService.get(`token_id_stats_by_channel_${channelId}`)\n    } catch(ex) {}\n\n    let tokenIdStats = queryCache?.result\n    \n    return tokenIdStats?.count ? tokenIdStats.count : 0\n  }\n\n  async exportContractMetadata(channel:Channel, ownerAddress:string) : Promise<ContractMetadata> {\n\n    let result:ContractMetadata = {\n      name: channel.title,\n      description: channel.descriptionMarkdown,\n      external_link: channel.link,\n      seller_fee_basis_points: 0, //TODO: Setting this to anything other than zero ruins OpenSea. Investigate.\n      fee_recipient:ownerAddress,\n      license: channel.license\n    }\n\n    if (channel.coverImageId) {\n      let coverImage:Image = await this.imageService.get(channel.coverImageId)\n      result.image = `ipfs://${coverImage.cid}`\n    }\n\n    return result\n\n  }\n\n  async buildAttributeCounts(channelId:string) {\n\n    let attributeCounts:AttributeCount[] = await this.itemService.getAttributeCountByChannel(channelId)\n\n    for (let attributeCount of attributeCounts) {\n\n      let ac \n\n      let attributeCountId = `${channelId}-${attributeCount.traitType}-${attributeCount.value}`\n\n      try {\n        ac = await this.attributeCountService.get(attributeCountId)\n      } catch(ex) {}\n\n      if (!ac) {\n        ac = new AttributeCount()\n      } \n      \n      // console.log(ac)\n\n      await this.attributeCountService.put(Object.assign(ac, attributeCount))\n    }\n\n\n  }\n\n  async getGitProviderCredentials(channel:Channel, settings:Settings) {\n\n    //If it's \"default\" or blank then look at the global default\n    if (!channel.gitProvider || channel.gitProvider == \"default\") {\n\n      if (settings.defaultGitProvider) {\n\n        return settings.gitProviders[settings.defaultGitProvider]\n\n      } else {\n\n        if (settings.gitProviders && settings.gitProviders['github']) {\n          return settings.gitProviders['github']\n        }\n        \n      }\n      \n    }\n\n    //Check if the channel has a specific one set.\n    if (channel.gitProvider) {\n      return settings.gitProviders[channel.gitProvider]\n    }\n\n  }\n\n  async getChannelContract(channel:Channel) : Promise<ChannelContract> {\n\n      if (!channel.contractAddress) return\n\n      let contract:ChannelContract = await this.walletService.getContract(channel.contractAddress)\n      return contract\n  }\n\n\n}\n\ninterface ChannelContract {\n  mint(quantity:number, options:any)\n  mintFromStartOrFail(quantity:number, start:number,options:any)\n  ownerOf(tokenId:number) : string\n  tokenURI(tokenId:number) : string\n  balanceOf(address) : string\n  totalMinted() : BigInt\n  totalSupply() : BigInt\n  owner() : string\n  update(ipfsCid:string, mintFee:BigInt, maxTokenId:BigInt): void\n  address:string\n  on(filter, listener)\n  queryFilter(event, fromBlock, toBlock)\n}\n\n\nexport {\n  ChannelService, ChannelContract\n}\n","import { inject, injectable } from \"inversify\"\nimport { SettingsService } from \"./settings-service.js\"\n\nimport { fixedSize } from 'ipfs-unixfs-importer/chunker'\nimport { balanced } from 'ipfs-unixfs-importer/layout'\nimport { CID, CarWriter } from '@ipld/car/writer'\nimport { MFS, mfs } from \"@helia/mfs\"\nimport { car } from '@helia/car'\n\n@injectable()\nclass IpfsService {\n\n  @inject(SettingsService)\n  private settingsService:SettingsService\n\n  public peerCount:number=0\n  public addresses\n\n  public ipfs\n\n  private _helia\n  private _mfs:MFS\n  private _car\n  \n  initializing=false\n\n  private mfsOptions = {\n      // these are the default kubo options\n      cidVersion: 0,\n      rawLeaves: false,\n      layout: balanced({\n        maxChildrenPerNode: 174\n      }),\n      chunker: fixedSize({\n        chunkSize: 262144\n      }),\n  }\n\n\n  constructor(\n    @inject('ipfsRemoteInit') private ipfsRemoteInit,\n    @inject('helia') private helia:Function,\n  ) {}\n\n\n\n\n  async init() {\n\n    if (this.ipfs || this.initializing) return\n    \n    this.initializing = true\n    \n    let settings\n\n    try {\n      settings = await this.settingsService.get()\n    } catch(ex) {}\n\n    console.time('Init IPFS')\n\n    this.ipfs = await this.ipfsRemoteInit(settings?.ipfsHost ? settings.ipfsHost : '/ip4/127.0.0.1/tcp/5001')\n\n    console.timeEnd('Init IPFS')\n\n    this.initializing = false\n\n  }\n\n  async initLocal() {\n\n    if (this._helia) return\n\n    this.initializing = true\n\n    console.time('Init IPFS')\n\n    this._helia = await this.helia()\n    this._mfs = mfs(this._helia)\n    this._car = car(this._helia)\n\n    this.initializing = false\n\n    console.timeEnd('Init IPFS')\n  }\n\n  async destroyLocal() {\n\n    console.time('Destroy IPFS')\n\n    await this._helia.stop()\n\n    console.timeEnd('Destroy IPFS')\n\n  }\n  \n  async clearInit() {\n\n    delete this.ipfs \n    this.initializing = false\n\n  }\n\n  async updateInfo() {\n\n    let id = await this.ipfs.id()\n\n    let peers = await this.ipfs.swarm.peers()\n\n    this.peerCount = peers.length\n    this.addresses = id?.addresses?.map( a => a.toString())\n\n    const updatePeerCountEvent = new CustomEvent('update-peers', {\n      detail: { \n        addresses: this.addresses,\n        peers: peers.map(p => p.addr.toString()),\n        count: this.peerCount \n      }\n    })\n\n    document.dispatchEvent(updatePeerCountEvent)\n    \n    console.log(`IPFS has ${this.peerCount} peers.`)\n  }\n\n  async filesRm(path:string, options?:any) {\n    return this.ipfs.files.rm(path, options)\n  }\n\n  async filesCp(fromPath:string, toPath:string, options?:any) {\n    return this.ipfs.files.cp(fromPath, toPath, options)\n  }\n\n  async filesRead(path:string) {\n    return this.ipfs.files.read(path)\n  }\n\n  async filesWrite(path:string, content:any, options?:any) {\n    return this.ipfs.files.write(path, content, options)\n  }\n\n  async filesFlush(path:string) {\n    return this.ipfs.files.flush(path)\n  }\n\n  async add(content:any) {\n    return this.ipfs.add(content)\n  }\n\n  async stat(ipfsFilename:string, options?:any) {\n    return this.ipfs.files.stat(ipfsFilename, options)\n  }\n\n\n  async heliaRm(path:string, options?:any) {\n    return this._mfs.rm(path, options)\n  }\n\n  async heliaCp(fromPath:string, toPath:string, options?:any) {\n    return this.ipfs.files.cp(fromPath, toPath, Object.assign(this.mfsOptions, options))\n  }\n\n  async heliaRead(path:string) {\n    return this.ipfs.files.read(path)\n  }\n\n  async heliaWrite(path:string, content:any, options?:any) {\n    return this.ipfs.files.write(path, content, Object.assign(this.mfsOptions, options))\n  }\n\n  async heliaFlush(path:string) {\n    return this.ipfs.files.flush(path)\n  }\n\n  async heliaAdd(content:Uint8Array, path:string, options?:any) : Promise<CID> {\n\n    await this._mfs.writeBytes(content, path, Object.assign(this.mfsOptions, options))\n\n    let stat = await this._mfs.stat(path)\n\n    return stat.cid\n\n  }\n\n  async heliaMkDir(path:string, options?:any) {\n    return this._mfs.mkdir(path, Object.assign(this.mfsOptions, options))\n  }\n\n  async heliaStat(path:string, options?:any) {\n    return this._mfs.stat(path, Object.assign(this.mfsOptions, options))\n  }\n\n  async createCAR(rootCID:CID) {\n\n    console.log(\"Creating CAR file export...\")\n\n    return CarWriter.create(rootCID)\n    \n  }\n\n  async exportCAR(rootCID:CID, writer) {\n    return this._car.export(rootCID, writer)\n  }\n\n  /**\n  *\n  * @param {AsyncIterable<Uint8Array>} carReaderIterable\n  * @returns {Promise<Blob>}\n  */\n  async carWriterOutToBlob (carReaderIterable) {\n    const parts = []\n    for await (const part of carReaderIterable) {\n      parts.push(part)\n    }\n    return new Blob(parts, { type: 'application/car' })\n  }\n\n  \n}\n\n\n\nexport {\n  IpfsService\n}","import { injectable } from \"inversify\"\nimport { Animation } from \"../dto/animation.js\"\n\nimport { ValidationException } from \"../util/validation-exception.js\"\nimport { validate, ValidationError } from 'class-validator'\nimport { AnimationRepository } from \"../repository/animation-repository.js\"\nimport { Item } from \"../dto/item.js\"\n\nimport { ImageService } from \"./image-service.js\"\nimport { QuillService } from \"./quill-service.js\"\nimport { ThemeService } from \"./theme-service.js\"\nimport { Theme } from \"../dto/theme.js\"\n\nimport Hash from 'ipfs-only-hash'\n\n\nconst { forEach: each } = Array.prototype;\n\n\nimport juice from \"juice\"\n\n\n@injectable()\nclass AnimationService {\n\n  db: any\n\n  constructor(\n    private animationRepository: AnimationRepository,\n    private quillService: QuillService,\n    private imageService:ImageService,\n    private themeService:ThemeService\n\n  ) { }\n\n  async get(_id: string): Promise<Animation> {\n    return this.animationRepository.get(_id)\n  }\n\n  async put(animation: Animation) {\n\n    if (!animation._id) {\n      animation._id = animation.cid\n      animation.dateCreated = new Date().toJSON()\n    } \n\n    //Validate\n    let errors: ValidationError[] = await validate(animation, {\n      forbidUnknownValues: true,\n      whitelist: true\n    })\n\n    if (errors.length > 0) {\n      throw new ValidationException(errors)\n    }\n\n    await this.animationRepository.put(animation)\n  }\n\n  async delete(animation:Animation): Promise<void> {\n    await this.animationRepository.delete(animation)\n  }\n\n  public async newFromText(content) {\n  \n    const animation: Animation = new Animation()\n    animation.content = content\n    \n    animation.cid = await Hash.of(animation.content)\n\n\n    return animation\n\n  }\n\n  public async buildAnimationPage(item:Item) :Promise<string> {\n\n    let result\n\n    let content = await this.quillService.translateContent(item.content)\n\n    let themes:Theme[] = []\n\n    if (item.themes) {\n\n      for (let theme of item.themes) {\n        themes.push(await this.themeService.get(theme))\n      } //might not exist because it got deleted.\n\n    }\n\n    let allThemeCss = \"\"\n\n    if (themes?.length > 0) {\n      for (let theme of themes) {\n        if (theme.animationCSS?.length > 0) allThemeCss += theme.animationCSS\n      }\n    }\n\n    // console.log(`Theme CSS: ${allThemeCss}`)\n    // console.log(`Individual CSS: ${item.animationCSS}`)\n\n\n  \n    if (item.coverImageAsAnimation) {\n\n      let image = await this.imageService.get(item.coverImageId)\n\n      let imageSrc = await this.imageService.getUrl(image)\n\n      result = this.getFullImageTemplate(imageSrc, item.animationCSS, allThemeCss)\n\n    } else {\n\n      result = this.getAnimationTemplate(item, content, item.animationCSS, allThemeCss)\n    }\n\n    return juice(result)\n\n  }\n\n  \n\n\n\n\n  getFullImageTemplate(imageSrc:string, individualCss?:string, themeCss?:string) {\n    return `<!DOCTYPE html>\n    <html>\n      <head>\n        <style>\n        \n          body { \n            height: 100%; \n            width: 100%;\n            margin: 0;\n            padding: 0;\n\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            overflow: hidden\n          }\n\n          img {\n            flex-shrink: 0;\n            min-width: 100%;\n            width: 100%;\n            height: 100%;\n            min-height: 100%\n            object-fit: cover;\n          }\n\n          ${themeCss ? themeCss : ''}\n          ${individualCss ? individualCss : ''}\n\n        </style>\n      </head>\n\n      <body>\n        <img src=\"${imageSrc}\" />\n      </body>\n    </html>`\n  }\n\n\n  getAnimationTemplate(item:Item, content:string, individualCss?:string, themeCss?:string) {\n    return `<!DOCTYPE html>\n        <html>\n        \n          <head>\n              <meta charset=\"utf-8\">\n              <title>${item.title}</title>\n\n              <style>\n\n                html {\n                    height:100%;\n                } \n\n                body {\n                      padding: 0;\n                      margin: 0;\n                      box-sizing: border-box;\n                      height: 100%;\n                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n                }\n\n                .animation-container {\n                  box-sizing: border-box;\n                  padding: 20px;\n                  width:100%;\n                  min-height: 100%;\n                  \n                  background: rgb(241,241,241);\n                  background: linear-gradient(-45deg, rgba(241,241,241,1) 13%, rgba(239,243,248,1) 37%, rgba(176,209,220,0.927608543417367) 69%, rgba(255,255,255,1) 100%);\n\n                  font-size: 20px;\n                  border: 5px solid #4e82b1;\n                  float: left;\n                }\n\n                img { \n                  max-width: 100%;\n                  border: 1px solid #cccccc;\n                  object-fit: cover;\n                }\n\n                .token-id {\n                  color: rgb(79, 79, 79);\n                  font-weight: bold;\n                }\n\n                h4 { \n                  margin-top: 0px; \n                  font-size: 25px;\n                  margin-bottom: 0px;\n                }\n\n                ${themeCss ? themeCss : ''}\n                ${individualCss ? individualCss : ''}\n\n\n              </style>\n\n          </head>\n\n          <body>\n\n            <div class=\"animation-container\">\n              <h4><b>${item.title ? item.title : ''} <span class=\"token-id\">#${item.tokenId}</span></b></h4>\n              ${content}\n            </div>\n\n          </body>\n        </html>`\n  }\n\n\n  async getByIds(ids:string[]) {\n    return this.animationRepository.getByIds(ids)\n  }\n\n}\n\nexport {\n  AnimationService\n}","import { StaticPage } from \"../dto/static-page.js\";\nimport { inject, injectable } from \"inversify\";\nimport { validate, ValidationError } from \"class-validator\";\nimport { ValidationException } from \"../util/validation-exception.js\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { StaticPageRepository } from \"../repository/static-page-repository.js\";\nimport { QuillService } from \"./quill-service.js\";\n\n@injectable()\nclass StaticPageService {\n\n  db: any\n\n  constructor(\n    private staticPageRepository: StaticPageRepository,\n    private quillService:QuillService\n  ) { }\n\n  async get(_id: string): Promise<StaticPage> {\n    return this.staticPageRepository.get(_id)\n  }\n\n  async getIds() : Promise<string[]> {\n    return this.staticPageRepository.getIds()\n  }\n\n  async getLatestRevision(_id:string) : Promise<StaticPage> {\n    return this.staticPageRepository.getLatestRevision(_id)\n  }\n\n\n  async put(staticPage: StaticPage) {\n\n    if (!staticPage._id) {\n      staticPage._id = uuidv4()\n      staticPage.dateCreated = new Date().toJSON()\n    } else {\n      staticPage.lastUpdated = new Date().toJSON()\n    }\n\n    if (staticPage.content) {\n\n      //Translate description content\n      staticPage.contentHTML = await this.quillService.translateContent(staticPage.content)\n\n      //Generate markdown\n      staticPage.contentMarkdown = await this.quillService.generateMarkdown(staticPage.content)\n\n    }\n\n    //Generate slug\n    if (staticPage.name) {\n      staticPage.slug = this.slugify(staticPage.name)\n    }\n\n\n    //Validate\n    let errors: ValidationError[] = await validate(staticPage, {\n      forbidUnknownValues: true,\n      whitelist: true\n    })\n\n    if (errors.length > 0) {\n      throw new ValidationException(errors)\n    }\n\n    await this.staticPageRepository.put(staticPage)\n  }\n\n  async delete(staticPage: StaticPage) {\n    return this.staticPageRepository.delete(staticPage)\n  }\n\n\n  async listByChannel(channelId: string, limit: number, skip: number): Promise<StaticPage[]> {\n    return this.staticPageRepository.listByChannel(channelId, limit, skip)\n  }\n\n  slugify( text ) {\n    return text\n    .toString()\n    .normalize( 'NFD' )                   // split an accented letter in the base letter and the acent\n    .replace( /[\\u0300-\\u036f]/g, '' )   // remove all previously split accents\n    .toLowerCase()\n    .trim()\n    .replace(/\\s+/g, '-')\n    .replace(/[^\\w\\-]+/g, '')\n    .replace(/\\-\\-+/g, '-');\n  }\n\n}\n\n\nexport { StaticPageService }\n\n","import { injectable } from \"inversify\"\n\nimport { Author } from \"../../dto/author.js\"\nimport { Channel } from \"../../dto/channel.js\"\nimport { ExportBundle, BackupBundle } from \"../../dto/export-bundle.js\"\nimport { Item } from \"../../dto/item.js\"\nimport { StaticPage } from \"../../dto/static-page.js\"\nimport { Theme } from \"../../dto/theme.js\"\n\nimport { ItemService } from \"../../service/item-service.js\"\nimport { AuthorService } from \"../../service/author-service.js\"\nimport { ThemeService } from \"../../service/theme-service.js\"\nimport { StaticPageService } from \"../../service/static-page-service.js\"\nimport { ImageService } from \"../../service/image-service.js\"\nimport { AnimationService } from \"../../service/animation-service.js\"\nimport { OriginalMetadataService } from \"../original-metadata-service.js\"\n\n@injectable()\nclass ExportService {\n\n    constructor(\n        private itemService:ItemService,\n        private authorService:AuthorService,\n        private themeService:ThemeService,\n        private imageService:ImageService,\n        private animationService:AnimationService,\n        private originalMetadataService:OriginalMetadataService,\n        private staticPageService:StaticPageService\n    ) {}\n    \n    async prepareExport(originalChannel: Channel, ownerAddress:string) : Promise<ExportBundle> {\n        \n        //Clone\n        let channel = await this.getExportChannel(originalChannel)\n        \n        //Get author\n        let author = await this.getExportAuthor(originalChannel.authorId)\n\n        let items = await this.itemService.listByChannel(originalChannel._id, 100000, 0)\n\n        //Assign  \n        let imageCids:string[] = []\n        let animationCids:string[] = []\n        \n        //Add cover image\n        if (channel.coverImageId?.length > 0) {\n            imageCids.push(channel.coverImageId)\n        }\n\n        //Add banner image\n        if (channel.coverBannerId?.length > 0) {\n            imageCids.push(channel.coverBannerId)\n        }\n\n        //Add author image\n        if (author?.coverPhotoId?.length > 0) {\n            imageCids.push(author.coverPhotoId)\n        }\n\n        //Gather NFT data\n        for (let item of items) {\n\n            //Build animation URL if we have content\n            if (item.animationId && !item.coverImageAsAnimation) {\n                animationCids.push(item.animationId)\n            }\n\n            imageCids.push(...this.getImageCidsByItem(item))\n\n        }\n\n        //Look up all the images\n        imageCids = [...new Set(imageCids)] //deduplicate\n        animationCids = [...new Set(animationCids)] //deduplicate\n\n        return {\n\n            animationCids: animationCids,\n            imageCids: imageCids,\n\n            channel: channel,\n            author: author,\n\n            items: items,\n            themeIds: await this.themeService.getIds(),\n            staticPageIds: await this.staticPageService.getIds(),\n\n            ownerAddress: ownerAddress\n        }\n\n    }\n\n    async createBackup(exportBundle: ExportBundle) : Promise<BackupBundle> {\n\n        let author: Author = exportBundle.author\n\n        let channel: Channel = this.getBackupChannel(exportBundle.channel, exportBundle.items.length)\n\n        let authors = []\n\n        if (author) {\n            authors.push(author)\n        }\n\n        let items = await this.getBackupItems(exportBundle.items)\n        let themes = await this.getBackupThemes(exportBundle.themeIds)\n        let staticPages = await this.getBackupStaticPages(exportBundle.staticPageIds)\n        let images = await this.getBackupImages(exportBundle.imageCids)\n        let animations = await this.getBackupAnimations(exportBundle.animationCids)\n        let originalMetadata = await this.getBackupOriginalMetadata(exportBundle.items.filter(i => i.originalJSONMetadataId != undefined).map( i => i.originalJSONMetadataId))\n\n\n        //Save pouch dbs\n        return {\n            channels: [channel],\n            authors: authors,\n\n            items: items,\n            themes: themes,\n            staticPages: staticPages,\n            images: images,\n            animations: animations,\n            originalMetadata: originalMetadata,\n\n            itemCount: exportBundle.items.length,\n            themeCount: exportBundle.themeIds.length,\n            staticPageCount: exportBundle.staticPageIds.length,\n            imageCount: exportBundle.imageCids.length,\n            animationCount: exportBundle.animationCids.length\n            \n        }\n\n    }\n\n    getImageCidsByItem(item:Item) {\n\n        let imageCids:string[] = []\n\n        //Add cover image\n        if (item.coverImageId?.length > 0) {\n            imageCids.push(item.coverImageId)\n        } \n\n        //Get images in post content\n        if (item.content?.ops) {\n            for (let op of item.content.ops) {\n                if (op.insert && op.insert.ipfsimage && op.insert.ipfsimage?.cid?.length > 0) {\n                    imageCids.push(op.insert.ipfsimage.cid)\n                }\n            }\n        }\n\n        return imageCids\n    }\n\n    getImageCidsByStaticPage(staticPage:StaticPage) {\n\n        let imageCids:string[] = []\n\n        //Get images in post content\n        if (staticPage.content?.ops) {\n            for (let op of staticPage.content.ops) {\n                if (op.insert && op.insert.ipfsimage && op.insert.ipfsimage?.cid?.length > 0) {\n                    imageCids.push(op.insert.ipfsimage.cid)\n                }\n            }\n        }\n\n        return imageCids\n    }\n\n    private async getExportChannel(originalChannel: Channel) : Promise<Channel> {\n\n        let channel = JSON.parse(JSON.stringify(originalChannel))\n\n        //Remove publishing related field from channel\n        delete channel.contractAddress\n        delete channel.pinJobId\n        delete channel.pinJobStatus\n        delete channel.pubDate\n        delete channel.publishReaderRepoId\n        delete channel.publishReaderRepoPath\n        delete channel.publishReaderRepoBranch\n        delete channel.publishReaderRepoStatus\n        delete channel.publishReaderIPFSStatus\n\n        delete channel.productionHostname\n        delete channel.productionBaseLibraryURI\n        delete channel.productionBaseURI\n        delete channel.showMintPage\n        delete channel.showActivityPage\n        delete channel.marketplaces\n        delete channel.externalLinks\n\n        delete channel.importSuccess\n        delete channel.lastUpdated\n        delete channel._rev\n        delete channel[\"_rev_tree\"]\n\n        return channel\n\n    }\n\n    private async getExportAuthor(authorId:string) : Promise<Author> {\n\n        let author:Author\n\n        try {\n            author = await this.authorService.get(authorId)\n        } catch(ex) {}\n\n\n        if (author) {\n            author = JSON.parse(JSON.stringify(author))\n\n            delete author._rev\n            delete author.lastUpdated\n            delete author[\"_rev_tree\"]\n\n        }\n\n        return author\n    }\n\n    private prepareTheme(theme:Theme) : Theme {\n\n        delete theme._rev\n        delete theme[\"_rev_tree\"]\n\n        return JSON.parse(JSON.stringify(theme))\n\n    }\n\n    private prepareStaticPage(staticPage:StaticPage) : StaticPage {\n\n        delete staticPage._rev\n        delete staticPage[\"_rev_tree\"]\n\n        return JSON.parse(JSON.stringify(staticPage))\n\n    }\n\n    public prepareItem(item:Item) : Item {\n\n        //Delete publishing related fields\n        delete item._rev\n        delete item.lastUpdated\n        delete item[\"_rev_tree\"]\n\n        return JSON.parse(JSON.stringify(item))\n\n    }\n\n    private getBackupChannel(exportChannel:Channel, itemCount:number) : Channel {\n\n        let channel: Channel = JSON.parse( JSON.stringify(exportChannel) )\n\n        //If we're exporting an existing collection delete the \"forkedBy\" fields\n        if (channel.forkType == \"existing\") {\n            delete channel.forkType\n            delete channel.forkedFromCid\n            delete channel.forkedFromFeeRecipient\n            delete channel.forkedFromId\n        }\n\n        //Add itemCount to channel\n        channel['itemCount'] = itemCount\n\n        return channel\n\n    }\n\n    private async getBackupThemes(themeIds:string[]) {\n        \n        let themes = []\n\n        for (let themeId of themeIds) {\n            themes.push(this.prepareTheme(await this.themeService.get(themeId)))\n        }\n\n        return themes\n\n    }\n\n    private async getBackupStaticPages(staticPageIds:string[]) {\n        \n        let staticPages = []\n\n        for (let staticPageId of staticPageIds) {\n            staticPages.push(this.prepareStaticPage(await this.staticPageService.get(staticPageId)))\n        }\n\n        return staticPages\n\n    }\n\n    private async getBackupItems(theItems:Item[]) {\n        \n        let items = []\n\n        let counter = 0\n\n        for (let theItem of theItems) {\n\n            let item = this.prepareItem(theItem)\n\n            //Remove the image src data from the content. Will restore from local copy when importing.\n            //Reduce backup filesize\n            if (item.content?.ops?.length > 0) {\n\n                let ops = []\n\n                for (let op of item.content.ops) {\n\n                    if (op.insert && op.insert.ipfsimage) {\n                        delete op.insert.ipfsimage.src\n                    }\n\n                    ops.push(op)\n                }\n\n                item.content.ops = ops\n\n            }\n            \n            items.push(item)\n\n            counter++\n\n            console.log(`Processing token #${item.tokenId} ${counter}/${theItems.length}`)\n\n\n\n        }\n\n        console.log(`Tokens processed`)\n\n\n        return items\n\n    }\n\n    private async getBackupImages(imageIds:string[]) {\n        \n        let images = []\n\n        let counter = 0\n\n        for (let imageId of imageIds) {\n\n            let image = await this.imageService.get(imageId)\n\n            let clonedImage = JSON.parse( JSON.stringify(image) )\n\n            //Remove publishing related field from image\n            delete clonedImage._rev\n            delete clonedImage[\"_rev_tree\"]\n            delete clonedImage.buffer\n            delete clonedImage.svg\n\n            images.push(clonedImage)\n\n            counter++\n\n            console.log(`Processing image #${clonedImage._id} ${counter}/${imageIds.length}`)\n\n\n        }\n\n        console.log(`Images processed`)\n\n\n        return images\n\n    }\n\n    private async getBackupAnimations(animationIds:string[]) {\n        \n        let animations=[]\n\n        let counter = 0\n        \n        for (let animationId of animationIds) {\n\n            let animation = await this.animationService.get(animationId)\n\n            let clonedAnimation = JSON.parse( JSON.stringify(animation) )\n\n            //Remove publishing related field from image\n            delete clonedAnimation._rev\n            delete clonedAnimation[\"_rev_tree\"]\n            delete clonedAnimation.content\n\n            animations.push(clonedAnimation)\n\n            counter++\n\n            console.log(`Processing animation #${clonedAnimation._id} ${counter}/${animationIds.length}`)\n\n        }\n\n        console.log(`Animations processed`)\n\n\n        return animations\n\n    }\n\n    private async getBackupOriginalMetadata(originalMetadataIds:string[]) {\n\n        let originalMetadatas=[]\n\n        let counter = 0\n        \n        for (let originalMetadataId of originalMetadataIds) {\n\n            let originalMetadata = await this.originalMetadataService.get(originalMetadataId)\n\n            let clonedMetadata = JSON.parse( JSON.stringify(originalMetadata) )\n\n            //Remove publishing related field from\n            delete clonedMetadata._rev\n            delete clonedMetadata[\"_rev_tree\"]\n\n            originalMetadatas.push(clonedMetadata)\n\n            counter++\n\n            console.log(`Processing original metadata #${clonedMetadata._id} ${counter}/${originalMetadataIds.length}`)\n\n        }\n\n        console.log(`Original metadata processed`)\n\n\n        return originalMetadatas\n\n    }\n\n}\n\nexport {\n    ExportService\n}","import { inject, injectable } from \"inversify\";\n\n\nimport he from 'he'\n\nimport { Author } from \"../../dto/author.js\";\nimport { Channel } from \"../../dto/channel.js\";\nimport { Image } from \"../../dto/image.js\";\nimport { Item } from \"../../dto/item.js\";\nimport { AttributeSelectionViewModel } from \"../../dto/viewmodel/attribute-selection-view-model.js\";\nimport { ImageViewModel } from \"../../dto/viewmodel/image-view-model.js\";\n\nimport { ItemViewModel } from \"../../dto/viewmodel/item-view-model.js\";\nimport { AuthorService } from \"../author-service.js\";\nimport { ChannelService } from \"../channel-service.js\";\nimport { ImageService } from \"../image-service.js\";\nimport { ItemService } from \"../item-service.js\";\nimport { AnimationService } from \"../animation-service.js\";\nimport { Animation } from \"../../dto/animation.js\";\nimport { AnimationViewModel } from \"../../dto/viewmodel/animation-view-model.js\";\nimport { QuillService } from \"../quill-service.js\";\nimport { ThemeService } from \"../theme-service.js\";\nimport { Theme } from \"../../dto/theme.js\";\nimport { ItemListViewModel } from \"../../dto/viewmodel/item-list-view-model.js\";\nimport { AggregateStats } from \"../../dto/aggregate-stats.js\";\nimport { QueryCacheService } from \"../../service/core/query-cache-service.js\";\nimport { QueryCache } from \"../../dto/query-cache.js\";\nimport { AttributeCountService } from \"../../service/attribute-count-service.js\";\nimport { AttributeCount } from \"../../dto/attribute.js\";\nimport { ExportService } from \"../core/export-service.js\";\nimport { IpfsService } from \"../core/ipfs-service.js\";\n\nimport { DOMParser, XMLSerializer } from '@xmldom/xmldom'\n\n// const { DOMParser, XMLSerializer } = require('@xmldom/xmldom')\nconst parser = new DOMParser()\n\n@injectable()\nclass ItemWebService {\n\n    constructor(\n        private itemService: ItemService,\n        private channelService: ChannelService,\n        private imageService: ImageService,\n        private authorService: AuthorService,\n        private animationService:AnimationService,\n        private quillService:QuillService,\n        private themeService:ThemeService,\n        private queryCacheService:QueryCacheService,\n        private exportService:ExportService,\n        private ipfsService:IpfsService,\n        private attributeCountService:AttributeCountService,\n        @inject(\"dayjs\") private dayjs\n\n    ) { }\n\n    async get(_id: string): Promise<ItemViewModel> {\n\n        let item:Item = await this.itemService.get(_id)\n\n        //Get channel\n        const channel:Channel = await this.channelService.get(item.channelId)\n\n        let queryCache:QueryCache = await this.queryCacheService.get(`token_id_stats_by_channel_${item.channelId}`)\n        \n        let tokenIdStats = queryCache.result\n\n        return this.getViewModel(item, channel, tokenIdStats)\n    }\n\n    async getNavigation(channelId:string, tokenId: number): Promise<ItemViewModel> {\n\n        let item:Item = await this.itemService.getByTokenId(channelId, tokenId)\n\n        //Get channel\n        const channel:Channel = await this.channelService.get(item.channelId)\n\n        return this.getNavigationViewModel(item, channel)\n    }\n\n    async getViewModel(item: Item, channel:Channel, tokenIdStats:AggregateStats): Promise<ItemViewModel> {\n\n        // console.time('Get viewmodel')\n\n        let animation:AnimationViewModel\n        let coverImage: ImageViewModel\n        let authorPhoto:ImageViewModel\n\n        let animationContentHTML\n\n\n        let attributeSelections:AttributeSelectionViewModel[] = []\n\n        let author: Author\n\n        let editable = !channel.contractAddress\n\n\n        // console.time('Get image')\n\n        if (item.coverImageId) {\n\n            try {\n                let image:Image = await this.imageService.get(item.coverImageId)\n\n                coverImage = {\n                    cid: image.cid,\n                    url: await this.imageService.getUrl(image)\n                }\n            } catch(ex) {}\n\n        }\n\n        if (item.animationId) {\n\n            try {\n\n                let a:Animation = await this.animationService.get(item.animationId)\n            \n                animation = {\n                    cid: a.cid,\n                    content: he.unescape(a.content)\n                }\n    \n                let page = parser.parseFromString(a.content, 'text/html')\n    \n                let body = page.getElementsByTagName('body')[0]\n                \n                animationContentHTML = he.unescape(new XMLSerializer().serializeToString(body))\n    \n                //Swap body tag to a div\n                animationContentHTML = \"<div\" + animationContentHTML.slice(5)\n                animationContentHTML = animationContentHTML.substring(0, animationContentHTML.length - 7) + \"</div>\"\n\n            } catch(ex) { }\n\n        }\n\n        //Get author\n        if (channel.authorId) {\n            \n            author = await this.authorService.get(channel.authorId)\n\n            //Load cover photo if there is one.\n            if (author.coverPhotoId) {\n                let aImage = await this.imageService.get(author.coverPhotoId)\n\n                authorPhoto = {\n                    cid: aImage.cid,\n                    url: await this.imageService.getUrl(aImage)\n                }\n            }\n\n        }\n\n        // console.time('Get attributes')\n\n        //Only show attributes that are valid at the category level. \n        if (channel.attributeOptions.length > 0) {\n\n            for (let ao of channel.attributeOptions) {\n\n                //find the one selected by this item\n                let selections = item?.attributeSelections?.filter( as => ao?.traitType == as?.traitType)\n\n                attributeSelections.push({\n                    id: ao.id,\n                    traitType: ao.traitType,\n                    values: ao.values,\n                    value: selections?.length > 0 ? selections[0].value : '',\n                })\n\n            }\n\n\n            for (let attributeSelection of attributeSelections) {\n\n                try {\n\n                    let attributeCount:AttributeCount = await this.attributeCountService.get(`${channel._id}-${attributeSelection.traitType}-${attributeSelection.value}`)\n\n                    attributeSelection.categoryPercent = attributeCount ? new Intl.NumberFormat('default', {\n                        style: 'percent',\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                    }).format((attributeCount.count / tokenIdStats.count)) : ''\n\n                } catch(ex) {}\n\n            }\n\n\n        }\n\n\n        // console.timeEnd('Get attributes')\n\n        // console.time('Get last')\n\n        let canDelete = (tokenIdStats.max == item.tokenId)\n        \n        let themes:Theme[] = []\n\n        if (item.themes?.length > 0) {\n\n            try {\n            \n                for (let theme of item.themes) {\n                    themes.push(await this.themeService.get(theme))\n                }\n\n            } catch(ex) {}\n        }\n\n\n\n        // console.timeEnd('Get viewmodel')\n\n        let images:ImageViewModel[] = await this.getImagesFromContent(item)\n\n        //If cover image not part of image list add it.\n        if (images.filter(i => i.cid == coverImage?.cid).length == 0) {\n            images.push(coverImage)\n        }\n\n\n        // console.log(item)\n\n        return {\n            item: item,\n            themes: themes,\n            contentHTML: await this.quillService.translateContent(item.content),\n            animationContentHTML: animationContentHTML,\n            dateDisplay: this.dayjs(item.dateCreated).format(\"MMM DD YYYY\"),\n            channel: channel,\n            coverImage: coverImage,\n            animation: animation,\n            author: author,\n            authorPhoto: authorPhoto,\n            authorDisplayName: this.authorService.getDisplayName(author),\n            images: images,\n            attributeSelections: attributeSelections,\n            editable: editable,\n            canDelete: canDelete\n        }\n\n    }\n\n    async getNavigationViewModel(item:Item, channel:Channel) : Promise<ItemViewModel> {\n\n        let queryCache:QueryCache = await this.queryCacheService.get(`token_id_stats_by_channel_${channel._id}`)\n        let tokenIdStats = queryCache.result\n\n        let itemViewModel:ItemViewModel = await this.getViewModel(item, channel, tokenIdStats)\n\n        if (itemViewModel.item.tokenId < tokenIdStats.max) {\n            itemViewModel.next = itemViewModel.item.tokenId + 1\n        }\n\n        if (itemViewModel.item.tokenId > tokenIdStats.min) {\n            itemViewModel.previous =  itemViewModel.item.tokenId - 1\n        }\n\n\n        return itemViewModel\n    }\n\n    async getListViewModel(item:Item, channel:Channel) : Promise<ItemListViewModel> {\n     \n        let coverImage\n\n        if (item.coverImageId) {\n\n            try {\n                let image:Image = await this.imageService.get(item.coverImageId)\n                coverImage = {\n                    cid: image.cid,\n                    url: await this.imageService.getUrl(image)\n                }\n            } catch(ex) {}\n\n        }\n\n        return {\n            item: item,\n            channel:channel,\n            coverImage: coverImage\n        }\n\n\n    }\n\n    async listByChannel(channelId: string, limit: number, skip: number): Promise<ItemListViewModel[]> {\n\n        let result: ItemListViewModel[] = []\n\n        let items: Item[] = await this.itemService.listByChannel(channelId, limit, skip)\n\n        //Get channel\n        const channel:Channel = await this.channelService.get(channelId)\n\n        for (let item of items) {\n            result.push(await this.getListViewModel(item, channel))\n        }\n\n        return result\n\n    }\n\n    async getImagesFromContent(item:Item) : Promise<ImageViewModel[]> {\n\n        if (!item.content) return []\n\n        let ops = item.content.ops\n\n        const images = []\n\n        if (ops?.length > 0) {\n\n            for (let op of ops) {\n                if (op.insert && op.insert.ipfsimage) {\n                    images.push({\n                        cid: op.insert.ipfsimage.cid,\n                        url: op.insert.ipfsimage.src\n                    })\n                }\n            }\n\n            //Now generate the text preview\n            try {\n                \n                let image:Image = await this.imageService.newFromItem(item)\n\n                images.push({\n                    cid: image.cid,\n                    url: await this.imageService.getSVGURL(image),\n                    svg: image.svg,\n                    generated: true\n                })\n\n            } catch(ex) {}\n\n        }\n        \n\n\n        return images\n    }\n\n    async getNewViewModel(channelId:string) : Promise<ItemViewModel> {\n        \n        let channel = await this.channelService.get(channelId)\n\n\n        //Get default attribute options\n        let attributeSelections:AttributeSelectionViewModel[] = []\n\n        for (let ao of channel.attributeOptions) {\n\n            attributeSelections.push({\n                id: ao.id,\n                traitType: ao.traitType,\n                values: ao.values,\n                value: '',\n                categoryPercent: ''\n            })\n        }\n\n\n\n        let itemViewModel:ItemViewModel = {\n            item: {\n                attributeSelections: []\n            },\n            channel: channel,\n            attributeSelections: attributeSelections,\n            editable: true,\n            canDelete: true\n        }\n\n        return itemViewModel\n\n    }\n\n    async saveGeneratedCoverImage(item:Item) : Promise<Image> {\n\n        let images = await this.getImagesFromContent(item)\n\n        let matches = images?.filter(image => {\n  \n          if (item.coverImageId) {\n            //If there's a cover then only return true if this is it.\n            return image.cid == item.coverImageId\n          } else {\n            //If it's not set then we want to filter to the generated one.\n            return image.generated == true\n          }\n  \n        })\n  \n        let image = Object.assign(new Image(), matches[0]) \n\n        if (image.generated == true) {\n                        \n            //Remove URL before saving\n            delete image['url']\n        \n            try {\n                await this.imageService.put(image)\n            } catch(ex) { \n                // console.log(ex)\n            } //Might already exist. That's fine.  \n\n            item.coverImageId = image._id\n\n        }\n\n        return image\n\n    }\n\n    async saveAnimation(item:Item) : Promise<Animation> {\n\n        let content = await this.animationService.buildAnimationPage(item)\n\n        let animation:Animation = await this.animationService.newFromText(content)\n\n        try {\n            await this.animationService.put(animation)\n        } catch(ex) { \n            // console.log(ex)\n        } //Might already exist. That's fine.  \n\n        item.animationId = animation._id\n\n        return animation\n    }\n\n    async updateGeneratedCoverImage(item:Item) {\n\n        //Check if the current cover image is generated.\n        let coverImage = await this.imageService.get(item.coverImageId)\n\n        //If it's not generated then leave.\n        if (!coverImage.generated) return \n\n        //If it is then generate a new one.\n        let newCoverImage:Image = await this.imageService.newFromItem(item)\n\n\n        //Save it\n        try {\n            await this.imageService.put(newCoverImage)\n        } catch(ex) {}\n\n\n        item.coverImageId = newCoverImage._id\n\n\n    }\n\n    async put(command:PutItemCommand) : Promise<void> {\n\n\n        //Get the image cids that we'll be left with.\n        command.item.imageIds = this.exportService.getImageCidsByItem(command.item)\n\n        //If the item exists we need to do some cleanup before saving.\n        //Find any images and animations that are being removed and remove them.\n        if (command.item._rev) {\n\n            let existing = await this.itemService.get(command.item._id)\n            \n            //Loop through the existing images and find the ones we're removing.\n            let removedImageCids = this.exportService.getImageCidsByItem(existing).filter( cid => !command.item.imageIds?.includes(cid))\n\n            //Remove\n            for (let removedCid of removedImageCids) {\n                // console.log(`Removing ${removedCid} from images.`)\n                await this.deletePublishedImageByChannel(command.channel, command.item, removedCid)\n            }\n\n            //Remove animation if changed\n            if (command.item.animationId != existing.animationId) {\n                console.log(`Removing ${existing.animationId} from animations.`)\n                await this.deletePublishedAnimationByChannel(command.channel, command.item, existing.animationId)\n            }\n\n        }\n\n        //Put item  \n        await this.itemService.put(command.item)\n\n\n        if (command.publish) {\n            //Put images in IPFS and git\n            for (let imageCid of command.item.imageIds) {\n                try {\n                    await this.publishImage(command.channel, await this.imageService.get(imageCid), false )\n                } catch(ex) {}\n            }\n\n            //Put animation\n            try {\n                await this.publishAnimation(command.channel, await this.animationService.get(command.item.animationId), false)\n            } catch(ex) {}\n        }\n\n\n\n\n        if (command.updateQueryCache) {\n\n            let queryCache:QueryCache = await this.queryCacheService.get(`token_id_stats_by_channel_${command.item.channelId}`)\n\n            let tokenIdStats = queryCache.result\n    \n            if (command.item.tokenId < tokenIdStats.min) {\n                tokenIdStats.min = command.item.tokenId\n            }\n    \n            if (command.item.tokenId > tokenIdStats.max) {\n                tokenIdStats.max = command.item.tokenId\n                tokenIdStats.count++\n            }\n    \n            queryCache.result = tokenIdStats\n            \n    \n            //Update cache\n            await this.queryCacheService.put(queryCache)\n    \n    \n            //Update attribute counts\n            let attributeCounts:AttributeCount[] = await this.itemService.getAttributeInfoBySelections(command.item.channelId, command.item.attributeSelections)\n    \n    \n            for (let attributeCount of attributeCounts) {\n    \n                let ac:AttributeCount\n    \n                let attributeCountId = `${command.item.channelId}-${attributeCount.traitType}-${attributeCount.value}`\n\n                try {\n                    ac = await this.attributeCountService.get(attributeCountId)\n                } catch(ex) {}\n    \n                if (!ac) {\n                    ac = new AttributeCount()\n                    ac.channelId = command.item.channelId\n                    ac.traitType = attributeCount.traitType\n                    ac.value = attributeCount.value\n                }\n                \n                ac.count = attributeCount.count\n    \n                await this.attributeCountService.put(ac)\n            }\n        }\n\n\n\n    }\n\n    async delete(item:Item) : Promise<void> {\n\n        let channel = await this.channelService.get(item.channelId)\n\n        //Delete item\n        await this.itemService.delete(item)\n\n        //Delete images\n        let imageCids = this.exportService.getImageCidsByItem(item)\n        for (let imageCid of imageCids) {\n            await this.deletePublishedImageByChannel(channel, item, imageCid)\n        }\n\n        //Delete animation\n        await this.deletePublishedAnimationByChannel(channel, item, item.animationId)\n\n        //Delete JSON metadata\n        await this.deleteJSONForItem(channel, item)\n\n\n\n        let queryCache:QueryCache = await this.queryCacheService.get(`token_id_stats_by_channel_${item.channelId}`)\n\n        let tokenIdStats = queryCache.result\n\n        //If deleting the lowest token ID then reset. Only works because we can only delete the final item. Change this if that changes.\n        if (item.tokenId == tokenIdStats.min) {\n            //Reset\n            tokenIdStats.min = 0\n            tokenIdStats.max = 0 \n            tokenIdStats.count = 0\n        } else {\n            tokenIdStats.max = item.tokenId - 1\n            tokenIdStats.count--\n        }\n\n        queryCache.result = tokenIdStats\n\n        //Update cache\n        await this.queryCacheService.put(queryCache)\n\n    }\n\n    async clone(item:Item) : Promise<Item> {\n\n        let itemCopy = JSON.parse(JSON.stringify(item))\n\n        delete itemCopy._id\n        delete itemCopy._rev\n        delete itemCopy['_rev_tree']\n        delete itemCopy.tokenId\n\n        itemCopy = Object.assign(new Item(), itemCopy)\n\n        //Save to get an ID, etc\n        let channel = await this.channelService.get(item.channelId)\n        await this.put({\n            channel: channel,\n            item: itemCopy\n        })\n\n\n        //Build contentHTML for searching\n        itemCopy.contentHTML = await this.quillService.translateContent(itemCopy.content, true)\n\n        //Save the cover image if necessary\n        let coverImage = await this.saveGeneratedCoverImage(itemCopy)\n        item.coverImageGenerated = coverImage.generated\n        \n        //And the animation\n        await this.saveAnimation(itemCopy)\n\n        //Save the result\n        await this.put({\n            channel: channel,\n            item: itemCopy\n        })\n\n\n        return itemCopy\n\n    }\n\n    async publishImage(channel:Channel, image:Image, flush:boolean=true) : Promise<void> {\n\n        if (!image) return\n\n        let ipfsDirectory = `/export/${channel._id}`\n        let ipfsFilename = `${ipfsDirectory}/images/${image.cid}.${image.buffer ? 'jpg' : 'svg'}` \n\n        //Check if it's already in IPFS\n        let stat\n\n        try {\n            stat = await this.ipfsService.stat(ipfsFilename, { hash: true })\n        } catch(ex) {}\n\n        if (!stat?.cid?.toString()) {\n\n            let content = await this.imageService.getImageContent(image)\n\n            //Add to IPFS\n            const result = await this.ipfsService.add({\n                content: content\n            })\n\n            //Move to MFS directory in IPFS\n            await this.ipfsService.filesCp(`/ipfs/${result.cid.toString()}`, ipfsFilename, { create: true, parents: true, flush:flush })\n\n            // //Add to git\n            // let gitDirectory = this.gitService.getBaseDir(channel)\n            // await this.gitService.writeFile(`${gitDirectory}/backup/export/images/${image.cid}.${image.buffer ? 'jpg' : 'svg'}`, content)\n        }\n\n\n\n    }\n\n    async deletePublishedImageByChannel(channel:Channel, item:Item, removedCid:string): Promise<void> {\n\n        try {\n\n            let image = await this.imageService.get(removedCid)\n\n            //TODO: Make sure the image isn't still in use by another\n            let existing = (await this.itemService.getByImageId(removedCid)).filter(i => i._id != item._id)\n\n            if (existing?.length > 0) return\n\n            await this.imageService.delete(image)\n\n            //Remove from IPFS\n            let ipfsDirectory = `/export/${channel._id}`\n            let ipfsFilename = `${ipfsDirectory}/images/${image.cid}.${image.buffer ? 'jpg' : 'svg'}`\n\n            await this._safeDelete(ipfsFilename)\n\n\n\n\n\n            //Remove from git\n            // let gitDirectory = this.gitService.getBaseDir(channel)\n            // await this.gitService.removeFile(`${gitDirectory}/backup/export/images/${image.cid}.${image.buffer ? 'jpg' : 'svg'}`)\n\n        } catch(ex) {}\n\n\n\n    }\n\n    async publishAnimation(channel:Channel, animation:Animation, flush:boolean=true) : Promise<void> {\n\n        if (!animation) return\n\n        let ipfsDirectory = `/export/${channel._id}`\n        let ipfsFilename = `${ipfsDirectory}/animations/${animation.cid}.html`\n\n\n        //Check if it's already in IPFS\n        let stat\n\n        try {\n            stat = await this.ipfsService.stat(ipfsFilename, { hash: true })\n        } catch(ex) { }\n\n\n        if (!stat?.cid?.toString()) {\n            \n            // console.log(`Publishing animation ${animation._id}`)\n\n            const result = await this.ipfsService.add({\n                content: animation.content\n            })\n\n            //Move to MFS directory in IPFS\n            await this.ipfsService.filesCp(`/ipfs/${result.cid.toString()}`, ipfsFilename, { create: true, parents: true, flush:flush })\n    \n            // //Add to git\n            // let gitDirectory = this.gitService.getBaseDir(channel)\n            // await this.gitService.writeFile(`${gitDirectory}/backup/export/animations/${animation.cid}.html`, animation.content)\n\n        }\n\n\n        // console.log(`Saved animation ${animationCid}`)\n\n\n    }\n\n    async deletePublishedAnimationByChannel(channel:Channel, item:Item, animationId:string): Promise<void> {\n\n        try {\n\n            let animation = await this.animationService.get(animationId)\n\n            //TODO: Make sure the animation isn't still in use by another\n            let existing = (await this.itemService.getByAnimationId(animation._id)).filter(i => i._id != item._id)\n            if (existing?.length > 0) return\n\n            await this.animationService.delete(animation)\n\n            //Remove from IPFS\n            let ipfsDirectory = `/export/${channel._id}`\n            let ipfsFilename = `${ipfsDirectory}/animations/${animation.cid}.html`\n\n            await this._safeDelete(ipfsFilename)\n\n\n\n            // //Remove from git\n            // let gitDirectory = this.gitService.getBaseDir(channel)\n            // await this.gitService.removeFile(`${gitDirectory}/backup/export/animations/${animation.cid}.html`)\n\n        } catch(ex) {}\n\n\n    }\n\n    async deleteJSONForItem(channel:Channel, item:Item): Promise<void> {\n\n        //Remove from IPFS\n        let ipfsDirectory = `/export/${channel._id}`\n        let ipfsFilename = `${ipfsDirectory}/metadata/${item.tokenId}.json`\n\n\n        //Check if it's already in IPFS\n        await this._safeDelete(ipfsFilename)\n\n\n        // //Remove from git\n        // let gitDirectory = this.gitService.getBaseDir(channel)\n        // await this.gitService.removeFile(`${gitDirectory}/backup/export/metadata/${item.tokenId}.json`)\n    }\n\n\n    private async _safeDelete(ipfsFilename:string) {\n\n        //Check if it's already in IPFS\n        let stat\n\n        try {\n            stat = await this.ipfsService.stat(ipfsFilename, { hash: true })\n        } catch(ex) { }\n\n        if (stat?.cid?.toString()) {\n            await this.ipfsService.filesRm(ipfsFilename,  { recursive: true, flush: true})\n        }\n\n    }\n\n\n}\n\n\ninterface PutItemCommand {\n    channel:Channel\n    item:Item\n    updateQueryCache?:boolean\n    publish?:boolean\n}\n\n\n\n\nexport {\n    ItemWebService\n}","import { QueryCache } from \"../../dto/query-cache.js\";\nimport { inject, injectable } from \"inversify\";\nimport { Author } from \"../../dto/author.js\";\nimport { Channel } from \"../../dto/channel.js\";\nimport { Item } from \"../../dto/item.js\";\n\nimport { Image } from \"../../dto/image.js\";\n\nimport { ChannelViewModel } from \"../../dto/viewmodel/channel-view-model.js\";\nimport { ImageViewModel } from \"../../dto/viewmodel/image-view-model.js\";\nimport { AuthorService } from \"../author-service.js\";\nimport { ChannelContract, ChannelService } from \"../channel-service.js\";\nimport { ImageService } from \"../image-service.js\";\nimport { ItemService } from \"../item-service.js\";\nimport { ItemWebService } from \"./item-web-service.js\";\nimport { QueryCacheService } from \"../../service/core/query-cache-service.js\";\nimport { SchemaService } from \"../../service/core/schema-service.js\";\nimport { SettingsService } from \"../core/settings-service.js\";\n\n\n@injectable()\nclass ChannelWebService {\n\n    constructor(\n        private channelService: ChannelService,\n        private imageService: ImageService,\n        private authorService: AuthorService,\n        private itemService:ItemService,\n        private itemWebService:ItemWebService,\n        private queryCacheService:QueryCacheService,\n        private schemaService:SchemaService,\n        private settingsService:SettingsService,\n        @inject(\"dayjs\") private dayjs\n    ) { }\n\n    async get(_id: string): Promise<ChannelViewModel> {\n        return this.getViewModel(await this.channelService.get(_id))\n    }\n\n    async getViewModel(channel: Channel): Promise<ChannelViewModel> {\n\n        let coverImage: ImageViewModel\n        let coverBanner: ImageViewModel\n        let authorPhoto: ImageViewModel\n\n        let author: Author\n\n        // let editable = !channel.contractAddress\n\n        //Load the right image db so we can get the cover and banner\n        await this.imageService.load(channel._id)\n        await this.authorService.load(channel._id)\n\n\n        if (channel.coverImageId) {\n\n            try {\n                let cImage = await this.imageService.get(channel.coverImageId)\n\n                coverImage = {\n                    cid: cImage.cid,\n                    url: await this.imageService.getUrl(cImage)\n                }\n    \n            } catch (ex) {}\n\n        }\n\n        if (channel.coverBannerId) {\n\n            try {\n                let cBanner = await this.imageService.get(channel.coverBannerId)\n\n                coverBanner = {\n                    cid: cBanner.cid,\n                    url: await this.imageService.getUrl(cBanner)\n                }\n            } catch(ex) {}\n\n        }\n\n        if (channel.authorId) {\n\n            author = await this.authorService.get(channel.authorId)\n\n            //Load cover photo if there is one.\n            if (author.coverPhotoId) {\n\n                try {\n                    let aImage = await this.imageService.get(author.coverPhotoId)\n\n                    authorPhoto = {\n                        cid: aImage.cid,\n                        url: await this.imageService.getUrl(aImage)\n                    }\n                } catch(ex) {}\n\n            }\n\n        }\n\n        let itemCount = await this.channelService.countItemsByChannel(channel._id)\n\n        let settings\n\n        try {\n            settings = await this.settingsService.get()\n        } catch(ex) {}\n\n\n        let gitProvider\n\n        try {\n            gitProvider = await this.channelService.getGitProviderCredentials(channel, settings)\n        } catch(ex) {}\n\n\n        return {\n            channel: channel,\n            // themes: themes,\n            // staticPages: staticPages,\n            coverImage: coverImage,\n            coverBanner: coverBanner,\n            author: author,\n            authorDisplayName: this.authorService.getDisplayName(author),\n            authorPhoto: authorPhoto,\n            itemCount: itemCount,\n            editable: true,\n            dateCreated: this.dayjs(channel.dateCreated).format(\"MMM DD YYYY\"),\n            gitProvider: gitProvider\n        }\n\n    }\n\n    async list(limit: number, skip: number): Promise<ChannelViewModel[]> {\n\n        let result: ChannelViewModel[] = []\n\n        let channels: Channel[] = await this.channelService.list(limit, skip)\n\n        for (let channel of channels.filter(c => !c.forkType || c.importSuccess)) {\n            result.push(await this.getViewModel(channel))\n        }\n\n        return result\n\n    }\n\n    async upgrade(channel:Channel) {\n\n        //Loop through each item. \n        let items:Item[] = await this.itemService.listByChannel(channel._id, 100000, 0)\n\n\n        for (let item of items) {\n\n            //@ts-ignore\n            //Look up the cover image\n            let coverImage = await this.imageService.get(item.coverImageId)\n\n            item.coverImageGenerated = coverImage.generated\n        \n            //Resave\n            let updated = Object.assign(new Item(), item)\n            await this.itemService.put(updated)\n\n            console.log(updated)\n\n\n        }\n\n    }\n\n    async regenerateItemMedia(channel:Channel) {\n\n        //Loop through each item. \n        let items:Item[] = await this.itemService.listByChannel(channel._id, 100000, 0)\n\n\n        for (let item of items) {\n\n            //Save the cover image \n            await this.itemWebService.updateGeneratedCoverImage(item)\n\n            //And the animation\n            await this.itemWebService.saveAnimation(item)\n\n            //Resave\n            let updated = Object.assign(new Item(), item)\n            await this.itemService.put(updated)\n\n            // console.log(updated)\n\n        }\n    }\n\n    async put(channel:Channel, coverImage?:Image, coverBanner?:Image) : Promise<void> {\n\n        let response = await this.channelService.put(channel)\n\n        channel._rev = response.rev\n\n        //Load the right channel dbs\n        await this.schemaService.loadChannel(channel._id)\n\n\n        //Save cover image\n        if (coverImage) {\n            try {\n                //Could be a duplicate. Which means it's fine.\n                await this.imageService.put(Object.assign(new Image(), coverImage))\n            } catch (ex) { }\n        }\n\n\n        //Save cover banner\n        if (coverBanner) {\n            try {\n                //Could be a duplicate. Which means it's fine.\n                await this.imageService.put(Object.assign(new Image(), coverBanner))\n            } catch (ex) {  }\n        }\n\n        let queryCache:QueryCache\n        try {\n            queryCache = await this.queryCacheService.get(`token_id_stats_by_channel_${channel._id}`)\n        } catch(ex) {}\n\n        if (!queryCache) {\n            queryCache = new QueryCache()\n            queryCache._id = `token_id_stats_by_channel_${channel._id}`\n            queryCache.result = {\n                min: 0,\n                max: 0,\n                count: 0\n            }\n        }\n\n        //Update cache\n        await this.queryCacheService.put(queryCache)\n\n    }\n\n    async getChannelContract(channel:Channel) : Promise<ChannelContract> {\n        return this.channelService.getChannelContract(channel)\n    }\n\n}\n\n\n\n\nexport {\n    ChannelWebService\n}","import { injectable } from \"inversify\";\nimport { Author } from \"../../dto/author.js\";\nimport { AuthorViewModel } from \"../../dto/viewmodel/author-view-model.js\";\nimport { ImageViewModel } from \"../../dto/viewmodel/image-view-model.js\";\nimport { AuthorService } from \"../author-service.js\";\nimport { ImageService } from \"../image-service.js\";\n\n@injectable()\nclass AuthorWebService {\n\n    constructor(\n        private imageService: ImageService,\n        private authorService: AuthorService\n    ) { }\n\n    async get(_id: string): Promise<AuthorViewModel> {\n        return this.getViewModel(await this.authorService.get(_id))\n    }\n\n    async getViewModel(author: Author): Promise<AuthorViewModel> {\n\n        let authorPhoto:ImageViewModel\n\n        //Load cover photo if there is one.\n        if (author.coverPhotoId) {\n\n            let aImage = await this.imageService.get(author.coverPhotoId)\n\n            authorPhoto = {\n                cid: aImage.cid,\n                url: await this.imageService.getUrl(aImage)\n            }\n        }\n\n        return {\n            author: author,\n            authorPhoto: authorPhoto,\n            authorDisplayName: this.authorService.getDisplayName(author)\n        }\n\n    }\n\n\n\n}\n\nexport {\n    AuthorWebService\n}","import { default as axios } from 'axios'\n\nimport { injectable } from \"inversify\"\n\nimport { Channel } from \"../../dto/channel.js\"\nimport { ForkInfo, GitProviderService } from './git-provider-service.js'\n\nimport { SettingsService } from './settings-service.js'\n\nimport parse from \"parse-link-header\"\n\n\n\n@injectable()\nclass GitlabService implements GitProviderService {\n\n    static BASE_URL = 'https://gitlab.com/api/v4'\n    static READER_REPO_ID = 15461980\n\n    \n    constructor(\n        private settingsService:SettingsService,\n    ) {}\n\n    async createFork(channel:Channel) : Promise<ForkInfo> {\n        \n        console.log(`Creating reader fork...`)\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = settings.gitProviders[\"gitlab\"]\n\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n        let url = `${GitlabService.BASE_URL}/projects/${GitlabService.READER_REPO_ID}/fork`\n\n\n        let path = `${channel.title}`.replace(/[^a-z0-9]/gi, '-').toLowerCase()\n\n        //Look for an existing fork and just return it.\n        let existingFork = await this.getExistingFork(channel)\n\n        if (existingFork) {\n            return {\n                id: existingFork.id,\n                path: existingFork.path,\n                branch: \"master\"\n            }\n        }\n        \n        //Create a new one\n        let response = await axios.post(url, {\n            name: path,\n            path: path\n        } , {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n        return {\n            id: response.data.id,\n            path: path,\n            branch: \"master\"\n        }\n\n    }\n\n    async createVariables(channel: Channel): Promise<any> {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = settings.gitProviders[\"gitlab\"]\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n        //Alchemy\n        if (settings.alchemyKey) {\n            //Create\n            await this._createVariable(channel, gitProvider, \"ALCHEMY_API_KEY\", settings.alchemyKey)\n        }\n\n    }\n\n    private async _createVariable(channel, gitProvider, key, value) {\n\n\n        //First see if it exists.\n        let existing = await this._getVariables(channel, gitProvider, key )\n\n        let url = `${GitlabService.BASE_URL}/projects/${channel.publishReaderRepoId}/variables`\n\n        if (existing) {\n\n            //Update\n            return axios.put(`${url}/${key}`, {\n                key: key,\n                value: value,\n                masked: true\n            } , {\n                headers: {\n                    \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                }\n            })\n\n        } else {\n\n            return axios.post(url, {\n                key: key,\n                value: value,\n                masked: true\n            } , {\n                headers: {\n                    \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                }\n            })\n\n        }\n\n    }\n\n    private async _getVariables(channel, gitProvider, key) {\n\n        let url = `${GitlabService.BASE_URL}/projects/${channel.publishReaderRepoId}/variables/${key}`\n\n        try {\n            \n            let response = await axios.get(url, {\n                headers: {\n                    \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                }\n            })\n    \n            return response?.data\n\n        } catch(ex) {\n        }\n\n\n    }\n\n    public async getExistingFork(channel:Channel) : Promise<ForkInfo> {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = settings.gitProviders[\"gitlab\"]\n\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n\n        let url = `${GitlabService.BASE_URL}/projects/${GitlabService.READER_REPO_ID}/forks`\n        \n        let response = await axios.get(url, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n        let forks = response.data\n\n        let path = `${channel.title}`.replace(/[^a-z0-9]/gi, '-').toLowerCase()\n\n        //Search for one with the same path\n        let results = forks.filter( f => f.path == path && f.owner.username == gitProvider.username)\n\n\n        if (results?.length == 1) {\n            return {\n                id: results[0].id,\n                httpUrlToRepo: results[0].http_url_to_repo,\n                path: results[0].path,\n                branch: results[0].default_branch\n            }\n        }\n\n    }\n\n    async getForkRepoStatus(channel:Channel) : Promise<string> {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = settings.gitProviders[\"gitlab\"]\n\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n        if (!channel.publishReaderRepoId) return\n\n        let url = `${GitlabService.BASE_URL}/projects/${channel.publishReaderRepoId}`\n\n        let response = await axios.get(url, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n        return response.data.import_status\n\n    }\n\n    async getJobForCommit(channel:Channel, gitProvider) : Promise<any[]> {\n\n\n        let url = `${GitlabService.BASE_URL}/projects/${channel.publishReaderRepoId}/jobs`\n\n        const res = await axios.get(url, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n        return res.data?.filter(job => job.commit?.id == channel.publishReaderIPFSStatus.headSha)\n\n    }\n\n    async commit(channel:Channel, actions:any[], gitProvider) : Promise<string> {\n\n        for (let action of actions) {\n            action.encoding = \"base64\"\n            action.content = action.content.toString('base64')\n        }\n\n        let total = 0\n\n        let chunks = this.chunkIt(actions, 500)\n\n        for (const [i, chunk] of chunks.entries()) {\n\n            total += chunk.length\n\n\n            this.logPublishProgress(`Commiting reader data for ${channel.title} to GitLab: committing ${chunk.length} actions. ${total} / ${actions.length}`)\n\n            let url = `${GitlabService.BASE_URL}/projects/${channel.publishReaderRepoId}/repository/commits`\n    \n\n            let headline\n            if (i === chunks.length - 1) {\n                headline = `Commiting reader data complete`\n            } else {\n                headline = `Commiting reader data for ${channel.title}`\n            }\n\n            const res = await axios.post(url, {\n                branch: \"master\",\n                commit_message: headline,\n                actions: chunk,\n            } , {\n                headers: {\n                    \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                }\n            })\n\n        }\n\n        let latestCommit = await this.getMostRecentCommit(channel, gitProvider)\n        \n        this.logPublishProgress(`Commit successful: ${latestCommit}`)\n\n\n        return latestCommit\n\n    }\n\n    async deleteReaderBackup(channel:Channel, gitProvider) {\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n        \n\n        this.logPublishProgress(`Deleting existing files from repo...`)\n\n\n        let treeLink = `${GitlabService.BASE_URL}/projects/${channel.publishReaderRepoId}/repository/tree?recursive=true&path=.upload&pagination=keyset`\n        let linkHeaders\n        let actions = []\n\n        do {\n\n            //Get list of current files in .upload folder\n            try {\n\n                let results = await axios.get(treeLink, {\n                    headers: {\n                        \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                    }\n                })\n\n                \n                //Skip directories because gitlab chokes on them.\n                let resultActions = results?.data?.reverse()?.filter(result => result.name.indexOf('.') > 0).map( result => {\n                    return {\n                        action: 'delete',\n                        file_path: result.path\n                    }\n                })\n\n\n                actions.push(...resultActions)\n\n                linkHeaders = parse(results.headers[\"link\"])\n\n                treeLink = linkHeaders?.next?.url\n\n\n            } catch(ex) {\n\n                //If the .upload folder doesn't exist we will get a 404\n                if (ex.response.data?.message ==\"404 invalid revision or path Not Found\") {\n                    treeLink = undefined\n                }\n\n            }\n\n\n\n        } while(treeLink)\n\n        \n        if (actions?.length > 0) {\n\n            this.logPublishProgress(`Deleting ${actions.length} files from repo...`)\n\n            let url = `${GitlabService.BASE_URL}/projects/${channel.publishReaderRepoId}/repository/commits`\n\n            await axios.post(url, {\n                branch: \"master\",\n                commit_message: `Deleting .upload`,\n                actions: actions\n            } , {\n                headers: {\n                    \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                }\n            })\n\n        }\n\n    }\n\n    async deleteContractBackup(channel:Channel, gitProvider) {\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n        this.logPublishProgress(`Deleting existing contract files from repo...`)\n\n        let actions = [{\n            action: 'delete',\n            file_path: \"/backup/contract/contract.json\"\n        },{\n            action: 'delete',\n            file_path: \"/backup/contract/contract-abi.json\"\n        }]\n\n\n        if (actions?.length > 0) {\n\n            this.logPublishProgress(`Deleting ${actions.length} files from repo...`)\n\n            let url = `${GitlabService.BASE_URL}/projects/${channel.publishReaderRepoId}/repository/commits`\n\n            await axios.post(url, {\n                branch: \"master\",\n                commit_message: `Deleting existing contract files for ${channel.title}`,\n                actions: actions\n            } , {\n                headers: {\n                    \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                }\n            })\n\n        }\n\n    }\n\n    async getMostRecentCommit(channel, gitProvider) {\n\n\n        let url = `${GitlabService.BASE_URL}/projects/${channel.publishReaderRepoId}/repository/commits`\n\n        const res = await axios.get(url, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n        let commits = res.data\n\n        if (commits?.length > 0) {\n            return commits[0].id\n        }\n\n    }\n\n    private logPublishProgress(message:string) {\n    \n        console.log(message)\n    \n        if (typeof window !== \"undefined\" && typeof window.document !== \"undefined\") {\n          // browser\n          const imageSelectedEvent = new CustomEvent('publish-progress', {\n            detail: { message: message }\n          })\n      \n          document.dispatchEvent(imageSelectedEvent)\n    \n        }\n    \n    }\n\n    getBranchName(channel) {\n        return channel.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()\n    }\n\n    chunkIt(gitActions: any[], perChunk: number) {\n\n        let chunks = []\n    \n        //Break into rows\n        for (let i = 0; i < gitActions.length; i += perChunk) {\n            let chunk = gitActions.slice(i, i + perChunk)\n            chunks.push(chunk)\n        }\n    \n        return chunks\n    }\n    \n\n}\n\n\nexport {\n    GitlabService\n}","import { ModelView } from \"../../util/model-view.js\";\nimport { injectable, inject, Container } from \"inversify\";\nimport { Router } from \"framework7\";\nimport { UiService } from \"./ui-service.js\";\nimport { container } from \"../../inversify.config.js\"\n\n\n@injectable()\nclass RoutingService {\n\n    constructor(\n        private uiService:UiService,\n        @inject(\"framework7\") public app,\n     ) {}\n\n\n    public navigate(navigateParams:Router.NavigateParameters, routeOptions?: Router.RouteOptions, viewName:string='main') {\n\n        console.log(`${viewName}: navigating to ${navigateParams.path}`)\n\n        if (!routeOptions) routeOptions = {\n            reloadCurrent: true,\n            ignoreCache: false,\n            browserHistory: true\n        }\n\n        let view = this.app.view[viewName]\n\n        if (view) {\n            view.router.navigate( navigateParams, routeOptions)\n        } else {\n            console.log(`Could not find view ${viewName}`)\n        }\n\n    }\n\n    public navigateUrl(url:string, routeOptions?:Router.RouteOptions, viewName:string='main') {\n\n        console.log(`${viewName}: navigating to ${url}`)\n\n        let view = this.app.view[viewName]\n\n        if (view) {\n            view.router.navigate( url, routeOptions)\n        } else {\n            console.log(`Could not find view ${viewName}`)\n        }\n\n    }\n\n    public buildRoutesForContainer(container:Container) : Router.RouteParameters[]  {\n\n        let routes:Router.RouteParameters[] = []\n\n        //Look up requestMappings \n        for (let mappedRoute of globalThis.mappedRoutes) {\n\n            //Look up matching bean\n            let controllerBean = container.get(mappedRoute.controllerClass)\n\n            routes.push( {\n                path: mappedRoute.path,\n                async: async (ctx: Router.RouteCallbackCtx) => {\n                    try {\n                        await this.resolveRoute(ctx.to, ctx.resolve, controllerBean[mappedRoute.action](), mappedRoute.showSpinner)\n                    } catch (ex) {\n                        this.uiService.showExceptionPopup(ex)\n                    }\n                }\n            })\n\n        \n        }\n\n\n        //Needs to be last\n        routes.push({\n            path: '(.*)',\n            // url: 'pages/404.html',\n            async async(ctx: Router.RouteCallbackCtx) {\n                // this.uiService.showPopup(\"Page was not found\")\n                console.log(`404 error: ${ctx.to.path}`)\n            }\n        })\n\n        return routes\n\n    }\n\n    public async resolveRoute(routeTo, resolve, controller_promise: Promise<ModelView>, showSpinner=true) {\n\n        if (showSpinner) {\n            this.uiService.showSpinner(\"Loading...\")\n        }\n\n        let modelView: ModelView = await controller_promise;\n        if (!modelView) return\n\n        let model:Function = await modelView.model\n        let modelResult:any = await model(routeTo)\n\n\n        //Attach container to props.\n        let props = Object.assign({}, modelResult)\n        props.container = container\n\n        if (modelView.view) {\n            \n            //Load the new component if it's given to us. \n            resolve({\n                component: modelView.view\n            },\n                {\n                    props: props,\n                    history: true,\n                    browserHistory: true\n                })    \n\n        } \n\n        if (showSpinner) {\n            this.uiService.hideSpinner()\n        }\n\n    }\n\n\n}\n\ninterface RouteTo {\n    context: any \n    params: any \n    url: string \n    path: string \n    query: any \n    name: string \n    hash: string \n    route: any \n\n}\n\n\ninterface Route {\n    path: string \n    method: string \n}\n\n\nexport {\n    RoutingService, Route, RouteTo\n}\n","class ModelView {\n\n    constructor(public model: (data: any) => any, public view?: any) {}\n  \n  }\n  \n  export { ModelView }\n  ","function routeMap(value: string, showSpinner?:boolean) {\n\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        if (!globalThis.mappedRoutes) globalThis.mappedRoutes = []\n\n        globalThis.mappedRoutes.push({\n            path: value,\n            controllerClass: target.constructor,\n            action: propertyKey,\n            showSpinner: showSpinner\n        })\n\n    }\n}\n\nexport {\n    routeMap\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../service/core/container-service\";\nfunction framework7Component(props, {\n  $on,\n  $f7,\n  $update\n}) {\n  let walletService = ContainerService.getWalletService();\n  let walletAddress = walletService.address;\n  let showConnect = walletService.provider != undefined;\n  let active = props.active;\n  let readerConfig = props.reader_config;\n  let breadcrumbs = props.breadcrumbs;\n\n  // Captures 0x + 4 characters, then the last 4 characters.\n  const truncateRegex = /^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/;\n  const truncateEthAddress = address => {\n    const match = address.match(truncateRegex);\n    if (!match) return address;\n    return `${match[1]}…${match[2]}`;\n  };\n  const connectWallet = async e => {\n    document.dispatchEvent(new CustomEvent('connect-wallet'));\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"navbar\">\n        <div class=\"navbar-bg\"></div>\n\n        <div class=\"navbar-inner sliding\">\n        \n          <div class=\"title\">\n            <a href=\"/\">Large</a>\n          </div>\n\n          <div class=\"right\">\n\n            <div class=\"small-only\">\n\n              <a href=\"#\" class=\"link popover-open\" data-popover=\".popover-menu\">\n                <i class=\"f7-icons\">menu</i>\n              </a> \n\n              <div class=\"popover popover-menu\">\n                <div class=\"popover-angle\"></div>\n                <div class=\"popover-inner\">                    \n                  <div class=\"list\">\n                    <ul>\n\n                      <li>\n                        <div class=\"item-content\">\n                          <div class=\"item-inner\">\n                              <div class=\"item-title\">\n                                  ${walletAddress != undefined ? $h`\n                                    <a href=\"#\" class=\"link popover-close\">${truncateEthAddress(walletAddress)}</a>\n                                ` : $h`\n                                    <a class=\"popover-close\" href=\"#\" @click=${connectWallet}>Connect Wallet</a>\n                                `} \n                              </div>\n                          </div>\n                        </div>\n                      </li>\n\n                      <li>\n                        <a href=\"/admin/settings\" class=\"item-link popover-close\">\n                          <div class=\"item-content\">\n                            <div class=\"item-inner\">\n                                <div class=\"item-title\">\n                                    Settings\n                                </div>\n                            </div>\n                          </div>\n                        </a>\n                      </li>\n\n                    </ul>\n              \n                  </div>\n      \n                </div>\n              </div>\n\n            </div>\n\n            <div class=\"large-only\">\n              \n              ${showConnect ? $h`\n                ${walletAddress != undefined ? $h`\n                      <a href=\"/admin/author/show/${walletAddress}\" class=\"link ${active == 'profile' ? $h`link-active` : $h` `}\">${truncateEthAddress(walletAddress)}</a>\n                    ` : $h`\n                      <a class=\"link\" href=\"#\" @click=${connectWallet}>Connect Wallet</button>\n                    `}\n              ` : $h`<span />`}\n\n              <a class=\"link ${active == 'settings' ? $h`link-active` : $h` `}\" href=\"/admin/settings\" >\n                Settings\n              </a> \n\n            </div>\n    \n          </div>\n\n\n          ${breadcrumbs ? $h`\n                  \n            <div class=\"subnavbar\">\n              <div class=\"subnavbar-inner\">\n                \n                <div class=\"breadcrumbs \">\n  \n                  ${breadcrumbs.map( (b, index) => $h`\n                    <div class=\"breadcrumbs-item ${index == breadcrumbs.length - 1 ? 'breadcrumbs-item-active' : ''}\">\n\n                      ${b.path ? $h`\n                        <a href=\"${b.path}\" class=\"link\" >\n                          ${b.text}\n                        </a>\n                      ` : $h`${b.text}`}\n\n\n                    </div>  \n\n                    ${b.path && index != breadcrumbs.length - 1 ? $h`\n                      <div class=\"breadcrumbs-separator\"></div>\n                    ` : $h` `}\n\n                    \n                  `)}\n\n                </div>\n        \n              </div>\n            </div>\n\n\n            ` : $h`<span />`}\n\n          <!-- ${readerConfig?.path ? $h`\n              <a href=\"${readerConfig.path}\" class=\"link external\">\n                <i class=\"icon icon-back\"></i> ${readerConfig.title}\n              </a>\n          ` : ''} -->\n\n        </div>\n      </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = 'ef693a2fe6';\nframework7Component.style = `\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { ImageService } from \"../../../service/image-service\";\nimport { SettingsService } from \"../../../service/core/settings-service\";\nimport { ChannelWebService } from \"../../../service/web/channel-web-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $h,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelWebService = ContainerService.getInstance(ChannelWebService);\n  let imageService = ContainerService.getInstance(ImageService);\n  let uiService = ContainerService.getInstance(UiService);\n  let settingsService = ContainerService.getInstance(SettingsService);\n  let footerText = props.footerText;\n  const LIMIT = 20;\n  let channelsShown;\n  let pageCounter;\n  let hasMoreChannels;\n  let loadingInProgress;\n  let channels = [];\n  let virtualList;\n  let breadcrumbs = [{\n    text: \"Home\"\n  }];\n  function unloadInfiniteScroll() {\n    console.log(\"Unload infinite scroll\");\n\n    // Nothing more to load, detach infinite scroll events to prevent unnecessary loadings\n    $f7.infiniteScroll.destroy('#channel-index-infinite-scroll');\n\n    // Remove preloader\n    $('.infinite-scroll-preloader').hide();\n  }\n  async function infiniteScroll() {\n    // Exit, if loading in progress\n    if (loadingInProgress || !hasMoreChannels) return;\n    uiService.showSpinner(\"Loading...\");\n\n    // Set loading flag\n    loadingInProgress = true;\n    try {\n      channels = await channelWebService.list(LIMIT, channelsShown);\n      if (channels && channels.length == LIMIT) {\n        channelsShown += channels.length;\n      } else {\n        hasMoreChannels = false;\n      }\n      if (pageCounter == 0) {\n        //Remove the fake one\n        virtualList.deleteAllItems();\n      }\n      virtualList.appendItems(channels);\n    } catch (ex) {\n      console.log(ex);\n    }\n    if (!hasMoreChannels) {\n      unloadInfiniteScroll();\n    }\n    pageCounter++;\n    loadingInProgress = false;\n    uiService.hideSpinner();\n  }\n  $on('pageAfterOut', (e, page) => {\n    unloadInfiniteScroll();\n  });\n  $on('pageInit', async (e, page) => {\n    channelsShown = 0;\n    pageCounter = 0;\n    hasMoreChannels = true;\n    loadingInProgress = false;\n\n    //Get first page\n    virtualList = $f7.virtualList.create({\n      el: '#channel-index-list',\n      renderItem(channelViewModel) {\n        return getTemplate(channelViewModel);\n      },\n      items: [],\n      setListHeight: false,\n      emptyTemplate: `\n              <li class=\"item-content\">\n                <div class=\"item-inner\">\n                    There are no collections yet. <br /><br />Click the 'Create & Import' button to create your first collection.\n                </div>\n              </li>\n            `\n    });\n\n    //Get the page\n    $('#channel-index-infinite-scroll').trigger('infinite');\n    virtualList.on('itemsAfterInsert', (virtualList, fragment) => {\n      //Find empty description divs and set their innerHTML\n      $('.empty').each(element => {\n        const id = $(element).data('id');\n        const c = channels.filter(channelViewModel => channelViewModel.channel._id == id)[0];\n        if (c.channel.descriptionHTML) {\n          element.innerHTML = c.channel.descriptionHTML;\n        }\n\n        //Make links external\n        let links = element.getElementsByTagName('a');\n        for (let link of links) {\n          link.classList.add('external');\n        }\n        $(element).removeClass('empty');\n      });\n      $('#channel-index-list ul').css(\"height\", \"\");\n    });\n    let settings = await settingsService.get();\n    if (!settings.welcomeHide) {\n      const popup = $f7.popup.create({\n        el: '.welcome-popup',\n        on: {\n          close: async popup => {\n            settings.welcomeHide = true;\n            await settingsService.put(settings);\n          }\n        }\n      });\n      popup.open();\n    }\n  });\n  const getTemplate = channelViewModel => {\n    return `\n              <li>\n                <a href=\"/admin/channel/show/${channelViewModel.channel._id}\" class=\"item-link\">\n                  <div class=\"item-content\">\n                    <div class=\"item-media\">\n                      ${channelViewModel.coverImage ? `\n                        <img src=\"${channelViewModel.coverImage.url}\" class=\"avatar\" alt=\"Channel cover image\" />\n                      ` : `\n                        <i class=\"material-icons avatar\">image</i>\n                      `}\n                    </div>\n                    <div class=\"item-inner\">\n                      <div class=\"item-title-row\">\n                        <div class=\"item-title\">\n                          ${channelViewModel.channel.title}                          \n                        </div>\n                        <div class=\"item-after\"><span class=\"badge\">${channelViewModel.itemCount}</span></div>\n                      </div>\n\n                      ${channelViewModel.authorDisplayName ? `\n                        <div class=\"item-subtitle\">\n                          By ${channelViewModel?.authorDisplayName}\n                        </div>\n                      ` : ``}\n\n                      <div class=\"description item-text empty\" data-id=\"${channelViewModel.channel._id}\"></div>\n                    \n                    </div>\n                  </div>\n                </a>\n              </li>\n          `;\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-posts\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n    <div class=\"fab fab-extended fab-right-bottom\">\n      <a href=\"/admin/channel/create-menu\">\n        <i class=\"material-icons\">create</i>\n        <div class=\"fab-text\">Create & Import</div>\n      </a>\n    </div>\n\n\n    <div class=\"page-content infinite-scroll-content hide-toolbar-on-scroll\" @infinite=${infiniteScroll} id=\"channel-index-infinite-scroll\">\n\n      <div class=\"fixed-width-content center\">\n\n        <div class=\"popup welcome-popup\">\n          <div class=\"view\">\n            <div class=\"page\">\n              <div class=\"navbar\">\n                <div class=\"navbar-bg\"></div>\n                <div class=\"navbar-inner\">\n                  <div class=\"title\">Welcome and thank you for using Large!</div>\n                  <div class=\"right\">\n                    <!-- Link to close popup -->\n                    <a class=\"link popup-close\">Close</a>\n                  </div>\n                </div>\n              </div>\n              <div class=\"page-content\">\n\n                <div class=\"block\">\n                  <strong>All data</strong> is in local storage (IndexedDB) in your browser and we can NEVER retreive it for you if it is lost. We do not have it and this is by design. \n              \n                  <p>\n                    Some browsers <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria\">impose limitations</a> on how long data is stored before it is wiped due to inactivity. \n                    Installing Large NFT to your home screeen as a PWA makes it <a href=\"https://stackoverflow.com/questions/50795409/is-indexeddb-on-safari-guaranteed-to-be-persistent\">less likely</a> for data to be lost but ultimately it's up to the browser. Publish critical data to GitHub/GitLab.\n                  </p>\n        \n                  <p>Help make Large better by submitting bugs and feedback on <a href=\"https://github.com/LargeNFT/large-nft\" class=\"external\">GitHub</a>.</p>\n          \n                </div>\n\n                \n              </div>\n            </div>\n          </div>\n        </div>\n  \n\n        <div class=\"card\">\n          <div class=\"card-content card-content-padding\">\n            Visit the <a href=\"/admin/settings\">settings</a> to configure an AI provider, Git provider, and more.\n          </div>\n        </div>\n\n  \n        <div class=\"list list-strong list-dividers media-list virtual-list inset\" id=\"channel-index-list\">\n        </div>\n  \n        <div class=\"preloader infinite-scroll-preloader\"></div>\n\n      </div>\n\n\n    </div>\n\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '61c6243739';\nframework7Component.style = `\n\n\n`;\nexport default framework7Component;","export default [ \n    'English',\n    'Abkhazian',\n    'Afar',\n    'Afrikaans',\n    'Akan',\n    'Albanian',\n    'Amharic',\n    'Arabic',\n    'Aragonese',\n    'Armenian',\n    'Assamese',\n    'Avaric',\n    'Avestan',\n    'Aymara',\n    'Azerbaijani',\n    'Bambara',\n    'Bashkir',\n    'Basque',\n    'Belarusian',\n    'Bengali',\n    'Bihari languages',\n    'Bislama',\n    'Bosnian',\n    'Breton',\n    'Bulgarian',\n    'Burmese',\n    'Catalan, Valencian',\n    'Central Khmer',\n    'Chamorro',\n    'Chechen',\n    'Chichewa, Chewa, Nyanja',\n    'Chinese',\n    'Church Slavonic, Old Bulgarian, Old Church Slavonic',\n    'Chuvash',\n    'Cornish',\n    'Corsican',\n    'Cree',\n    'Croatian',\n    'Czech',\n    'Danish',\n    'Divehi, Dhivehi, Maldivian',\n    'Dutch, Flemish',\n    'Dzongkha',\n    'Esperanto',\n    'Estonian',\n    'Ewe',\n    'Faroese',\n    'Fijian',\n    'Finnish',\n    'French',\n    'Fulah',\n    'Gaelic, Scottish Gaelic',\n    'Galician',\n    'Ganda',\n    'Georgian',\n    'German',\n    'Gikuyu, Kikuyu',\n    'Greek (Modern)',\n    'Greenlandic, Kalaallisut',\n    'Guarani',\n    'Gujarati',\n    'Haitian, Haitian Creole',\n    'Hausa',\n    'Hebrew',\n    'Herero',\n    'Hindi',\n    'Hiri Motu',\n    'Hungarian',\n    'Icelandic',\n    'Ido',\n    'Igbo',\n    'Indonesian',\n    'Interlingua (International Auxiliary Language Association)',\n    'Interlingue',\n    'Inuktitut',\n    'Inupiaq',\n    'Irish',\n    'Italian',\n    'Japanese',\n    'Javanese',\n    'Kannada',\n    'Kanuri',\n    'Kashmiri',\n    'Kazakh',\n    'Kinyarwanda',\n    'Komi',\n    'Kongo',\n    'Korean',\n    'Kwanyama, Kuanyama',\n    'Kurdish',\n    'Kyrgyz',\n    'Lao',\n    'Latin',\n    'Latvian',\n    'Letzeburgesch, Luxembourgish',\n    'Limburgish, Limburgan, Limburger',\n    'Lingala',\n    'Lithuanian',\n    'Luba-Katanga',\n    'Macedonian',\n    'Malagasy',\n    'Malay',\n    'Malayalam',\n    'Maltese',\n    'Manx',\n    'Maori',\n    'Marathi',\n    'Marshallese',\n    'Moldovan, Moldavian, Romanian',\n    'Mongolian',\n    'Nauru',\n    'Navajo, Navaho',\n    'Northern Ndebele',\n    'Ndonga',\n    'Nepali',\n    'Northern Sami',\n    'Norwegian',\n    'Norwegian Bokmål',\n    'Norwegian Nynorsk',\n    'Nuosu, Sichuan Yi',\n    'Occitan (post 1500)',\n    'Ojibwa',\n    'Oriya',\n    'Oromo',\n    'Ossetian, Ossetic',\n    'Pali',\n    'Panjabi, Punjabi',\n    'Pashto, Pushto',\n    'Persian',\n    'Polish',\n    'Portuguese',\n    'Quechua',\n    'Romansh',\n    'Rundi',\n    'Russian',\n    'Samoan',\n    'Sango',\n    'Sanskrit',\n    'Sardinian',\n    'Serbian',\n    'Shona',\n    'Sindhi',\n    'Sinhala, Sinhalese',\n    'Slovak',\n    'Slovenian',\n    'Somali',\n    'Sotho, Southern',\n    'South Ndebele',\n    'Spanish, Castilian',\n    'Sundanese',\n    'Swahili',\n    'Swati',\n    'Swedish',\n    'Tagalog',\n    'Tahitian',\n    'Tajik',\n    'Tamil',\n    'Tatar',\n    'Telugu',\n    'Thai',\n    'Tibetan',\n    'Tigrinya',\n    'Tonga (Tonga Islands)',\n    'Tsonga',\n    'Tswana',\n    'Turkish',\n    'Turkmen',\n    'Twi',\n    'Uighur, Uyghur',\n    'Ukrainian',\n    'Urdu',\n    'Uzbek',\n    'Venda',\n    'Vietnamese',\n    'Volap_k',\n    'Walloon',\n    'Welsh',\n    'Western Frisian',\n    'Wolof',\n    'Xhosa',\n    'Yiddish',\n    'Yoruba',\n    'Zhuang, Chuang',\n    'Zulu' \n  ]\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { QuillService } from \"../../../service/quill-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { UploadService } from \"../../../service/core/upload-service\";\nimport { ImageService } from \"../../../service/image-service\";\nimport { WalletService } from \"../../../service/core/wallet-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport languages from \"../../../util/languages\";\nimport Tagify from '@yaireo/tagify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ethers } from \"ethers\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let walletService = ContainerService.getWalletService();\n  let uiService = ContainerService.getInstance(UiService);\n  let channelService = ContainerService.getInstance(ChannelService);\n  let uploadService = ContainerService.getInstance(UploadService);\n  let imageService = ContainerService.getInstance(ImageService);\n  const setMintPrice = value => {\n    //Reset\n    mintPrice = undefined;\n    mintPriceWei = undefined;\n    if (!value) return;\n    let wei = ethers.parseUnits(value, 'ether');\n    try {\n      mintPrice = ethers.formatUnits(wei);\n      mintPriceWei = wei.toString();\n    } catch (ex) {\n      console.log(ex);\n    }\n  };\n\n  // const setRoyalty = (value) => {\n\n  //     channelViewModel.channel.sellerFeeBasisPoints = undefined\n  //     channelViewModel.channel.royaltyPercent = undefined\n\n  //     if (value) {\n  //         channelViewModel.channel.royaltyPercent = value\n  //         channelViewModel.channel.sellerFeeBasisPoints = parseInt(value * 100)\n  //     }\n\n  // }\n\n  const mintPriceChange = async e => {\n    setMintPrice(e.currentTarget.value);\n    await $update();\n  };\n\n  // const royaltyChange = async (e) => {\n  //     setRoyalty(e.currentTarget.value)\n  //     await $update()\n  // }\n\n  const contractAddressChange = async e => {\n    channelViewModel.channel.contractAddress = e.currentTarget.value;\n    await $update();\n  };\n  const handleCoverImageBrowseClick = async e => {\n    $(\"#cover-image-browse\").click();\n  };\n  const handleCoverImageChange = async e => {\n    let imageBuffer = await uploadService.uploadFile(document.getElementById('cover-image-browse'));\n    let coverImage = await imageService.newFromBuffer(imageBuffer);\n    const coverImageUpdatedEvent = new CustomEvent('cover-image-updated', {\n      detail: {\n        coverImage: coverImage\n      }\n    });\n    document.dispatchEvent(coverImageUpdatedEvent);\n    channelViewModel.coverImage = {\n      cid: coverImage.cid,\n      url: await imageService.getUrl(coverImage)\n    };\n    await $update();\n  };\n  const handleBannerBrowseClick = async e => {\n    $(\"#banner-browse\").click();\n  };\n  const handleBannerChange = async e => {\n    let imageBuffer = await uploadService.uploadFile(document.getElementById('banner-browse'));\n    let coverBanner = await imageService.newFromBuffer(imageBuffer);\n    const coverBannerUpdatedEvent = new CustomEvent('cover-banner-updated', {\n      detail: {\n        coverBanner: coverBanner\n      }\n    });\n    document.dispatchEvent(coverBannerUpdatedEvent);\n    channelViewModel.coverBanner = {\n      cid: coverBanner.cid,\n      url: await imageService.getUrl(coverBanner)\n    };\n    await $update();\n  };\n  const safeCSSId = text => {\n    return encodeURIComponent(text).toLowerCase().replace(/\\.|%[0-9a-z]{2}/gi, '');\n  };\n  const disableForksChange = async e => {\n    channelViewModel.channel.disableForks = $(e.currentTarget).val() == \"true\";\n    showCC0Link = !channelViewModel.channel.disableForks;\n    await $update();\n  };\n  const showMintChange = async e => {\n    channelViewModel.channel.showMintPage = $(e.currentTarget).val() == \"true\";\n    await $update();\n  };\n  const showActivityChange = async e => {\n    channelViewModel.channel.showActivityPage = $(e.currentTarget).val() == \"true\";\n    await $update();\n  };\n  const gitProviderChange = async e => {\n    channelViewModel.channel.gitProvider = $(e.currentTarget).val();\n    await $update();\n  };\n  const editCategory = async function (e) {\n    e.preventDefault();\n    let id = $(e.target).data('id');\n    let category = attributeOptions.find(ao => ao.id == id);\n    $f7.form.fillFromData('#save-attribute-form', category);\n    await $update();\n    $f7.popup.open('.edit-category-popup');\n  };\n  const deleteOptionClick = async e => {\n    e.preventDefault();\n    let id = $(e.currentTarget).data('id');\n    attributeOptions = attributeOptions.filter(ao => ao.id != id);\n    await $update();\n  };\n  const addCategoryClick = async e => {\n    let category = {\n      id: uuidv4(),\n      traitType: '',\n      values: []\n    };\n    $f7.form.fillFromData('#save-attribute-form', category);\n    await $update();\n    $f7.popup.open('.edit-category-popup');\n  };\n  const addAttributeSubmit = async e => {\n    e.preventDefault();\n    $f7.popup.close('.edit-category-popup');\n  };\n  const editExternalLink = async function (e) {\n    e.preventDefault();\n    let id = $(e.target).data('id');\n    let externalLink = externalLinks.find(el => el.id == id);\n    $f7.form.fillFromData('#save-external-links-form', externalLink);\n    await $update();\n    $f7.popup.open('.edit-external-links-popup');\n  };\n  const deleteExternalLink = async e => {\n    e.preventDefault();\n    let id = $(e.currentTarget).data('id');\n    console.log(id);\n    externalLinks = externalLinks.filter(el => el.id != id);\n    await $update();\n  };\n  const addExternalLinkClick = async e => {\n    let externalLink = {\n      id: uuidv4(),\n      name: '',\n      link: ''\n    };\n    $f7.form.fillFromData('#save-external-links-form', externalLink);\n    await $update();\n    $f7.popup.open('.edit-external-links-popup');\n  };\n  const addExternalLinkSubmit = async e => {\n    e.preventDefault();\n    $f7.popup.close('.edit-external-links-popup');\n  };\n  const editMarketplace = async function (e) {\n    e.preventDefault();\n    let id = $(e.target).data('id');\n    let marketplace = marketplaces.find(el => el.id == id);\n    $f7.form.fillFromData('#save-marketplaces-form', marketplace);\n    await $update();\n    $f7.popup.open('.edit-marketplaces-popup');\n  };\n  const deleteMarketplace = async e => {\n    e.preventDefault();\n    let id = $(e.currentTarget).data('id');\n    marketplaces = marketplaces.filter(m => m.id != id);\n    await $update();\n  };\n  const addMarketplaceClick = async e => {\n    let marketplace = {\n      id: uuidv4(),\n      name: '',\n      link: ''\n    };\n    $f7.form.fillFromData('#save-marketplaces-form', marketplace);\n    await $update();\n    $f7.popup.open('.edit-marketplaces-popup');\n  };\n  const addMarketplaceSubmit = async e => {\n    e.preventDefault();\n    $f7.popup.close('.edit-marketplaces-popup');\n  };\n  $(document).on('popup:closed', '.edit-category-popup', async e => {\n    let data = $f7.form.convertToData('#save-attribute-form');\n    let category = {\n      id: data.id,\n      traitType: data.traitType,\n      values: data.values ? JSON.parse(data.values).map(v => v[\"value\"]) : []\n    };\n    if (!category.traitType) return;\n    let existing = attributeOptions.find(ao => ao.id == category.id);\n    if (existing) {\n      Object.assign(existing, category);\n    } else {\n      attributeOptions.push(category);\n    }\n    await $update();\n  });\n  $(document).on('popup:open', '.edit-category-popup', async e => {\n    new Tagify(document.getElementById(`options-input`));\n    $('input[name=\"traitType\"]').focus();\n  });\n  $(document).on('popup:closed', '.edit-external-links-popup', async e => {\n    let data = $f7.form.convertToData('#save-external-links-form');\n    if (data.name) {\n      let externalLink = {\n        id: data.id,\n        name: data.name,\n        link: data.link\n      };\n      let existing = externalLinks.find(el => el.id == externalLink.id);\n      if (existing) {\n        Object.assign(existing, externalLink);\n      } else {\n        externalLinks.push(externalLink);\n      }\n    }\n    await $update();\n  });\n  $(document).on('popup:closed', '.edit-marketplaces-popup', async e => {\n    let data = $f7.form.convertToData('#save-marketplaces-form');\n    if (data.name) {\n      let marketplace = {\n        id: data.id,\n        name: data.name,\n        link: data.link\n      };\n      let existing = marketplaces.find(el => el.id == marketplace.id);\n      if (existing) {\n        Object.assign(existing, marketplace);\n      } else {\n        marketplaces.push(marketplace);\n      }\n    }\n    await $update();\n  });\n  let channelViewModel = props.channel;\n  let descriptionToolbarId = props.description_toolbar;\n  let descriptionEditorId = props.description_editor;\n  let licenseToolbarId = props.license_toolbar;\n  let licenseEditorId = props.license_editor;\n  let showCC0Link = !channelViewModel.channel.disableForks;\n  let attributeOptions = [];\n  let externalLinks = [];\n  let marketplaces = [];\n  let mintPrice;\n  let mintPriceWei;\n\n  //Set values if passed in\n  if (channelViewModel) {\n    setMintPrice(channelViewModel.channel.mintPrice);\n    // setRoyalty(channelViewModel.channel.royaltyPercent)\n\n    if (channelViewModel?.channel?.attributeOptions?.length > 0) {\n      attributeOptions = channelViewModel.channel.attributeOptions;\n    }\n    if (channelViewModel.channel.externalLinks?.length > 0) {\n      externalLinks = channelViewModel.channel.externalLinks;\n    }\n    if (channelViewModel.channel.marketplaces?.length > 0) {\n      marketplaces = channelViewModel.channel.marketplaces;\n    }\n  }\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div>\n        <input type=\"hidden\" name=\"_id\" value=\"${channelViewModel?.channel?._id}\" />\n        <input type=\"hidden\" name=\"_rev\" value=\"${channelViewModel?.channel?._rev}\" />\n        <input type=\"hidden\" name=\"dateCreated\" value=\"${channelViewModel?.channel?.dateCreated}\" />\n        <input type=\"hidden\" name=\"authorId\" value=\"${channelViewModel?.channel?.authorId}\" />\n        <input type=\"hidden\" name=\"contractAddress\" value=\"${channelViewModel?.channel?.contractAddress}\" />\n\n        <div class=\"card\">\n            <div class=\"card-content\">\n                <div class=\"card-content card-content-padding\">\n                    <div class=\"list media-list\">\n                        <ul>\n                            <li>\n                                <div class=\"item-content item-input\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title item-label\">Title</div>\n                                        <div class=\"item-input-wrap\">\n                                            ${channelViewModel.editable ? $h`\n                                            <input type=\"text\" name=\"title\" placeholder=\"Collection title\"\n                                                value=\"${channelViewModel?.channel?.title}\" required minlength=\"3\"\n                                                tabindex=\"1\" id=\"collection-title\" />\n                                            ` : $h`\n                                            <input type=\"text\" name=\"title\" placeholder=\"Collection title\"\n                                                value=\"${channelViewModel?.channel?.title}\" required minlength=\"3\"\n                                                tabindex=\"1\" id=\"collection-title\" disabled />\n                                            `}\n                                        </div>\n                                    </div>\n                                </div>\n                            </li>\n    \n                            <li>\n                                <div class=\"item-content item-input\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title item-label\">Symbol</div>\n                                        <div class=\"item-input-wrap\">\n    \n                                            ${channelViewModel.editable ? $h`\n                                            <input type=\"text\" name=\"symbol\" placeholder=\"Symbol (eg BAYC)\"\n                                                value=\"${channelViewModel?.channel?.symbol}\" tabindex=\"2\"\n                                                required id=\"collection-symbol\" />\n                                            ` : $h`\n                                            <input type=\"text\" name=\"symbol\" placeholder=\"Symbol (eg BAYC)\"\n                                                value=\"${channelViewModel?.channel?.symbol}\" tabindex=\"2\" required\n                                                disabled id=\"collection-symbol\" />\n                                            `}\n    \n    \n    \n                                        </div>\n                                    </div>\n                                </div>\n                            </li>\n    \n                            <li>\n                                <div class=\"item-content item-input\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title item-label\">Description</div>\n    \n                                        <div id=\"${descriptionToolbarId}\">\n    \n                                            <select class=\"ql-header\">\n                                                <option selected></option>\n                                                <option value=\"1\">Heading</option>\n                                                <option value=\"2\">Subheading</option>\n                                                <option value=\"3\">Normal</option>\n                                            </select>\n    \n    \n                                            <!-- Add a bold button -->\n                                            <button class=\"ql-bold\"></button>\n                                            <button class=\"ql-italic\"></button>\n                                            <button class=\"ql-strike\"></button>\n                                            <button class=\"ql-underline\"></button>\n    \n                                        </div>\n    \n                                        <div class=\"editor bg-color-white text-color-black channel-editor\"\n                                            id=\"${descriptionEditorId}\" tabindex=\"3\"></div>\n    \n                                    </div>\n                                </div>\n                            </li>\n    \n                            <li class=\"item-content item-input\">\n                                <div class=\"item-inner\">\n                                    <div class=\"item-title item-label\">Language</div>\n                                    <!-- additional \"input-dropdown-wrap\" class -->\n                                    <div class=\"item-input-wrap input-dropdown-wrap\">\n                                        <select name=\"language\" tabindex=\"9\">\n                                            ${languages.map( language => $h`\n                                            ${channelViewModel?.channel?.language == language ? $h`\n                                            <option value=\"${language}\" selected>${language}</option>\n                                            ` : $h`\n                                            <option value=\"${language}\">${language}</option>\n                                            `}\n                                            `)}\n                                        </select>\n                                    </div>\n                                </div>\n                            </li>\n    \n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card\">\n            <div class=\"card-content\">\n                <div class=\"list media-list\">\n                    <ul>\n\n                        <li>\n                            <a class=\"item-link\" data-popup=\".edit-images-popup\" class=\"popup-open\">\n                              <div class=\"item-content\">\n                                <div class=\"item-media\">                                    \n                                    <i class=\"f7-icons\">photo</i>\n                                </div>\n                                <div class=\"item-inner\">\n                                  <div class=\"item-title-row\">\n                                    <div class=\"item-title\">Cover Image & Banner</div>\n                                  </div>\n                                  <div class=\"item-subtitle\">Add a cover image and banner.</div>\n                                </div>\n                              </div>\n                            </a>\n                        </li>\n\n                        <li>\n                            <a class=\"item-link\" data-popup=\".edit-attributes-popup\" class=\"popup-open\">\n                              <div class=\"item-content\">\n                                <div class=\"item-media\">                                    \n                                    <i class=\"f7-icons\">line_horizontal_3_decrease</i>\n                                </div>\n                                <div class=\"item-inner\">\n                                  <div class=\"item-title-row\">\n                                    <div class=\"item-title\">Attributes</div>\n                                  </div>\n                                  <div class=\"item-subtitle\">\n                                    Add attributes to give specific items special properties. Items can be sorted and filtered by attribute and each attribute type gets a token owner leaderboard.\n                                  </div>\n                                </div>\n                              </div>\n                            </a>\n                        </li>\n\n\n                        <li>\n                            <a class=\"item-link\" data-popup=\".edit-mint-info-popup\" class=\"popup-open\">\n                              <div class=\"item-content\">\n                                <div class=\"item-media\">                                    \n                                    <i class=\"f7-icons\">hammer</i>\n                                </div>\n                                <div class=\"item-inner\">\n                                  <div class=\"item-title-row\">\n                                    <div class=\"item-title\">Mint & Contract Info</div>\n                                  </div>\n                                  <div class=\"item-subtitle\">\n                                    Set mint price and contract info.\n                                  </div>\n                                </div>\n                              </div>\n                            </a>\n                        </li>\n\n\n                        <li>\n                            <a class=\"item-link\" data-popup=\".edit-licensing-popup\" class=\"popup-open\">\n                              <div class=\"item-content\">\n                                <div class=\"item-media\">                                    \n                                    <i class=\"f7-icons\">doc_text</i>\n                                </div>\n                                <div class=\"item-inner\">\n                                  <div class=\"item-title-row\">\n                                    <div class=\"item-title\">Features & Licensing</div>\n                                  </div>\n                                  <div class=\"item-subtitle\">\n                                    Add copyleft or copyright information.\n                                  </div>\n                                </div>\n                              </div>\n                            </a>\n                        </li>\n\n\n                        <li>\n                            <a class=\"item-link\" data-popup=\".edit-production-config-popup\" class=\"popup-open\">\n                              <div class=\"item-content\">\n                                <div class=\"item-media\">                                    \n                                    <i class=\"f7-icons\">gear</i>\n                                </div>\n                                <div class=\"item-inner\">\n                                  <div class=\"item-title-row\">\n                                    <div class=\"item-title\">Configure Large Reader</div>\n                                  </div>\n                                  <div class=\"item-subtitle\">\n                                    Configure production deployment details and set up marketplaces and external links like Twitter and Discord.\n                                  </div>\n                                </div>\n                              </div>\n                            </a>\n                        </li>\n\n                    </ul>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"popup edit-category-popup\">\n            <div class=\"view\">\n                <div class=\"page\">\n                    <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                            <div class=\"title\">Edit Attribute Type</div>\n                            <div class=\"right\">\n                                <!-- Link to close popup -->\n                                <a class=\"link popup-close\">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"page-content\">\n\n                        <form @submit=\"${addAttributeSubmit}\" id=\"save-attribute-form\">\n                            <input type=\"hidden\" name=\"id\" />\n\n                            <div class=\"list list-strong\">\n\n                                <ul>\n                                    <li>\n                                        <div class=\"item-content item-input\">\n                                            <div class=\"item-inner\">\n                                                <div class=\"item-title item-label\">Trait Type</div>\n                                                <div class=\"item-input-wrap\">\n                                                    <input type=\"text\" name=\"traitType\" placeholder=\"Enter trait type\"\n                                                        required minlength=\"3\" tabindex=\"20\" />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </li>\n\n                                    <li>\n                                        <div class=\"item-content item-input\">\n                                            <div class=\"item-inner\">\n                                                <div class=\"item-title item-label\">Options</div>\n                                                <div class=\"item-input-wrap\">\n                                                    <input type=\"text\" placeholder=\"Enter options\" name=\"values\"\n                                                        id=\"options-input\" tabindex=\"21\" />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </li>\n                                </ul>\n                            </div>\n                        </form>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"popup edit-external-links-popup\">\n            <div class=\"view\">\n                <div class=\"page\">\n                    <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                            <div class=\"title\">Edit External Link</div>\n                            <div class=\"right\">\n                                <!-- Link to close popup -->\n                                <a class=\"link popup-close\">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"page-content\">\n\n                        <form @submit=\"${addExternalLinkSubmit}\" id=\"save-external-links-form\">\n\n                            <input type=\"hidden\" name=\"id\" />\n\n                            <div class=\"list list-strong\">\n\n                                <ul>\n                                    <li>\n                                        <div class=\"item-content item-input\">\n                                            <div class=\"item-inner\">\n                                                <div class=\"item-title item-label\">Name</div>\n                                                <div class=\"item-input-wrap\">\n                                                    <input type=\"text\" name=\"name\" placeholder=\"Enter link text\" required minlength=\"3\" tabindex=\"60\" />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </li>\n\n                                    <li>\n                                        <div class=\"item-content item-input\">\n                                            <div class=\"item-inner\">\n                                                <div class=\"item-title item-label\">Link</div>\n                                                <div class=\"item-input-wrap\">\n                                                    <input type=\"text\" placeholder=\"http://some-url.com\" name=\"link\" tabindex=\"61\" required />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </li>\n                                </ul>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"popup edit-marketplaces-popup\">\n            <div class=\"view\">\n                <div class=\"page\">\n                    <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                            <div class=\"title\">Edit Marketplaces</div>\n                            <div class=\"right\">\n                                <!-- Link to close popup -->\n                                <a class=\"link popup-close\">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"page-content\">\n\n                        <form @submit=\"${addMarketplaceSubmit}\" id=\"save-marketplaces-form\">\n\n                            <input type=\"hidden\" name=\"id\" />\n\n                            <div class=\"list list-strong\">\n\n                                <ul>\n                                    <li>\n                                        <div class=\"item-content item-input\">\n                                            <div class=\"item-inner\">\n                                                <div class=\"item-title item-label\">Name</div>\n                                                <div class=\"item-input-wrap\">\n\n                                                    <!-- <select name=\"name\">\n                                                        <option value=\"OpenSea\">OpenSea</option>\n                                                        <option value=\"LooksRare\">LooksRare</option>\n                                                        <option value=\"Blur\">Blur</option>\n                                                    </select> -->\n\n                                                    <input type=\"text\" name=\"name\" placeholder=\"Enter marketplace name\" required minlength=\"3\" tabindex=\"60\" />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </li>\n\n                                    <li>\n                                        <div class=\"item-content item-input\">\n                                            <div class=\"item-inner\">\n                                                <div class=\"item-title item-label\">Link</div>\n                                                <div class=\"item-input-wrap\">\n                                                    <input type=\"text\" placeholder=\"http://some-url.com\" name=\"link\" tabindex=\"61\" required />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </li>\n                                </ul>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"popup edit-images-popup\">\n            <div class=\"view\">\n                <div class=\"page\">\n                    <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                            <div class=\"title\">Edit Cover Image & Banner</div>\n                            <div class=\"right\">\n                                <!-- Link to close popup -->\n                                <a class=\"link popup-close\">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"page-content\">\n                        <div class=\"list\">\n                            <ul>\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Collection Avatar</div>\n                                            <div class=\"item-input-wrap\">\n\n                                                ${channelViewModel.coverImage ? $h`\n                                                <img class=\"avatar-preview\" src=\"${channelViewModel?.coverImage.url}\" alt=\"Collection avatar\" />\n\n                                                ` : $h`\n                                                <i class=\"material-icons avatar-preview\">image</i>\n                                                `}\n\n                                                <input type=\"button\" class=\"button button-fill browse-file\"\n                                                    value=\"Browse\" @click=\"${handleCoverImageBrowseClick}\"\n                                                    tabindex=\"4\" />\n                                                <input type=\"hidden\" name=\"coverImageId\"\n                                                    value=\"${channelViewModel?.coverImage?.cid}\" />\n                                                <input type=\"file\" id=\"cover-image-browse\" style=\"display: none\"\n                                                    @change=\"${handleCoverImageChange}\" />\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Collection Banner</div>\n                                            <div class=\"item-input-wrap\">\n\n                                                ${channelViewModel?.coverBanner ? $h`\n                                                <img class=\"cover-banner-preview\"\n                                                    src=\"${channelViewModel?.coverBanner.url}\" />\n                                                ` : $h`\n                                                <i class=\"material-icons cover-banner-preview\">image</i>\n                                                `}\n\n                                                <input type=\"button\" class=\"button button-fill browse-file\"\n                                                    value=\"Browse\" @click=\"${handleBannerBrowseClick}\" tabindex=\"5\" />\n                                                <input type=\"hidden\" name=\"coverBannerId\"\n                                                    value=\"${channelViewModel?.coverBanner?.cid}\" />\n\n                                                <input type=\"file\" id=\"banner-browse\" style=\"display: none\"\n                                                    @change=\"${handleBannerChange}\" />\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"popup edit-attributes-popup\">\n            <div class=\"view\">\n                <div class=\"page\">\n                    <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                            <div class=\"title\">Edit Attributes</div>\n                            <div class=\"right\">\n                                <!-- Link to close popup -->\n                                <a class=\"link popup-close\">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"page-content\">\n\n                        <div class=\"block\">\n\n                            ${attributeOptions?.length > 0 ? $h`\n\n                                <ul>\n        \n                                    ${attributeOptions?.map( (ao) => $h`\n                                    <li>\n                                        <span style=\"width: 100px; margin-right: 10px;\">${ao.traitType}</span>\n        \n                                        ${channelViewModel.editable ? $h`\n                                        <a class=\"link\" href=\"#\" data-id=\"${ao.id}\" @click=\"${editCategory}\">Edit</a> | <a\n                                            class=\"link\" href=\"#\" data-id=\"${ao.id}\" @click=\"${deleteOptionClick}\">Delete</a>\n                                        ` : $h` `}\n        \n                                        <p>\n                                            ${ao.values?.map( (v,index) => $h`\n        \n                                        <div class=\"chip chip-outline\">\n                                            <div class=\"chip-label\">${v}</div>\n                                        </div>\n        \n                                        `)}\n                                        </p>\n                                    </li>\n                                    `)}\n        \n                                </ul>\n    \n                            ` : $h`\n                                No attributes exist.\n                            `}\n        \n                            ${channelViewModel.editable ? $h`\n                                <a class=\"button button-outline add-category-button\" @click=\"${addCategoryClick}\" tabindex=\"10\">Add Attribute Type</a>\n                            ` : $h` `}\n\n                            \n    \n                            <input type=\"hidden\" name=\"attributeOptions\" value=\"${JSON.stringify(attributeOptions)}\" />\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"popup edit-mint-info-popup\">\n            <div class=\"view\">\n                <div class=\"page\">\n                    <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                            <div class=\"title\">Edit Mint Info</div>\n                            <div class=\"right\">\n                                <!-- Link to close popup -->\n                                <a class=\"link popup-close\">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"page-content\">\n                        <div class=\"list\">\n                            <ul>\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Mint Price in ETH</div>\n                                            <div class=\"item-input-wrap\">\n\n                                                ${channelViewModel.editable ? $h`\n                                                <input type=\"number\" placeholder=\"Enter price for one piece (eg 0.08)\"\n                                                    @change=\"${mintPriceChange}\" step=\"any\" tabindex=\"11\"\n                                                    value=\"${channelViewModel?.channel?.mintPrice}\" />\n                                                ` : $h`\n                                                <input type=\"number\" placeholder=\"Enter price for one piece (eg 0.08)\"\n                                                    @change=\"${mintPriceChange}\" step=\"any\" tabindex=\"11\"\n                                                    value=\"${channelViewModel?.channel?.mintPrice}\" disabled />\n                                                `}\n\n                                                <input type=\"hidden\" name=\"mintPrice\" value=\"${mintPrice}\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n\n                                ${mintPrice ? $h`\n                                <li tabindex=\"-1\">\n                                    <div class=\"item-content\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-text\"> You will receive <strong>${mintPrice}</strong> ETH\n                                                (${mintPriceWei} wei) for\n                                                each mint.</div>\n                                        </div>\n                                    </div>\n                                </li>\n                                ` : $h``}\n\n                                \n\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Contract Address</div>\n                                            <div class=\"item-input-wrap\">\n\n                                                <input type=\"text\" name=\"contractAddress\" placeholder=\"Leave blank to deploy a new contract during export.\"\n                                                    @change=\"${contractAddressChange}\" tabindex=\"13\"\n                                                    value=\"${channelViewModel?.channel?.contractAddress}\" />\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n                                \n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"popup edit-licensing-popup\">\n            <div class=\"view\">\n                <div class=\"page\">\n                    <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                            <div class=\"title\">Edit Features & Licensing</div>\n                            <div class=\"right\">\n                                <!-- Link to close popup -->\n                                <a class=\"link popup-close\">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"page-content\">\n                        <div class=\"list\">\n                            <ul>\n                                <li class=\"item-content item-input\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title item-label\">Features and Licensing</div>\n                                        <div class=\"item-input-wrap input-dropdown-wrap\">\n                                            <select name=\"disableForks\" @change=\"${disableForksChange}\">\n\n                                                ${!channelViewModel.channel.disableForks ? $h`\n                                                <option value=\"false\" selected>Copyleft / CC0</option>\n                                                <option value=\"true\">Copyright</option>\n                                                ` : $h`\n                                                <option value=\"false\">Copyleft / CC0</option>\n                                                <option value=\"true\" selected>Copyright</option>\n                                                `}\n\n\n                                            </select>\n                                        </div>\n                                    </div>\n                                </li>\n\n                                ${!channelViewModel.channel.disableForks ? $h`\n\n                                <li>\n                                    <div class=\"item-content\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-text\">Use Creative Commons <a\n                                                    href=\"https://creativecommons.org/choose/zero/\" class=\"external\"\n                                                    target=\"_blank\">CC0 tool</a> to generate licensing text.</div>\n                                        </div>\n                                    </div>\n                                </li>\n\n                                ` : $h`<span />`}\n\n\n\n                                <li class=\"license-editor\">\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">License</div>\n\n                                            <div id=\"${licenseToolbarId}\">\n\n                                                <!-- Add a bold button -->\n                                                <button class=\"ql-bold\"></button>\n                                                <button class=\"ql-italic\"></button>\n                                                <button class=\"ql-strike\"></button>\n                                                <button class=\"ql-underline\"></button>\n\n                                            </div>\n\n                                            <div class=\"editor bg-color-white text-color-black channel-editor\"\n                                                id=\"${licenseEditorId}\" tabindex=\"13\"></div>\n\n                                        </div>\n                                    </div>\n                                </li>\n\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"popup edit-production-config-popup\">\n            <div class=\"view\">\n                <div class=\"page\">\n                    <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                            <div class=\"title\">Configure Large Reader</div>\n                            <div class=\"right\">\n                                <!-- Link to close popup -->\n                                <a class=\"link popup-close\">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"page-content\">\n                        <div class=\"list\">\n                            <ul>\n\n                                <li class=\"item-content item-input\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title item-label\">Git Provider</div>\n                                        <div class=\"item-input-wrap input-dropdown-wrap\">\n                                            <select name=\"gitProvider\" @change=\"${gitProviderChange}\" tabindex=\"14\">\n\n                                                ${!channelViewModel.channel.gitProvider ||\n                                                channelViewModel.channel.gitProvider == \"default\" ? $h`\n                                                <option value=\"default\" selected>Default</option>\n                                                ` : $h`\n                                                <option value=\"default\">Default</option>\n                                                `}\n\n                                                ${channelViewModel.channel.gitProvider == \"github\" ? $h`\n                                                <option value=\"github\" selected>GitHub</option>\n                                                ` : $h`\n                                                <option value=\"github\">GitHub</option>\n                                                `}\n\n\n                                                ${channelViewModel.channel.gitProvider == \"gitlab\" ? $h`\n                                                <option value=\"gitlab\" selected>GitLab</option>\n                                                ` : $h`\n                                                <option value=\"gitlab\">GitLab</option>\n                                                `}\n\n\n                                            </select>\n                                        </div>\n                                    </div>\n                                </li>\n\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Production Hostname</div>\n                                            <div class=\"item-input-wrap\">\n                                                <input type=\"text\" name=\"productionHostname\" placeholder=\"http://localhost\" value=\"${channelViewModel?.channel?.productionHostname}\" tabindex=\"40\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Production Base URI</div>\n                                            <div class=\"item-input-wrap\">\n                                                <input type=\"text\" name=\"productionBaseURI\" placeholder=\"/\" value=\"${channelViewModel?.channel?.productionBaseURI}\" tabindex=\"41\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n\n\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Production Base Library URI</div>\n                                            <div class=\"item-input-wrap\">\n                                                <input type=\"text\" name=\"productionBaseLibraryURI\" placeholder=\"/\" value=\"${channelViewModel?.channel?.productionBaseLibraryURI}\" tabindex=\"42\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Show Mint Page?</div>\n                                            <div class=\"item-input-wrap\">\n\n                                                <select name=\"showMintPage\" @change=\"${showMintChange}\">\n\n                                                    ${channelViewModel.channel.showMintPage == true ? $h`\n                                                        <option value=\"false\">No</option>\n                                                        <option value=\"true\" selected>Yes</option>\n                                                    ` : $h`\n                                                        <option value=\"false\" selected>No</option>\n                                                        <option value=\"true\">Yes</option>\n                                                    `}\n    \n                                                </select>\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Show Activity Page?</div>\n                                            <div class=\"item-input-wrap\">\n\n                                                <select name=\"showActivityPage\" @change=\"${showActivityChange}\">\n\n                                                    ${channelViewModel.channel.showActivityPage == true ? $h`\n                                                        <option value=\"false\">No</option>\n                                                        <option value=\"true\" selected>Yes</option>\n                                                    ` : $h`\n                                                        <option value=\"false\" selected>No</option>\n                                                        <option value=\"true\">Yes</option>\n                                                    `}\n    \n                                                </select>\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">External Links</div>\n                                            <div class=\"block\">\n\n                                                ${externalLinks?.length > 0 ? $h`\n\n                                                    <ul style=\"padding-left: 0px;\">\n                            \n                                                        ${externalLinks?.map( (el) => $h`\n                                                        <li>\n                                                            <span style=\"width: 100px; margin-right: 10px;\">${el.name}</span>\n                            \n                                                            <a class=\"link\" href=\"#\" data-id=\"${el.id}\" @click=\"${editExternalLink}\">Edit</a> | \n                                                            <a class=\"link\" href=\"#\" data-id=\"${el.id}\" @click=\"${deleteExternalLink}\">Delete</a>\n                                                        </li>\n                                                        `)}\n                            \n                                                    </ul>\n\n                        \n                                                ` : $h`\n                                                    No external links exist.\n                                                `}\n                            \n                                                <a class=\"button button-outline \" @click=\"${addExternalLinkClick}\" tabindex=\"10\">Add External Link</a>\n                                                         \n                                                <input type=\"hidden\" name=\"externalLinks\" value=\"${JSON.stringify(externalLinks)}\" />\n               \n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n\n\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Marketplaces</div>\n                                            <div class=\"block\">\n\n                                                ${marketplaces?.length > 0 ? $h`\n\n                                                    <ul style=\"padding-left: 0px;\">\n                            \n                                                        ${marketplaces?.map( (m) => $h`\n                                                        <li>\n                                                            <span style=\"width: 100px; margin-right: 10px;\">${m.name}</span>\n                            \n                                                            <a class=\"link\" href=\"#\" data-id=\"${m.id}\" @click=\"${editMarketplace}\">Edit</a> | \n                                                            <a class=\"link\" href=\"#\" data-id=\"${m.id}\" @click=\"${deleteMarketplace}\">Delete</a>\n                                                        </li>\n                                                        `)}\n                            \n                                                    </ul>\n\n                        \n                                                ` : $h`\n                                                    No marketplaces exist.\n                                                `}\n                            \n                                                <a class=\"button button-outline \" @click=\"${addMarketplaceClick}\" tabindex=\"10\">Add Marketplace</a>\n\n                    \n                                                \n                        \n                                                <input type=\"hidden\" name=\"marketplaces\" value=\"${JSON.stringify(marketplaces)}\" />\n               \n\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n\n\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    </div>\n\n\n`\n    }\n    ;\n}\nframework7Component.id = '75a5eb7a72';\nframework7Component.style = `\n\n\n\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { WalletService } from \"../../../service/core/wallet-service\";\nimport { QuillEditorService, CustomImageSpec } from \"../../../service/quill-editor-service\";\nimport { AuthorService } from \"../../../service/author-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { ChannelWebService } from \"../../../service/web/channel-web-service\";\nimport { Channel } from \"../../../dto/channel\";\nimport { Author } from \"../../../dto/author\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport ChannelForm from \"../../admin/channel/form.f7.html\";\nimport hljs from \"highlight.js\";\nimport Quill from 'quill';\nimport { ethers } from \"ethers\";\nimport Tagify from '@yaireo/tagify';\nimport { v4 as uuidv4 } from 'uuid';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelService = ContainerService.getInstance(ChannelService);\n  let channelWebService = ContainerService.getInstance(ChannelWebService);\n  let authorService = ContainerService.getInstance(AuthorService);\n  let quillEditorService = ContainerService.getInstance(QuillEditorService);\n  let uiService = ContainerService.getInstance(UiService);\n  let walletService = ContainerService.getWalletService();\n  let licenseQuillEditor;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: 'Create & Import',\n    path: '/admin/channel/create-menu'\n  }, {\n    text: 'Create Collection'\n  }];\n  let swiper;\n  hljs.configure({\n    languages: ['css']\n  });\n  let channelViewModel = {\n    channel: {\n      mintPrice: \"0.00\",\n      authorId: walletService.address\n    },\n    themes: [],\n    staticPages: [],\n    editable: true,\n    disableForks: false\n  };\n  let coverImage;\n  let coverBanner;\n  const formSubmit = async e => {\n    e.preventDefault();\n    let form = document.getElementById('create-channel-form');\n    if (!form.reportValidity()) {\n      document.getElementById('collection-title').scrollIntoView();\n      return;\n    }\n\n    //Get data\n    let channel = Object.assign(new Channel(), $f7.form.convertToData('#create-channel-form'));\n\n    //Get content from quill\n    channel.description = quillEditorService.activeEditor.getContents();\n    channel.license = licenseQuillEditor.getContents();\n\n    //Convert numbers\n    channel.sellerFeeBasisPoints = parseInt(channel.sellerFeeBasisPoints);\n\n    //Parse attributeOptions and category\n    if (channel.attributeOptions) {\n      channel.attributeOptions = JSON.parse(channel.attributeOptions);\n    } else {\n      channel.attributeOptions = [];\n    }\n    if (channel.externalLinks) {\n      channel.externalLinks = JSON.parse(channel.externalLinks);\n    } else {\n      channel.externalLinks = [];\n    }\n    if (channel.marketplaces) {\n      channel.marketplaces = JSON.parse(channel.marketplaces);\n    } else {\n      channel.marketplaces = [];\n    }\n    channel.disableForks = channel.disableForks == \"true\";\n    channel.showMintPage = channel.showMintPage == \"true\";\n    channel.showActivityPage = channel.showActivityPage == \"true\";\n\n    //Save\n    try {\n      await channelWebService.put(channel, coverImage, coverBanner);\n      if (channel.authorId) {\n        await authorService.insertIfNew(channel.authorId);\n      }\n      const toast = $f7.toast.show({\n        text: 'Collection saved',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n\n      //Redirect\n      $f7.views.main.router.navigate(`/admin/channel/show/${channel._id}`);\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex.errors, \"There was an error\");\n    }\n  };\n  $on('pageInit', async (e, page) => {\n    $('#create-channel-form').attr('novalidate', 'novalidate');\n\n    //Make sure quill is configured\n    await quillEditorService.init();\n\n    // //Categories\n    // let categoryTagify = new Tagify(document.getElementById('category'))\n\n    //Description\n    quillEditorService.buildQuillPostEditor(\"#create-channel-description-editor\", \"#create-channel-description-toolbar\");\n\n    //License\n    licenseQuillEditor = new Quill('#create-channel-license-editor', {\n      bounds: \".page-content\",\n      modules: {\n        toolbar: '#create-channel-license-toolbar'\n      },\n      theme: \"snow\"\n    });\n\n    // //Init swiper\n    // swiper = $f7.swiper.create('.swiper', {\n    //   speed: 1000,\n    //   allowTouchMove: false,\n    //   createElements:true,\n    //   longSwipes: false,\n    //   preventInteractionOnTransition: true,\n    //   shortSwipes: false,\n    //   simulateTouch: false,\n    //   on: {\n    //     slideChange: function (s) {\n\n    //       if (s.activeIndex == 0) {\n    //         document.getElementById('create-new-swiper').style.height = \"700px\"\n    //       } \n\n    //       if (s.activeIndex == 1) {\n    //         document.getElementById('create-new-swiper').style.height = \"2500px\"\n    //       }\n\n    //     }\n    //   }\n    // })\n  });\n\n  // const copyrightClick = async (e) => {\n\n  //   channelViewModel.channel.disableForks = true\n\n  //   await $update()\n  //   swiper.slideNext(1000)\n\n  // }\n\n  // const copyleftClick = async (e) => {\n\n  //   channelViewModel.channel.disableForks = false\n\n  //   await $update()\n  //   swiper.slideNext(1000)\n  // }\n\n  const backClick = async e => {\n    swiper.slidePrev(1000);\n  };\n  $(document).on('cover-image-updated', async e => {\n    coverImage = e.detail.coverImage;\n  });\n  $(document).on('cover-banner-updated', async e => {\n    coverBanner = e.detail.coverBanner;\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-create-channel\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n        <!-- Slider container -->\n        <form id=\"create-channel-form\" @submit=\"${formSubmit}\" class=\"fixed-width-content center\">\n      \n          <div class=\"block-title block-title-medium\">Create Collection</div>\n\n\n          <${ChannelForm} \n            channel=${channelViewModel} \n            description_editor=\"create-channel-description-editor\"\n            description_toolbar=\"create-channel-description-toolbar\" \n            license_editor=\"create-channel-license-editor\"\n            license_toolbar=\"create-channel-license-toolbar\" \n          />\n\n          <div class=\"block cancel-save-row\">\n\n            <div class=\"large-only\"></div>\n\n            <a href=\"/admin/channel/create-menu\" class=\"button button-outline color-gray\" tabindex=\"30\">\n              Cancel\n            </a>\n\n            <button type=\"submit\" class=\"button button-fill\" tabindex=\"31\" id=\"saveButton\">\n              Save\n            </button>\n\n          </div>\n\n        </form>\n\n    </div>\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '8c0c9daeab';\nframework7Component.style = `\n\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ItemService } from \"../../../service/item-service\";\nimport { ItemRepository } from \"../../../repository/item-repository\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let itemService = ContainerService.getInstance(ItemService);\n  let channelId = props.channel;\n  let itemViewModel = props.item;\n  let tokenId = props.token_id ? props.token_id : itemViewModel.item.tokenId;\n  const goTokenFormSubmit = async e => {\n    e.preventDefault();\n    const val = $(e.currentTarget).children('.goto-input').val();\n\n    //Look up item by tokenId\n    let item = await itemService.getByTokenId(channelId, parseInt(val.toString()));\n    if (item) {\n      $f7.views.main.router.navigate(`/admin/channel/show/${channelId}/${parseInt(val.toString())}`);\n    } else {\n      $f7.dialog.alert(\"Invalid Page\");\n    }\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"card\" >\n      <form class=\"card-content card-content-padding\" @submit=\"${goTokenFormSubmit}\">\n        <input type=\"number\" class=\"goto-input\" style=\"width: 60px; border: 1px solid #cccccc; display: inline-block;\" value=\"${tokenId}\" min=\"0\"  />\n        <span class=\"paging-label\">Enter Token ID</span>\n        <button class=\"goto-button button button-small button-fill\">Go</button>\n      </form>\n    </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '242045c19f';\nframework7Component.style = `    \n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { ItemWebService } from \"../../../service/web/item-web-service\";\nimport { ItemRepository } from \"../../../repository/item-repository\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport ItemList from \"../../admin/channel/item-list.f7.html\";\nimport TokenNavigator from \"./token-navigator.f7.html\";\nimport ChannelCard from \"./channel-card.f7.html\";\nimport hotkeys from 'hotkeys-js';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelService = ContainerService.getInstance(ChannelService);\n  let walletService = ContainerService.getWalletService();\n  let itemWebService = globalThis.container.get(ItemWebService);\n  let channelViewModel = props.channelViewModel;\n  let firstPageItems = props.firstPageItems;\n  let items = [];\n  let itemsShown = 0;\n  let hasMoreItems = true;\n  let loadingInProgress = false;\n  let pageCounter = 1;\n  let virtualList;\n  let totalItemCount = channelViewModel.itemCount;\n  const COLS_LARGE = 5;\n  const HEIGHT_LARGE = 290;\n  const COLS_SMALL = 2;\n  const HEIGHT_SMALL = 250;\n  let showEdit = channelViewModel.editable;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title\n  }];\n  const truncateEthAddress = address => {\n    return walletService.truncateEthAddress(address);\n  };\n  const resizeListener = e => {\n    const viewPortWidth = getWidth();\n    virtualList.params.cols = viewPortWidth >= 1024 ? COLS_LARGE : COLS_SMALL;\n    virtualList.params.height = viewPortWidth >= 1024 ? HEIGHT_LARGE : HEIGHT_SMALL;\n    virtualList?.update();\n    console.log(\"Resized...\");\n  };\n  const getWidth = () => {\n    return Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n  };\n  const virtualListParams = {\n    el: '#item-list',\n    createUl: false,\n    renderItem(item) {\n      return getTemplate(item);\n    },\n    height: getWidth() >= 1024 ? HEIGHT_LARGE : HEIGHT_SMALL,\n    items: items,\n    cols: getWidth() >= 1024 ? COLS_LARGE : COLS_SMALL,\n    emptyTemplate: `\n          <li class=\"item-content\">\n              <div class=\"item-inner\">\n                  No items in collection.\n              </div>\n          </li>\n          `\n  };\n  $on('pageInit', async (e, page) => {\n    items.push(...firstPageItems);\n    itemsShown = firstPageItems.length;\n\n    //Load cover banner into CSS\n    if (channelViewModel?.coverBanner?.url) {\n      $(`.show-channel-banner-${channelViewModel.channel._id}`).css('background-image', `url(${channelViewModel.coverBanner.url})`);\n    } else {\n      $(`.show-channel-banner-${channelViewModel.channel._id}`).css('background', `linear-gradient(-45deg, rgba(241,241,241,1) 13%, rgba(239,243,248,1) 37%, rgba(176,209,220,0.927608543417367) 69%, rgba(255,255,255,1) 100%)`);\n    }\n\n    //Make links external\n    let description = document.getElementById(`channel-show-description-${channelViewModel.channel._id}`);\n    if (description) {\n      let links = document.getElementById(`channel-show-description-${channelViewModel.channel._id}`).getElementsByTagName('a');\n      for (let link of links) {\n        link.classList.add('external');\n      }\n    }\n    $(`.animation-container a`).addClass('external');\n    window.addEventListener('resize', resizeListener);\n    createVirtualList();\n  });\n  $on('pageBeforeOut', async () => {\n    // unloadInfiniteScroll()\n    window.removeEventListener('resize', resizeListener);\n    // document.getElementById(\"item-list-infinite-scroll\").removeEventListener( 'infinite', infiniteScroll )\n  });\n\n  const createVirtualList = () => {\n    virtualList = $f7.virtualList.create(virtualListParams);\n    if (virtualList.items?.length < totalItemCount) {\n      document.getElementById(\"item-list-infinite-scroll\").addEventListener('infinite', infiniteScroll);\n    } else {\n      $('.infinite-scroll-preloader').hide();\n    }\n  };\n  function unloadInfiniteScroll() {\n    console.log(\"Unload infinite scroll item list\");\n\n    // Nothing more to load, detach infinite scroll events to prevent unnecessary loadings\n    $f7.infiniteScroll.destroy('#item-list-infinite-scroll');\n    $f7.virtualList.destroy('#item-list');\n    virtualList = undefined;\n    $('.infinite-scroll-preloader').hide();\n  }\n  async function infiniteScroll(e) {\n    // Exit, if loading in progress\n    if (loadingInProgress || !hasMoreItems) return;\n    console.log(`Infinite scrolling...`);\n\n    // Set loading flag\n    loadingInProgress = true;\n    try {\n      let itemPage = await itemWebService.listByChannel(channelViewModel.channel._id, ItemRepository.CHUNK_SIZE, itemsShown);\n\n      //Count actual items                    \n      itemsShown += itemPage.length;\n      if (itemsShown >= totalItemCount) {\n        hasMoreItems = false;\n      }\n      virtualList.appendItems(itemPage);\n      pageCounter++;\n    } catch (ex) {\n      console.log(ex);\n    }\n    $f7.preloader.hide();\n    if (!hasMoreItems) {\n      unloadInfiniteScroll();\n    }\n    loadingInProgress = false;\n  }\n  function getTemplate(rowItemViewModel) {\n    return `<li class=\"flex-card\">\n                  <a href=\"/admin/channel/show/${rowItemViewModel.channel._id}/${rowItemViewModel.item.tokenId}\" class=\"item-link\">\n                      <div class=\"card\" >\n                          <div class=\"card-content\">\n                              <div class=\"square\">\n                                  <img src=\"${rowItemViewModel.coverImage?.url}\" alt=\"Channel cover image\"/>\n                              </div>\n                          </div>\n\n\n                          <div class=\"card-footer\">\n                              ${rowItemViewModel.item.title ? rowItemViewModel.item.title : `#${rowItemViewModel.item.tokenId}`} \n                          </div>\n                      </div>\n                  </a>\n              </li>\n      `;\n  }\n  const countItems = itemRows => {\n    //Count actual items\n    let itemCount = 0;\n    for (let itemRow of itemRows) {\n      itemCount += itemRow.items?.length;\n    }\n    return itemCount;\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-show-collection\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n\n    ${showEdit ? $h`\n    <div class=\"fab fab-extended fab-right-bottom\">\n      <a href=\"/admin/item/create/${channelViewModel.channel._id}\">\n        <i class=\"material-icons\">create</i>\n        <div class=\"fab-text\">Create Item</div>\n      </a>\n    </div>\n    ` : $h``}\n\n\n    <div class=\"page-content infinite-scroll-content hide-toolbar-on-scroll\" id=\"item-list-infinite-scroll\">\n\n      <div class=\"fixed-width-content center\">\n\n        <channel-card channel_view_model=${channelViewModel}></channel-card>\n\n        <div class=\"block\">\n          <p class=\"segmented\">\n            <a class=\"button button-outline button-active\" href=\"#\">Items</a>\n            <a class=\"button button-outline\" href=\"/admin/channel/themes/${channelViewModel.channel._id}\">Themes</a>\n            <a class=\"button button-outline\" href=\"/admin/channel/static-pages/${channelViewModel.channel._id}\">Static Pages</a>\n          </p>\n        </div>\n  \n        <${TokenNavigator} channel=${channelViewModel.channel._id} token_id=\"1\" />\n  \n  \n      \n        <div class=\"list cards-list virtual-list\" id=\"item-list\" >\n          <ul class=\"item-flex\"></ul>\n        </div>\n  \n        <div class=\"block\">\n          <br />\n        </div>\n  \n        <div class=\"preloader infinite-scroll-preloader\"></div>\n\n      </div>\n\n\n\n    </div>\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = 'b5d601610e';\nframework7Component.style = `\n  \n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let theme = props.theme;\n  let coverImageCSSEditorId = props.cover_image_css_editor_id;\n  let animationCSSEditorId = props.animation_css_editor_id;\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"list\">\n\n        <input type=\"hidden\" name=\"_id\"  value=\"${theme?._id}\" />\n        <input type=\"hidden\" name=\"_rev\" value=\"${theme?._rev}\" />\n        <input type=\"hidden\" name=\"dateCreated\" value=\"${theme?.dateCreated}\" />\n\n        <ul>\n            <li>\n                <div class=\"item-content item-input\">\n                    <div class=\"item-inner\">\n                        <div class=\"item-title item-label\">Title</div>\n                        <div class=\"item-input-wrap\">\n                            <input type=\"text\" name=\"name\" placeholder=\"Name\"\n                                value=\"${theme?.name}\" required  minlength=\"3\" tabindex=\"1\" />\n                        </div>\n                    </div>\n                </div>\n            </li>\n\n            <li>\n                <div class=\"item-content item-input\">\n                    <div class=\"item-inner\">\n                        <div class=\"item-title item-label\">Cover Image CSS (SVG)</div>\n                        <div class=\"editor bg-color-white text-color-black css-editor\" id=\"${coverImageCSSEditorId}\" tabindex=\"2\" style=\"min-height: 100px;\">.svg-h1 {}</div>\n                    </div>\n                </div>\n            </li>\n    \n            <li>\n                <div class=\"item-content item-input\">\n                    <div class=\"item-inner\">\n                        <div class=\"item-title item-label\">Animation CSS (HTML)</div>\n                        <div class=\"editor bg-color-white text-color-black css-editor\" id=\"${animationCSSEditorId}\" tabindex=\"3\" style=\"min-height: 100px;\">.animation-container {}</div>\n                    </div>\n                </div>\n            </li>\n\n        </ul>\n    </div>\n\n\n`\n    }\n    ;\n}\nframework7Component.id = 'a6a14faaa9';\nframework7Component.style = `\n    \n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { ItemWebService } from \"../../../service/web/item-web-service\";\nimport { ItemRepository } from \"../../../repository/item-repository\";\nimport { ThemeService } from \"../../../service/theme-service\";\nimport { Theme } from \"../../../dto/theme\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport ItemList from \"../../admin/channel/item-list.f7.html\";\nimport TokenNavigator from \"./token-navigator.f7.html\";\nimport ThemeForm from \"../../admin/channel/theme-form.f7.html\";\nimport Quill from 'quill';\nimport hotkeys from 'hotkeys-js';\nimport { v4 as uuidv4 } from 'uuid';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let themeService = ContainerService.getInstance(ThemeService);\n  let uiService = ContainerService.getInstance(UiService);\n  let channelViewModel = props.channelViewModel;\n  let themes = props.themes;\n  let showEdit = channelViewModel.editable;\n  let editingTheme;\n  let themeCoverCssEditor;\n  let themeAnimationCssEditor;\n  let staticPageContentEditor;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title,\n    path: `/admin/channel/show/${channelViewModel.channel._id}`\n  }, {\n    text: 'Themes'\n  }];\n  const updateThemeList = async () => {\n    //Refresh theme list\n    themes = await themeService.listByChannel(channelViewModel.channel._id, 1000, 0);\n  };\n  const addThemePopupOpen = function (e) {\n    themeCoverCssEditor = new Quill('#add-theme-cover-image-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        syntax: {\n          highlight: text => hljs.highlightAuto(text).value\n        },\n        toolbar: false\n      }\n    });\n    themeAnimationCssEditor = new Quill('#add-theme-animation-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        syntax: {\n          highlight: text => hljs.highlightAuto(text).value\n        },\n        toolbar: false\n      }\n    });\n  };\n  const addThemeFormSubmit = async function (e) {\n    e.preventDefault();\n\n    //Get data\n    let theme = Object.assign(new Theme(), $f7.form.convertToData('#add-theme-form'));\n    theme.coverImageCSS = themeCoverCssEditor.getText() != \"\\n\" ? themeCoverCssEditor.getText() : undefined;\n    theme.animationCSS = themeAnimationCssEditor.getText() != \"\\n\" ? themeAnimationCssEditor.getText() : undefined;\n    theme.channelId = channelViewModel.channel._id;\n\n    //Generate id\n    theme._id = uuidv4();\n    theme.dateCreated = new Date().toJSON();\n    try {\n      //Save the theme\n      await themeService.put(theme);\n      await updateThemeList();\n\n      //Clear form\n      $f7.form.fillFromData('#add-theme-form', {\n        name: \"\"\n      });\n      themeCoverCssEditor.setText(\"\");\n      themeAnimationCssEditor.setText(\"\");\n\n      //Refresh theme list\n      await $update();\n      $f7.popup.close('.add-theme-popup');\n    } catch (ex) {\n      $f7.dialog.alert(ex, \"There was an error\");\n    }\n  };\n  const editThemeFormSubmit = async function (e) {\n    e.preventDefault();\n\n    //Get data\n    let theme = Object.assign(new Theme(), $f7.form.convertToData('#edit-theme-form'));\n    theme.coverImageCSS = themeCoverCssEditor.getText() != \"\\n\" ? themeCoverCssEditor.getText() : undefined;\n    theme.animationCSS = themeAnimationCssEditor.getText() != \"\\n\" ? themeAnimationCssEditor.getText() : undefined;\n    theme.channelId = channelViewModel.channel._id;\n    try {\n      //Save the theme\n      await themeService.put(theme);\n      await updateThemeList();\n\n      //Refresh theme list\n      await $update();\n      $f7.popup.close('.edit-theme-popup');\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex.errors, \"There was an error\");\n    }\n  };\n  const deleteTheme = async function (e) {\n    let id = $(e.target).data('id');\n    $f7.dialog.confirm(\"Are you sure you want to delete this theme?\", async () => {\n      let theme = await themeService.get(id);\n      await themeService.delete(theme);\n      await updateThemeList();\n\n      //Refresh theme list\n      await $update();\n      const toast = $f7.toast.show({\n        text: 'Theme deleted',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n    });\n  };\n  const editTheme = async function (e) {\n    let id = $(e.target).data('id');\n    editingTheme = themes.filter(theme => theme._id == id)[0];\n\n    //Init editors\n    themeCoverCssEditor = new Quill('#edit-theme-cover-image-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        syntax: {\n          highlight: text => hljs.highlightAuto(text).value\n        },\n        toolbar: false\n      }\n    });\n    themeAnimationCssEditor = new Quill('#edit-theme-animation-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        syntax: {\n          highlight: text => hljs.highlightAuto(text).value\n        },\n        toolbar: false\n      }\n    });\n\n    //Populate form\n    $f7.form.fillFromData('#edit-theme-form', editingTheme);\n    themeCoverCssEditor.setText(editingTheme.coverImageCSS ? editingTheme.coverImageCSS : \"\");\n    themeAnimationCssEditor.setText(editingTheme.animationCSS ? editingTheme.animationCSS : \"\");\n    await $update();\n    $f7.popup.open('.edit-theme-popup');\n  };\n  $on('pageInit', async (e, page) => {\n    //Clear existing listeners\n    // $(document).off('popup:open', '.add-theme-popup')\n\n    //Load cover banner into CSS\n    if (channelViewModel?.coverBanner?.url) {\n      $(`.show-channel-banner-${channelViewModel.channel._id}`).css('background-image', `url(${channelViewModel.coverBanner.url})`);\n    } else {\n      $(`.show-channel-banner-${channelViewModel.channel._id}`).css('background', `linear-gradient(-45deg, rgba(241,241,241,1) 13%, rgba(239,243,248,1) 37%, rgba(176,209,220,0.927608543417367) 69%, rgba(255,255,255,1) 100%)`);\n    }\n\n    //Make links external\n    let description = document.getElementById(`channel-show-description-${channelViewModel.channel._id}`);\n    if (description) {\n      let links = document.getElementById(`channel-show-description-${channelViewModel.channel._id}`).getElementsByTagName('a');\n      for (let link of links) {\n        link.classList.add('external');\n      }\n    }\n    await $update();\n\n    /**\n    *  THEMES\n    */\n    $('.add-theme-popup').on('popup:open', addThemePopupOpen);\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"channel-show-themes\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n\n    ${showEdit ? $h`\n    <div class=\"fab fab-extended fab-right-bottom\">\n      <a href=\"/admin/item/create/${channelViewModel.channel._id}\">\n        <i class=\"material-icons\">create</i>\n        <div class=\"fab-text\">Create Item</div>\n      </a>\n    </div>\n    ` : $h``}\n\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <div class=\"fixed-width-content center\">\n\n        <channel-card channel_view_model=${channelViewModel}></channel-card>\n\n        <div class=\"block\">\n          <p class=\"segmented\">\n            <a class=\"button button-outline\" href=\"/admin/channel/show/${channelViewModel.channel._id}\">Items</a>\n            <a class=\"button button-outline button-active\" href=\"#\">Themes</a>\n            <a class=\"button button-outline\" href=\"/admin/channel/static-pages/${channelViewModel.channel._id}\">Static\n              Pages</a>\n          </p>\n        </div>\n  \n        <div class=\"card\">\n          <div class=\"card-header\">Themes</div>\n          <div class=\"card-content\">\n            <div class=\"list\">\n              <ul>\n                <li>\n                  <div class=\"item-content item-input\">\n                    <div class=\"item-inner\">\n                      <div>\n  \n                        <p>A theme allows you to apply CSS formatting to an item. Create themes and then apply them to\n                          individual items.</p>\n  \n                        <ul class=\"theme-list\" style=\"padding-left: 0; padding-bottom: 10px; padding-top: 10px; margin-bottom: 15px;\">\n                          ${themes?.map( (theme) => $h`\n                          <li>\n                            <span class=\"theme-name\">${theme.name}</span>\n                            <a class=\"link theme-link\" href=\"#\" data-id=\"${theme._id}\" @click=\"${editTheme}\">Edit</a>\n                            <a class=\"link theme-link\" href=\"#\" data-id=\"${theme._id}\" @click=\"${deleteTheme}\">Delete</a>\n                          </li>\n                          `)}\n                        </ul>\n  \n                        <a class=\"button button-outline add-theme-button popup-open\" data-popup=\".add-theme-popup\" tabindex=\"10\">Add Theme</a>\n  \n                      </div>\n                    </div>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n  \n  \n        <div class=\"block\">\n          <br />\n        </div>\n  \n  \n        <div class=\"popup add-theme-popup\">\n          <div class=\"view\">\n            <div class=\"page\">\n              <div class=\"navbar\">\n                <div class=\"navbar-bg\"></div>\n                <div class=\"navbar-inner\">\n                  <div class=\"title\">Add Theme</div>\n                  <div class=\"right\">\n                    <!-- Link to close popup -->\n                    <a class=\"link popup-close\">Close</a>\n                  </div>\n                </div>\n              </div>\n              <div class=\"page-content\">\n                <form id=\"add-theme-form\" @submit=\"${addThemeFormSubmit}\">\n                  <${ThemeForm} cover_image_css_editor_id=\"add-theme-cover-image-editor\"\n                    animation_css_editor_id=\"add-theme-animation-editor\" />\n  \n                  <div class=\"block save-row\">\n  \n                    <div class=\"large-only\"></div>\n  \n                    <button type=\"submit\" class=\"button button-fill\" tabindex=\"12\">Add Theme</button>\n  \n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n  \n        <div class=\"popup edit-theme-popup\">\n          <div class=\"view\">\n            <div class=\"page\">\n              <div class=\"navbar\">\n                <div class=\"navbar-bg\"></div>\n                <div class=\"navbar-inner\">\n                  <div class=\"title\">Edit Theme</div>\n                  <div class=\"right\">\n                    <!-- Link to close popup -->\n                    <a class=\"link popup-close\">Close</a>\n                  </div>\n                </div>\n              </div>\n              <div class=\"page-content\">\n                <form id=\"edit-theme-form\" @submit=\"${editThemeFormSubmit}\">\n  \n                  <${ThemeForm} cover_image_css_editor_id=\"edit-theme-cover-image-editor\"\n                    animation_css_editor_id=\"edit-theme-animation-editor\" theme=\"${editingTheme}\" />\n  \n                  <div class=\"block save-row\">\n  \n                    <div class=\"large-only\"></div>\n  \n                    <button type=\"submit\" class=\"button button-fill\" tabindex=\"12\">\n                      Save Changes\n                    </button>\n  \n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n      </div>\n\n\n\n    </div>\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '1ef39afce5';\nframework7Component.style = `\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let staticPage = props.static_page;\n  let locations = [{\n    name: \"navbar\",\n    description: \"Show link on navigation bar\"\n  }, {\n    name: \"links\",\n    description: \"Show in list of links on home page\"\n  }, {\n    name: \"index\",\n    description: \"Show content on home page\"\n  }];\n  const isLocationSelected = location => {\n    //Is this location in the list of selected locations?\n    if (staticPage?.locations?.length > 0) {\n      for (let staticPageLocation of staticPage.locations) {\n        if (location.name == staticPageLocation.name) return true;\n      }\n    }\n    return false;\n  };\n  let editorId = props.static_page_content_editor_id;\n  let toolbarId = props.static_page_content_toolbar_id;\n  let imageButtonInputId = props.image_button_input_id;\n  let imageButtonId = props.image_button_id;\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"list\">\n\n        <input type=\"hidden\" name=\"_id\"  value=\"${staticPage?._id}\" />\n        <input type=\"hidden\" name=\"_rev\" value=\"${staticPage?._rev}\" />\n        <input type=\"hidden\" name=\"dateCreated\" value=\"${staticPage?.dateCreated}\" />\n\n        <ul>\n            <li>\n                <div class=\"item-content item-input\">\n                    <div class=\"item-inner\">\n                        <div class=\"item-title item-label\">Name</div>\n                        <div class=\"item-input-wrap\">\n                            <input type=\"text\" name=\"name\" placeholder=\"Name\"\n                                value=\"${staticPage?.name}\" required  minlength=\"3\" tabindex=\"1\" />\n                        </div>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <a href=\"#\" class=\"item-link smart-select smart-select-init\" data-open-in=\"popup\">\n                  <!-- \"multiple\" attribute for multiple select-->\n                    <select name=\"locations\" tabindex=\"2\"  multiple>\n                        <optgroup>\n                            ${locations.map( location => $h`\n                                ${isLocationSelected(location) ? $h`\n                                    <option value=\"${location.name}\" selected >${location.description}</option>\n                                ` : $h`\n                                    <option value=\"${location.name}\">${location.description}</option>\n                                `}\n                            `)}\n                        </optgroup>\n                    </select>\n                  <div class=\"item-content\">\n                    <div class=\"item-inner\">\n                      <div class=\"item-title\">Choose Display Location(s)</div>\n                    </div>\n                  </div>\n                </a>\n            </li>\n\n\n\n\n\n            <li>\n                <div class=\"item-content item-input\">\n                    <div class=\"item-inner\">\n                        <div class=\"item-title item-label\">Content</div>\n\n                        <div id=\"${toolbarId}\">\n                \n                            <select class=\"ql-header\">\n                                <option selected></option>\n                                <option value=\"1\">Heading</option>\n                                <option value=\"2\">Subheading</option>\n                            </select>\n    \n    \n                            <!-- Add a bold button -->\n                            <button class=\"ql-bold\"></button>\n                            <button class=\"ql-italic\"></button>\n                            <button class=\"ql-strike\"></button>\n                            <button class=\"ql-underline\"></button>\n                            <button class=\"ql-link\"></button>\n                            <button class=\"ql-list\" value=\"ordered\"></button>\n                            <button class=\"ql-list\" value=\"bullet\"></button>\n\n    \n    \n                            <!-- Add subscript and superscript buttons -->\n                            <button class=\"ql-script\" value=\"sub\"></button>\n                            <button class=\"ql-script\" value=\"super\"></button>\n    \n                            <button class=\"text-editor-button\" id=\"${imageButtonId}\"><i class=\"material-icons\">image</i></button>\n                            <label><input type=\"file\" id=\"${imageButtonInputId}\" /></label>\n                        </div>\n\n                        <div class=\"editor bg-color-white text-color-black static-page-editor\" id=\"${editorId}\" tabindex=\"3\"></div>\n                    </div>\n                </div>\n            </li>\n\n        </ul>\n    </div>\n\n\n`\n    }\n    ;\n}\nframework7Component.id = '3550b87db0';\nframework7Component.style = `\n    \n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { ItemWebService } from \"../../../service/web/item-web-service\";\nimport { ItemRepository } from \"../../../repository/item-repository\";\nimport { QuillEditorService, CustomImageSpec } from \"../../../service/quill-editor-service\";\nimport { StaticPage } from \"../../../dto/static-page\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { StaticPageService } from \"../../../service/static-page-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport ItemList from \"../../admin/channel/item-list.f7.html\";\nimport TokenNavigator from \"./token-navigator.f7.html\";\nimport StaticPageForm from \"../../admin/channel/static-page-form.f7.html\";\nimport Quill from 'quill';\nimport hotkeys from 'hotkeys-js';\nimport { v4 as uuidv4 } from 'uuid';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let quillEditorService = ContainerService.getInstance(QuillEditorService);\n  let uiService = ContainerService.getInstance(UiService);\n  let staticPageService = ContainerService.getInstance(StaticPageService);\n  let channelViewModel = props.channelViewModel;\n  let staticPages = props.staticPages;\n  let showEdit = channelViewModel.editable;\n  let editingStaticPage;\n  let staticPageContentEditor;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title,\n    path: `/admin/channel/show/${channelViewModel.channel._id}`\n  }, {\n    text: 'Static Pages'\n  }];\n  const updateStaticPagesList = async () => {\n    //Refresh static pages list\n    staticPages = await staticPageService.listByChannel(channelViewModel.channel._id, 1000, 0);\n  };\n  let popupOpenHandler = e => {\n    staticPageContentEditor = new Quill('#add-static-page-content-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        imageDropAndPaste: {\n          // add an custom image handler\n          handler: (imageDataUrl, type, imageData) => {\n            const file = imageData.toFile();\n            quillEditorService.insertImageInEditor(file, staticPageContentEditor);\n          }\n        },\n        toolbar: '#add-static-page-content-toolbar',\n        blotFormatter: {\n          specs: [CustomImageSpec],\n          align: {\n            icons: {\n              left: \"<i class='material-icons'>align_horizontal_left</i>\",\n              center: \"<i class='material-icons'>align_horizontal_center</i>\",\n              right: \"<i class='material-icons'>align_horizontal_right</i>\"\n            },\n            toolbar: {\n              svgStyle: {\n                fontSize: '21px'\n              }\n            }\n          }\n        }\n      }\n    });\n  };\n  let addFormSubmit = async e => {\n    e.preventDefault();\n\n    //Get data\n    let staticPage = Object.assign(new StaticPage(), $f7.form.convertToData('#add-static-page-form'));\n    staticPage.content = staticPageContentEditor.getContents();\n    staticPage.channelId = channelViewModel.channel._id;\n\n    //Generate id\n    staticPage._id = uuidv4();\n    staticPage.dateCreated = new Date().toJSON();\n    try {\n      await staticPageService.put(staticPage);\n      await updateStaticPagesList();\n\n      //Clear form\n      $f7.form.fillFromData('#add-static-page-form', {\n        name: \"\",\n        slug: \"\",\n        locations: []\n      });\n      staticPageContentEditor.setText(\"\");\n\n      //Refresh static page list\n      await $update();\n      $f7.popup.close('.add-static-page-popup');\n    } catch (ex) {\n      $f7.dialog.alert(ex, \"There was an error\");\n    }\n  };\n  let editFormSubmit = async e => {\n    e.preventDefault();\n\n    //Get data\n    let staticPage = Object.assign(new StaticPage(), $f7.form.convertToData('#edit-static-page-form'));\n    staticPage.content = staticPageContentEditor.getContents();\n    staticPage.channelId = channelViewModel.channel._id;\n    try {\n      await staticPageService.put(staticPage);\n      await updateStaticPagesList();\n\n      //Refresh theme list\n      await $update();\n      $f7.popup.close('.edit-static-page-popup');\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex.errors, \"There was an error\");\n    }\n  };\n  let deleteClick = async e => {\n    let id = $(e.target).data('id');\n    $f7.dialog.confirm(\"Are you sure you want to delete this static page?\", async () => {\n      let staticPage = await staticPageService.get(id);\n      await staticPageService.delete(staticPage);\n      await updateStaticPagesList();\n\n      //Refresh theme list\n      await $update();\n      const toast = $f7.toast.show({\n        text: 'Static Page deleted',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n    });\n  };\n  let editClick = async function (e) {\n    let id = $(e.target).data('id');\n    editingStaticPage = staticPages.filter(staticPage => staticPage._id == id)[0];\n    staticPageContentEditor = new Quill('#edit-static-page-content-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        imageDropAndPaste: {\n          // add an custom image handler\n          handler: (imageDataUrl, type, imageData) => {\n            const file = imageData.toFile();\n            quillEditorService.insertImageInEditor(file, staticPageContentEditor);\n          }\n        },\n        toolbar: '#edit-static-page-content-toolbar',\n        blotFormatter: {\n          specs: [CustomImageSpec],\n          align: {\n            icons: {\n              left: \"<i class='material-icons'>align_horizontal_left</i>\",\n              center: \"<i class='material-icons'>align_horizontal_center</i>\",\n              right: \"<i class='material-icons'>align_horizontal_right</i>\"\n            },\n            toolbar: {\n              svgStyle: {\n                fontSize: '21px'\n              }\n            }\n          }\n        }\n      }\n    });\n\n    //Populate form\n    $f7.form.fillFromData('#edit-static-page-form', editingStaticPage);\n    staticPageContentEditor.setContents(editingStaticPage.content);\n    await $update();\n    $f7.popup.open('.edit-static-page-popup');\n  };\n  let addImageButtonClick = function (e) {\n    e.preventDefault();\n\n    //Click actual input\n    const imageButtonInput = $('#add-static-page-image-button-input');\n    imageButtonInput.click();\n  };\n  let addImageButtonInputClick = async function (e) {\n    e.preventDefault();\n    uiService.showSpinner(\"Processing image...\");\n    await quillEditorService.insertImageInEditor(this.files[0], staticPageContentEditor);\n    uiService.hideSpinner();\n  };\n  let editImageButtonClick = function (e) {\n    e.preventDefault();\n\n    //Click actual input\n    const imageButtonInput = $('#edit-static-page-image-button-input');\n    imageButtonInput.click();\n  };\n  let editImageButtonInputClick = async function (e) {\n    e.preventDefault();\n    uiService.showSpinner(\"Processing image...\");\n    await quillEditorService.insertImageInEditor(this.files[0], staticPageContentEditor);\n    uiService.hideSpinner();\n  };\n  $on('pageInit', async (e, page) => {\n    //Clear existing listeners\n    // $(document).off('popup:open', '.add-static-page-popup')\n\n    $(document).off('click', '#add-static-page-image-button');\n    $(document).off('change', '#add-static-page-image-button-input');\n    $(document).off('click', '#edit-static-page-image-button');\n    $(document).off('change', '#edit-static-page-image-button-input');\n\n    //Make sure quill is configured\n    await quillEditorService.init();\n\n    //Load cover banner into CSS\n    if (channelViewModel?.coverBanner?.url) {\n      $(`.show-channel-banner-${channelViewModel.channel._id}`).css('background-image', `url(${channelViewModel.coverBanner.url})`);\n    } else {\n      $(`.show-channel-banner-${channelViewModel.channel._id}`).css('background', `linear-gradient(-45deg, rgba(241,241,241,1) 13%, rgba(239,243,248,1) 37%, rgba(176,209,220,0.927608543417367) 69%, rgba(255,255,255,1) 100%)`);\n    }\n\n    //Make links external\n    let description = document.getElementById(`channel-show-description-${channelViewModel.channel._id}`);\n    if (description) {\n      let links = document.getElementById(`channel-show-description-${channelViewModel.channel._id}`).getElementsByTagName('a');\n      for (let link of links) {\n        link.classList.add('external');\n      }\n    }\n    await $update();\n\n    /**\n     *  STATIC PAGES\n     */\n    $('.add-static-page-popup').on('popup:open', popupOpenHandler);\n\n    /**\n    * ADDING IMAGE BUTTONS\n    */\n    $(document).on('click', '#add-static-page-image-button', addImageButtonClick);\n    $(document).on('change', '#add-static-page-image-button-input', addImageButtonInputClick);\n    $(document).on('click', '#edit-static-page-image-button', editImageButtonClick);\n    $(document).on('change', '#edit-static-page-image-button-input', editImageButtonInputClick);\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"channel-show-themes\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n\n    ${showEdit ? $h`\n    <div class=\"fab fab-extended fab-right-bottom\">\n      <a href=\"/admin/item/create/${channelViewModel.channel._id}\">\n        <i class=\"material-icons\">create</i>\n        <div class=\"fab-text\">Create Item</div>\n      </a>\n    </div>\n    ` : $h``}\n\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <div class=\"fixed-width-content center\">\n\n        <channel-card channel_view_model=${channelViewModel}></channel-card>\n\n        <div class=\"block\">\n          <p class=\"segmented\">\n            <a class=\"button button-outline\" href=\"/admin/channel/show/${channelViewModel.channel._id}\">Items</a>\n            <a class=\"button button-outline\" href=\"/admin/channel/themes/${channelViewModel.channel._id}\">Themes</a>\n            <a class=\"button button-outline button-active\" href=\"#\">Static Pages</a>\n          </p>\n        </div>\n  \n  \n        <div class=\"card\">\n          <div class=\"card-header\">Static Pages</div>\n          <div class=\"card-content\">\n            <div class=\"list\">\n              <ul>\n                <li>\n                  <div class=\"item-content item-input\">\n                    <div class=\"item-inner\">\n                      <div>\n  \n                        <p>\n                          Create content that is displayed in the Large Reader alongside your collection. These are not mintable as NFTs.\n                        </p>\n  \n                        <p>\n                          <strong>Example:</strong> About Us, Contact Us, etc.\n                        </p>\n  \n                        <ul class=\"static-page-list\"\n                          style=\"padding-left: 0; padding-bottom: 10px; padding-top: 10px; margin-bottom: 15px;\">\n                          ${staticPages?.map( (staticPage) => $h`\n                            <li>\n                              <span class=\"static-page-name\">${staticPage.name}</span>\n                              <a class=\"link static-page-link\" href=\"#\" data-id=\"${staticPage._id}\" @click=\"${editClick}\">Edit</a>\n                              <a class=\"link static-page-link\" href=\"#\" data-id=\"${staticPage._id}\" @click=\"${deleteClick}\">Delete</a>\n                            </li>\n                          `)}\n                        </ul>\n  \n                        <div class=\"row\">\n                          <div class=\"col-30\">\n                            <a class=\"button button-outline add-theme-button popup-open\"\n                              data-popup=\".add-static-page-popup\" tabindex=\"10\">Add Static Page</a>\n                          </div>\n                          <div class=\"col-70\"></div>\n                        </div>\n  \n                      </div>\n                    </div>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n  \n  \n  \n        <div class=\"popup add-static-page-popup popup-tablet-fullscreen\">\n          <div class=\"view\">\n            <div class=\"page\">\n              <div class=\"navbar\">\n                <div class=\"navbar-bg\"></div>\n                <div class=\"navbar-inner\">\n                  <div class=\"title\">Add Static Page</div>\n                  <div class=\"right\">\n                    <!-- Link to close popup -->\n                    <a class=\"link popup-close\">Close</a>\n                  </div>\n                </div>\n              </div>\n              <div class=\"page-content\">\n                <form id=\"add-static-page-form\" @submit=\"${addFormSubmit}\">\n                  <${StaticPageForm} static_page_content_editor_id=\"add-static-page-content-editor\"\n                    static_page_content_toolbar_id=\"add-static-page-content-toolbar\"\n                    image_button_input_id=\"add-static-page-image-button-input\"\n                    image_button_id=\"add-static-page-image-button\" />\n  \n                  <div class=\"block save-row\">\n  \n                    <div class=\"large-only\"></div>\n  \n                    <button type=\"submit\" class=\"button button-fill\" tabindex=\"12\">\n                      Add Static Page\n                    </button>\n  \n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n  \n        <div class=\"popup edit-static-page-popup popup-tablet-fullscreen\">\n          <div class=\"view\">\n            <div class=\"page\">\n              <div class=\"navbar\">\n                <div class=\"navbar-bg\"></div>\n                <div class=\"navbar-inner\">\n                  <div class=\"title\">Edit Static Page</div>\n                  <div class=\"right\">\n                    <!-- Link to close popup -->\n                    <a class=\"link popup-close\">Close</a>\n                  </div>\n                </div>\n              </div>\n              <div class=\"page-content\">\n                <form id=\"edit-static-page-form\" @submit=\"${editFormSubmit}\">\n  \n                  <${StaticPageForm} static_page_content_editor_id=\"edit-static-page-content-editor\"\n                    static_page_content_toolbar_id=\"edit-static-page-content-toolbar\"\n                    image_button_input_id=\"edit-static-page-image-button-input\"\n                    image_button_id=\"edit-static-page-image-button\" static_page=\"${editingStaticPage}\" />\n  \n                  <div class=\"block save-row\">\n  \n                    <div class=\"large-only\"></div>\n  \n                    <button type=\"submit\" class=\"button button-fill\" tabindex=\"12\">\n                      Save Changes\n                    </button>\n  \n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n  \n  \n        <div class=\"block\">\n          <br />\n        </div>\n\n\n      </div>\n\n    </div>\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '9cf9885db8';\nframework7Component.style = `\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { ChannelWebService } from \"../../../service/web/channel-web-service\";\nimport { ImageService } from \"../../../service/image-service\";\nimport { ThemeService } from \"../../../service/theme-service\";\nimport { StaticPageService } from \"../../../service/static-page-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { QuillEditorService, CustomImageSpec } from \"../../../service/quill-editor-service\";\nimport { Channel } from \"../../../dto/channel\";\nimport { Theme } from \"../../../dto/theme\";\nimport { StaticPage } from \"../../../dto/static-page\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport ChannelForm from \"../../admin/channel/form.f7.html\";\nimport hljs from \"highlight.js\";\nimport Quill from 'quill';\nimport ThemeForm from \"../../admin/channel/theme-form.f7.html\";\nimport StaticPageForm from \"../../admin/channel/static-page-form.f7.html\";\nimport { ethers } from \"ethers\";\nimport Tagify from '@yaireo/tagify';\nimport { v4 as uuidv4 } from 'uuid';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelService = ContainerService.getInstance(ChannelService);\n  let channelWebService = ContainerService.getInstance(ChannelWebService);\n  let imageService = ContainerService.getInstance(ImageService);\n  let themeService = ContainerService.getInstance(ThemeService);\n  let staticPageService = ContainerService.getInstance(StaticPageService);\n  let uiService = ContainerService.getInstance(UiService);\n  let quillEditorService = ContainerService.getInstance(QuillEditorService);\n  let licenseQuillEditor;\n  let channelViewModel = props.channelViewModel;\n  let coverImage;\n  let coverBanner;\n  hljs.configure({\n    languages: ['css']\n  });\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title,\n    path: `/admin/channel/show/${channelViewModel.channel._id}`\n  }, {\n    text: 'Edit Collection'\n  }];\n  const formSubmit = async e => {\n    e.preventDefault();\n    let form = document.getElementById('edit-channel-form');\n    if (!form.reportValidity()) {\n      document.getElementById('collection-title').scrollIntoView();\n      return;\n    }\n    let existingChannel = Object.assign(new Channel(), channelViewModel.channel);\n\n    //Get data\n    let channel = Object.assign(existingChannel, $f7.form.convertToData('#edit-channel-form'));\n\n    //Get content from quill\n    channel.description = quillEditorService.activeEditor.getContents();\n    channel.license = licenseQuillEditor.getContents();\n\n    //Convert numbers\n    channel.sellerFeeBasisPoints = parseInt(channel.sellerFeeBasisPoints);\n\n    //Parse attributeOptions and category\n    if (channel.attributeOptions) {\n      channel.attributeOptions = JSON.parse(channel.attributeOptions);\n    } else {\n      channel.attributeOptions = [];\n    }\n    if (channel.externalLinks) {\n      channel.externalLinks = JSON.parse(channel.externalLinks);\n    } else {\n      channel.externalLinks = [];\n    }\n    if (channel.marketplaces) {\n      channel.marketplaces = JSON.parse(channel.marketplaces);\n    } else {\n      channel.marketplaces = [];\n    }\n    channel.disableForks = channel.disableForks == \"true\";\n    channel.showMintPage = channel.showMintPage == \"true\";\n    channel.showActivityPage = channel.showActivityPage == \"true\";\n\n    //Save\n    try {\n      await channelWebService.put(channel, coverImage, coverBanner);\n      const toast = $f7.toast.show({\n        text: 'Collection saved',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n\n      //Redirect\n      $f7.views.main.router.navigate(`/admin/channel/show/${channel._id}`);\n    } catch (ex) {\n      $f7.dialog.alert(ex.errors, \"There was an error\");\n    }\n  };\n  $on('pageInit', async (e, page) => {\n    $('#edit-channel-form').attr('novalidate', 'novalidate');\n\n    //Categories\n    let categoryTagify = new Tagify(document.getElementById('category'));\n\n    //Description\n    quillEditorService.buildQuillPostEditor(\"#edit-channel-description-editor\", \"#edit-channel-description-toolbar\");\n    if (channelViewModel.channel.description) {\n      quillEditorService.activeEditor.setContents(channelViewModel.channel.description);\n    }\n\n    //License\n    licenseQuillEditor = new Quill('#edit-channel-license-editor', {\n      bounds: \".page-content\",\n      modules: {\n        toolbar: '#edit-channel-license-toolbar'\n      },\n      theme: \"snow\"\n    });\n    if (channelViewModel.channel.license) {\n      licenseQuillEditor.setContents(channelViewModel.channel.license);\n    }\n\n    //Open attribute options too\n    if (channelViewModel.channel?.attributeOptions?.length > 0) {\n      for (let ao of channelViewModel.channel?.attributeOptions) {\n        new Tagify(document.getElementById(`options-input-${ao.id}`));\n      }\n    }\n  });\n  $(document).on('cover-image-updated', async e => {\n    coverImage = e.detail.coverImage;\n  });\n  $(document).on('cover-banner-updated', async e => {\n    coverBanner = e.detail.coverBanner;\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-edit-channel\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <form id=\"edit-channel-form\" @submit=\"${formSubmit}\" class=\"fixed-width-content center\">\n\n        <div class=\"block-title block-title-medium\">Edit Collection</div>\n\n\n        <${ChannelForm} \n          channel=${channelViewModel} \n          description_editor=\"edit-channel-description-editor\"\n          description_toolbar=\"edit-channel-description-toolbar\" \n          license_editor=\"edit-channel-license-editor\"\n          license_toolbar=\"edit-channel-license-toolbar\"  \n        />\n\n\n\n        <div class=\"block cancel-save-row\">\n      \n          <div class=\"large-only\"></div>\n\n          <a href=\"/admin/channel/show/${channelViewModel.channel._id}\" class=\"button button-outline color-gray\" tabindex=\"30\">\n            Cancel\n          </a>\n\n          <button type=\"submit\" class=\"button button-fill\" tabindex=\"31\" id=\"saveButton\">\n            Save\n          </button>\n\n        </div>\n\n      </form>\n\n    </div>\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '81f619976f';\nframework7Component.style = `\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let walletService;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: 'Create & Import'\n  }];\n  $on('pageInit', async () => {\n    walletService = ContainerService.getWalletService();\n    await $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-create-menu\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <div class=\"fixed-width-content center\">\n\n        <div class=\"block-title block-title-medium\">Create New</div>\n        <div class=\"list media-list inset\">\n          <ul>\n            <li>\n              <a href=\"/admin/channel/create\" class=\"item-link\">\n                <div class=\"item-content\">\n                  <div class=\"item-media\">\n                    <i class=\"material-icons\">create</i>\n                  </div>\n                  <div class=\"item-inner\">\n                    <div class=\"item-title-row\">\n                      <div class=\"item-title\">Create New Collection</div>\n                    </div>\n                </div>\n                </div>\n              </a>\n            </li>\n          </ul>\n        </div>\n  \n        <div class=\"block-title block-title-medium\">Fork Existing</div>\n        <div class=\"list media-list inset\">\n          <ul>\n            <li>\n              <a href=\"/admin/channel/fork\" class=\"item-link\">\n                <div class=\"item-content\">\n                  <div class=\"item-media\">\n                    <i class=\"material-icons\">fork_left</i>\n                  </div>\n                  <div class=\"item-inner\">\n                    <div class=\"item-title-row\">\n                      <div class=\"item-title\">From IPFS Hash</div>\n                    </div>\n                  </div>\n                </div>\n              </a>\n            </li>\n  \n  \n              ${walletService?.address ? $h`\n                <li>\n                  <a href=\"/admin/channel/fork-contract\" class=\"item-link\">\n                    <div class=\"item-content\">\n                      <div class=\"item-media\">\n                        <i class=\"material-icons\">fork_left</i>\n                      </div>\n                      <div class=\"item-inner\">\n                        <div class=\"item-title-row\">\n                          <div class=\"item-title\">From Contract</div>\n                        </div>\n                      </div>\n                    </div>\n                  </a>\n                </li>\n              ` : $h`\n                <li>\n                  <a class=\"item-link\">\n                    <div class=\"item-content\">\n                      <div class=\"item-media\">\n                        <i class=\"material-icons\">fork_left</i>\n                      </div>\n                      <div class=\"item-inner\">\n                        <div class=\"item-title-row\">\n                          <div class=\"item-title\">From Contract </div>\n                        </div>\n                        <div class=\"item-text\">Requires browser with wallet support.</div>\n  \n                      </div>\n                    </div>\n                  </a>\n                </li>\n              `}\n  \n              <li>\n                <a href=\"/admin/channel/fork-reader\" class=\"item-link\">\n                  <div class=\"item-content\">\n                    <div class=\"item-media\">\n                      <i class=\"material-icons\">fork_left</i>\n                    </div>\n                    <div class=\"item-inner\">\n                      <div class=\"item-title-row\">\n                        <div class=\"item-title\">From Reader</div>\n                      </div>\n                    </div>\n                  </div>\n                </a>\n              </li>\n  \n  \n            \n  \n          </ul>\n        </div>\n\n      </div>\n\n\n\n    </div>\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '9574625f24';\nframework7Component.style = `\n\n\n`;\nexport default framework7Component;","import { Contract, ethers } from \"ethers\";\nimport { inject, injectable } from \"inversify\";\nimport TYPES from \"./types.js\";\n\nimport { WalletService } from \"./wallet-service.js\";\n\n\n\n@injectable()\nclass ERCEventService {\n\n    constructor(\n        @inject(TYPES.WalletService) private walletService: WalletService,\n    ) {}\n\n\n    async getMintEventsForContract(contract:Contract) {\n\n        //@ts-ignore\n        let startBlock = 0\n\n        //@ts-ignore\n        let endBlock = await this.walletService.provider.getBlockNumber()\n\n        console.log(`Fetching mint transfers...`)\n\n        let events = []\n\n        let eventResult = {\n            endBlock: endBlock,\n            events: []\n        }\n\n        do {\n\n            eventResult = await this.getEvents(contract, startBlock, endBlock)\n            events.push(...eventResult.events)\n\n            console.log(`...fetched batch of ${eventResult.events?.length} from ${startBlock} to ${eventResult.endBlock} of ${endBlock}`)\n\n            startBlock = eventResult.endBlock\n\n        } while(eventResult.endBlock < endBlock)\n\n\n        console.log(`Found ${events.length} events`)\n\n\n        return events\n\n    }\n\n\n  \n\n    async getEvents(contract:Contract, startBlock:number, endBlock:number) : Promise<EventsResult> {\n\n        let events = []\n\n        let tryAgain = true\n\n        while (tryAgain) {\n\n            try {\n            \n                events = await contract.queryFilter([\n                    ethers.id(\"Transfer(address,address,uint256)\"),\n                    ethers.zeroPadValue(\"0x0000000000000000000000000000000000000000\", 32)\n                ], \n                    startBlock, \n                    endBlock\n                )\n    \n                tryAgain = false\n    \n            } catch(ex) {\n                \n                //Catch the error with their suggested range and try it again.\n                let message = ex?.error?.message\n    \n                let startEnd = message.substring(message.indexOf('[') + 1, message.indexOf(']'))?.split(',')\n    \n                if (startEnd?.length > 1) {\n    \n                    endBlock = parseInt(startEnd[1])\n    \n                } else {\n                    endBlock = startBlock //Make sure to say we didn't do anything.\n                    tryAgain = false\n                }\n    \n            }\n        }\n\n\n        return {\n            events: events,\n            endBlock: endBlock\n        }\n\n    }\n\n\n\n\n\n\n    async getTokensForContract(contract:Contract) : Promise<Set<number>> {\n\n        let events:any[] = await this.getMintEventsForContract(contract)\n\n        let tokens = events.map( e => Number( BigInt(e.topics[3]) )).sort( (a, b) => a -b)\n\n        return new Set(tokens)\n\n\n    }\n\n\n\n\n\n\n\n}\n\n\ninterface EventsResult {\n    events:any[]\n    endBlock:number\n}\n\nexport {\n    ERCEventService, EventsResult\n}","import { inject, injectable } from \"inversify\"\nimport toBuffer from 'it-to-buffer'\nimport all from 'it-all'\nimport Hash from 'ipfs-only-hash'\nimport axios from \"axios\"\nimport { v4 as uuidv4 } from 'uuid'\nimport IPFSGatewayTools from \"@pinata/ipfs-gateway-tools/dist/node.js\"\n\nimport fs from \"fs\"\n\n\nimport { Author } from \"../../dto/author.js\";\nimport { Channel } from \"../../dto/channel.js\";\nimport { Item } from \"../../dto/item.js\";\nimport { Image } from \"../../dto/image.js\";\n\nimport { AnimationService } from \"../animation-service.js\";\nimport { AuthorService } from \"../author-service.js\";\nimport { ChannelService } from \"../channel-service.js\";\nimport { ImageService } from \"../image-service.js\";\nimport { ItemService } from \"../item-service.js\";\nimport { IpfsService } from \"./ipfs-service.js\";\nimport TYPES from \"./types.js\";\nimport { WalletService } from \"./wallet-service.js\"\nimport { Animation } from \"../../dto/animation.js\"\nimport { ForkStatus } from \"../../dto/viewmodel/fork-status.js\"\nimport { Theme } from \"../../dto/theme.js\";\nimport { StaticPage } from \"../../dto/static-page.js\";\nimport { ethers } from \"ethers\";\n\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { ImportBundle, MediaDownloader } from \"../../dto/import-bundle.js\";\nimport { ThemeRepository } from \"../../repository/theme-repository.js\";\nimport { ThemeService } from \"../theme-service.js\";\n\nimport { StaticPageRepository } from \"../../repository/static-page-repository.js\";\nimport { TokenMetadataCacheRepository } from \"../../repository/token-metadata-cache-repository.js\";\n\nimport { ContractMetadata } from \"../../dto/contract-metadata.js\";\nimport { StaticPageService } from \"../static-page-service.js\";\nimport { ERCEventService } from \"./erc-event-service.js\";\nimport { AttributeOptions } from \"../../dto/attribute.js\";\n\nimport isSvg from \"is-svg\"\nimport { TokenMetadata } from \"../../dto/token-metadata-cache.js\";\nimport { QueryCache } from \"../../dto/query-cache.js\"\nimport { QueryCacheService } from \"./query-cache-service.js\"\nimport { SchemaService } from \"./schema-service.js\"\nimport { ItemWebService } from \"../web/item-web-service.js\"\nimport { ChannelWebService } from \"../web/channel-web-service.js\"\nimport { OriginalMetadataService } from \"../original-metadata-service.js\"\nimport { OriginalMetadata } from \"../../dto/original-metadata.js\"\n\n\nconst gatewayTools = new IPFSGatewayTools()\n\n@injectable()\nclass ImportService {\n\n    constructor(\n        private channelService: ChannelService,\n        private channelWebService: ChannelWebService,\n        private queryCacheService:QueryCacheService,\n        private schemaService:SchemaService,\n        private itemService: ItemService,\n        private itemWebService:ItemWebService,\n        private authorService: AuthorService,\n        private ipfsService: IpfsService,\n        private imageService: ImageService,\n        private animationService:AnimationService,\n        private themeRepository:ThemeRepository,\n        private themeService:ThemeService,\n        private staticPageRepository:StaticPageRepository,\n        private staticPageService:StaticPageService,\n        private ercEventService:ERCEventService,\n        private originalMetadataService:OriginalMetadataService,\n        private tokenMetadataCacheRepository:TokenMetadataCacheRepository,\n        @inject(TYPES.WalletService) private walletService: WalletService,\n        @inject(\"contracts\") private contracts,\n    ) {}\n\n    async importFromIPFS(cid:string, forkType:string, owner?:string) : Promise<string> {\n\n        let forkStatus:ForkStatus = {\n            animations: { saved: 0, total: 0},\n            images: { saved: 0, total: 0},\n            channels: { saved: 0, total: 0},\n            items: { saved: 0, total: 0},\n            authors: { saved: 0, total: 0},\n            themes: { saved: 0, total: 0 },\n            staticPages:  { saved: 0, total: 0 }\n        }\n\n        this.logForkProgress(forkStatus, `Starting fork of ${cid}. Fetching data...`)\n\n\n        try {\n            await this.ipfsService.filesRm('/fork', { recursive: true, flush: true})\n        } catch (ex) { }\n\n        await this.ipfsService.filesCp(`/ipfs/${cid}`, '/fork', { create: true, parents: true, flush: true })\n\n        this.logForkProgress(forkStatus, \"Processing...\")\n\n\n        //Load the directory from IPFS\n        let authors:Author[] = await this._readFile(`/fork/backup/authors.json`)\n        let channels:Channel[] = await this._readFile(`/fork/backup/channels.json`)\n        let images:Image[] = await this._readFile(`/fork/backup/images.json`)\n        let items:Item[] = await this._readFile(`/fork/backup/items.json`)\n        \n        let animations:Animation[] = await this._readFile(`/fork/backup/animations.json`)\n        let themes:Theme[] = await this._readFile(`/fork/backup/themes.json`)\n        let staticPages:StaticPage[] = await this._readFile(`/fork/backup/static-pages.json`)\n        let contractMetadata:ContractMetadata = await this._readFile(`/fork/contractMetadata.json`)\n\n        let originalMetadata:OriginalMetadata[]\n\n        try {\n            originalMetadata = await this._readFile(`/fork/backup/originalMetadata.json`)\n        } catch(ex) {}\n\n        let tokenMetadata = {}\n\n        let mediaDownloader = new IPFSDownloader(this.ipfsService)\n\n        if (forkType == \"existing\") {\n\n            for (let item of items) {\n                // this.logForkProgress(forkStatus, `Downloading metadata for token #${item.tokenId}`)\n                tokenMetadata[item.tokenId] =  await this._readFile(`/fork/metadata/${item.tokenId}.json`)\n            }\n\n            return this._importExisting(authors, channels, images, items, originalMetadata, animations, themes, staticPages, forkStatus, mediaDownloader, contractMetadata, tokenMetadata, cid)\n        \n        } else {\n\n            //Create author\n            if (owner) {\n                let author = new Author()\n                author.walletAddress = owner\n                authors = [author]\n            } \n\n            return this._importAsFork(authors, channels, images, items, originalMetadata, animations, themes, staticPages, forkStatus, mediaDownloader, contractMetadata, cid)\n        }\n\n    }\n\n    async importExistingFromContract(contractAddress:string) : Promise<string> {\n        return this._importFromContract(contractAddress, \"existing\")\n    }\n\n    async importAsForkFromContract(contractAddress:string) : Promise<string> {\n        return this._importFromContract(contractAddress, \"fork\")\n    }\n\n    async importExistingFromReader(baseURI:string, contractAddress:string, ipfsCid:string) {\n\n        let importBundle:ImportBundle = await this._buildImportBundle(baseURI)\n\n        importBundle.channels[0].contractAddress = contractAddress\n\n        importBundle.channels[0].publishReaderIPFSStatus = {}\n        importBundle.channels[0].publishReaderIPFSStatus.cid = ipfsCid\n\n        return this._importExisting(\n            importBundle.authors, \n            importBundle.channels, \n            importBundle.images, \n            importBundle.items, \n            importBundle.originalMetadata,\n            importBundle.animations, \n            importBundle.themes, \n            importBundle.staticPages, \n            importBundle.forkStatus, \n            importBundle.mediaDownloader, \n            importBundle.contractMetadata,\n            importBundle.tokenMetadata,\n            ipfsCid)\n\n    }\n\n    async importAsForkFromReader(baseURI:string, title:string, ipfsCid?:string) {\n\n        let importBundle:ImportBundle = await this._buildImportBundle(baseURI)\n\n\n        delete importBundle.channels[0].contractAddress\n        delete importBundle.channels[0].publishReaderIPFSStatus\n\n        //Set the new name\n        importBundle.channels[0].title = title\n\n        return this._importAsFork(\n            importBundle.authors, \n            importBundle.channels, \n            importBundle.images, \n            importBundle.items, \n            importBundle.originalMetadata,\n            importBundle.animations, \n            importBundle.themes, \n            importBundle.staticPages, \n            importBundle.forkStatus, \n            importBundle.mediaDownloader,\n            importBundle.contractMetadata,\n            ipfsCid)\n    }\n\n    private async _buildImportBundle(baseURI:string) : Promise<ImportBundle> {\n\n        let forkStatus:ForkStatus = {\n            animations: { saved: 0, total: 0},\n            images: { saved: 0, total: 0},\n            channels: { saved: 0, total: 0},\n            items: { saved: 0, total: 0},\n            authors: { saved: 0, total: 0},\n            themes: { saved: 0, total: 0 },\n            staticPages:  { saved: 0, total: 0 }\n        }\n\n        this.logForkProgress(forkStatus, \"Processing...\")\n\n        //Load the files from the server.\n        let authors:Author[] = await this._fetchFile(`${baseURI}backup/export/backup/authors.json`)\n        let channels:Channel[] = await this._fetchFile(`${baseURI}backup/export/backup/channels.json`)\n        let images:Image[] = await this._fetchFile(`${baseURI}backup/export/backup/images.json`)\n        let items:Item[] = await this._fetchFile(`${baseURI}backup/export/backup/items.json`)\n\n        let animations:Animation[] = await this._fetchFile(`${baseURI}backup/export/backup/animations.json`)\n        let themes:Theme[] = await this._fetchFile(`${baseURI}backup/export/backup/themes.json`)\n        let staticPages:StaticPage[] = await this._fetchFile(`${baseURI}backup/export/backup/static-pages.json`)\n\n        let contractMetadata:ContractMetadata = await this._fetchFile(`${baseURI}backup/export/contractMetadata.json`)\n\n        let originalMetadata:OriginalMetadata[]\n\n        try {\n            originalMetadata= await this._fetchFile(`${baseURI}backup/export/backup/originalMetadata.json`)\n        } catch(ex) {}\n\n\n        let mediaDownloader = new URLDownloader(baseURI)\n\n        let tokenMetadata = {}\n\n        for (let item of items) {\n            tokenMetadata[item.tokenId] =  await this._fetchFile(`${baseURI}backup/export/metadata/${item.tokenId}.json`)\n        }\n\n        return {\n            authors: authors,\n            channels: channels,\n            images: images,\n            items: items,\n            originalMetadata: originalMetadata,\n            animations: animations,\n            themes: themes,\n            staticPages: staticPages,\n            mediaDownloader: mediaDownloader,\n            forkStatus: forkStatus,\n            contractMetadata: contractMetadata,\n            tokenMetadata: tokenMetadata\n\n        }\n\n    }\n\n    private async _importFromContract(contractAddress:string, forkType:string) : Promise<string> {\n\n        let forkStatus:ForkStatus = {\n            animations: { saved: 0, total: 0},\n            images: { saved: 0, total: 0},\n            channels: { saved: 0, total: 0},\n            items: { saved: 0, total: 0},\n            authors: { saved: 0, total: 0},\n            themes: { saved: 0, total: 0 },\n            staticPages:  { saved: 0, total: 0 }\n        }\n\n        let wallet = this.walletService.wallet\n\n        //Look up channel since it has the basic ERC721 signature\n        let contract = new ethers.Contract(contractAddress, this._getERC721ABI(), wallet ? wallet : this.walletService.provider)\n\n        this.logForkProgress(forkStatus, `Fetching tokens for contract ${contractAddress}`)\n\n\n        let tokenIds = await this.ercEventService.getTokensForContract(contract)\n\n        \n        forkStatus.channels.total = 1\n        forkStatus.items.total = tokenIds.size\n\n\n        //Create channel\n        let channel:Channel = new Channel()\n\n        channel.importSuccess = false\n\n        if (forkType == \"existing\") {\n            channel.contractAddress = contractAddress\n        }\n\n        channel.forkType = forkType\n\n        channel.title = await contract.name()\n        channel.symbol = await contract.symbol() \n        // channel.sellerFeeBasisPoints = 0\n\n\n        channel.attributeOptions = []\n\n        //Insert channel to get an _id\n        await this.channelWebService.put(channel)\n\n\n        let tokenIdStatsQueryCache = new QueryCache()\n        tokenIdStatsQueryCache._id = `token_id_stats_by_channel_${channel._id}`\n        tokenIdStatsQueryCache.result = {\n            min: undefined,\n            max: undefined,\n            count: 0\n        }\n\n\n        await this.schemaService.loadChannel(channel._id)\n\n        let skippedTokens = []\n\n        //Fetch token metadata for all tokens\n        for (let tokenId of tokenIds) {\n\n            this.logForkProgress(forkStatus, `Fetching metadata for #${tokenId}`)\n\n            try {\n\n                let metadata = await this._getTokenMetadata(contract, tokenId )\n\n                if (!metadata.tokenId) {\n                    skippedTokens.push(tokenId)\n                    this.logForkProgress(forkStatus, `Metadata for #${tokenId} not found. Skipping import.`)\n                    continue\n                }\n\n                this.logForkProgress(forkStatus, `Importing token #${metadata.tokenId}`)\n    \n                console.time(`Importing token #${metadata.tokenId}`)\n    \n                let item:Item = new Item()\n                \n                let image:Image\n                let animation:Animation\n    \n                if (metadata.image || metadata.image_url) {\n    \n                    //Fetch and create image\n                    let imageURI = metadata.image ? metadata.image : metadata.image_url\n                    let imageData = await this._fetchURI(imageURI)\n    \n                    //Figure out if it's an svg and save appropriately\n                    if (isSvg(new TextDecoder().decode(imageData))) {\n                        image = await this.imageService.newFromSvg(new TextDecoder().decode(imageData))\n                    } else {\n                        image = await this.imageService.newFromBuffer(imageData)\n                    }\n    \n                    try {\n                        await this.imageService.put(image)\n                    } catch(ex) {} //ignore duplicates\n                    \n                    item.coverImageId = image._id\n    \n                    forkStatus.images.saved++\n                    this.logForkProgress(forkStatus, `Importing image ${image._id}`)\n    \n    \n                } else {\n                    throw new Error(\"No image in metadata\")\n                }\n    \n    \n                //Create or save animation\n                if (metadata.animation_url) {\n    \n                    item.coverImageAsAnimation = false\n    \n                    //Fetch and create animation\n                    animation = await this.animationService.newFromText(new TextDecoder().decode(await this._fetchURI(metadata.animation_url)))\n    \n    \n                    //Save animation\n                    try {\n                        await this.animationService.put(animation)\n                    } catch(ex) {} //ignore duplicates\n    \n                    \n                    forkStatus.animations.saved++\n                    this.logForkProgress(forkStatus, `Importing animation ${animation._id}`)\n    \n                    item.animationId = animation._id \n    \n    \n                } else {\n                    item.coverImageAsAnimation = true \n                }\n        \n                item.tokenId = metadata.tokenId \n                item.title = metadata.name \n                item.channelId = channel._id\n                item.attributeSelections = []\n    \n                //Build attributes for item\n                for (let attribute of metadata.attributes) {\n    \n                    item.attributeSelections.push({\n                        traitType: attribute.trait_type,\n                        value: attribute.value\n                    })\n    \n                    this._addAttributeToChannel(attribute, channel)\n    \n                }\n                \n                //Save metadata\n                let originalMetadata = await this.originalMetadataService.newFromText(JSON.stringify(metadata))\n    \n                await this.originalMetadataService.put(originalMetadata)\n    \n                item.originalJSONMetadataId = originalMetadata._id\n    \n                //Save item\n                await this.itemWebService.put({\n                    channel: channel,\n                    item: item,\n                    updateQueryCache: false,\n                    publish: false\n                })\n    \n                //Update token stats\n                tokenIdStatsQueryCache.result.count++\n    \n                if (!tokenIdStatsQueryCache.result.min || item.tokenId < tokenIdStatsQueryCache.result.min) {\n                    tokenIdStatsQueryCache.result.min = item.tokenId\n                }\n    \n                if (!tokenIdStatsQueryCache.result.max || item.tokenId > tokenIdStatsQueryCache.result.max) {\n                    tokenIdStatsQueryCache.result.max = item.tokenId\n                }\n    \n                forkStatus.items.saved++\n                // this.logForkProgress(forkStatus, `Importing item ${item._id}`)\n    \n                // console.timeEnd(`Importing token #${metadata.tokenId}`)\n    \n                if (metadata.image || metadata.image_url) {\n                    forkStatus.images.total++\n                }\n    \n                if (metadata.animation_url) {\n                    forkStatus.animations.total++\n                }\n    \n                console.timeEnd(`Importing token #${metadata.tokenId}`)\n\n\n            } catch(ex) {\n                console.log(`Error importing token ${tokenId}: ${ex.message}`)\n            }\n            \n\n        }\n\n        this.logForkProgress(forkStatus, `Skipped tokens: ${skippedTokens}`)\n\n\n        this.logForkProgress(forkStatus, `Building query cache for channel ${channel._id}`)\n\n\n        await this.channelService.buildAttributeCounts(channel._id)\n\n\n\n        //Update existing token cache if it exists or create a new one.\n        let existingTokenIdStatsCache \n\n        try {\n            existingTokenIdStatsCache = await this.queryCacheService.get(tokenIdStatsQueryCache._id)\n        } catch (ex) {}\n\n        if (existingTokenIdStatsCache) {\n            tokenIdStatsQueryCache._rev = existingTokenIdStatsCache._rev\n        }\n\n        await this.queryCacheService.put(tokenIdStatsQueryCache)\n\n\n        channel.importSuccess = true\n        await this.channelWebService.put(channel)\n\n        forkStatus.channels.saved++\n        this.logForkProgress(forkStatus, `Importing channel ${channel._id}`)\n\n        // await this.ipfsService.ipfs.files.flush(`/export/${channel._id}/`)\n\n        \n        return channel._id\n\n    }\n\n    private async _importAsFork(authors:Author[], channels:Channel[], images:Image[], items:Item[], originalMetadatas:OriginalMetadata[], animations:Animation[], themes:Theme[], staticPages:StaticPage[], forkStatus:ForkStatus, mediaDownloader:MediaDownloader, contractMetadata:ContractMetadata, cid?:string) {\n\n        let channelId \n        let channel\n\n        let idMap = new Map<string, string>()\n\n\n        if (!authors || !channels || !images || !items) {\n            throw new Error(\"Invalid collection hash\")\n        }\n\n        \n        forkStatus.authors.total = authors.length\n        forkStatus.channels.total = channels.length\n        forkStatus.images.total = images.length\n        forkStatus.items.total = items.length\n        forkStatus.animations.total = animations.length\n        forkStatus.themes.total = themes.length\n        forkStatus.staticPages.total = staticPages.length\n\n        this.logForkProgress(forkStatus, \"Updating totals...\")\n\n        channel = new Channel()\n        Object.assign(channel, channels[0])\n\n        channel.forkType = \"fork\"\n        channel.forkedFromFeeRecipient = contractMetadata.fee_recipient\n\n\n\n        //Insert channel\n        let oldId = `${channel._id}`\n\n        delete channel._id\n        delete channel._rev \n        delete channel[\"_rev_tree\"]\n\n    \n        //Mark parent\n        if (cid) {\n            channel.forkedFromCid = cid\n        } \n\n        channel.forkedFromId = oldId\n\n        await this.channelWebService.put(channel) \n\n        idMap.set(oldId, channel._id)\n        channelId = channel._id\n\n        forkStatus.channels.saved++\n        this.logForkProgress(forkStatus, `Inserted channel ${channel._id}`)\n\n\n\n        let tokenIdStatsQueryCache = new QueryCache()\n        tokenIdStatsQueryCache._id = `token_id_stats_by_channel_${channel._id}`\n        tokenIdStatsQueryCache.result = {\n            min: undefined,\n            max: undefined,\n            count: 0\n        }\n\n\n        await this.schemaService.loadChannel(channel._id)\n\n\n        //Get the new author ID\n        channel.authorId = this.walletService.address?.toString()\n\n        //Add it if doesn't exist \n        if (channel.authorId) {\n            await this.authorService.insertIfNew(channel.authorId)\n        }\n\n\n        //Loop through the contents and insert each one like it's an unseen row\n        for (let author of authors) {\n            \n            delete author._rev \n            delete author[\"_rev_tree\"]\n\n            await this.authorService.put(Object.assign(new Author(), author))           \n\n            forkStatus.authors.saved++\n            this.logForkProgress(forkStatus, `Inserted author ${author._id}`)\n        }\n\n\n        for (let animation of animations) {\n\n            //Load content\n            animation.content = await mediaDownloader.getAsString(`animations/${animation.cid}.html`)\n\n            //Validate we match the IPFS cid \n            // let expectedCid = await Hash.of(animation.content)\n\n            // if (expectedCid.toString() != animation.cid) {    \n            //     throw new Error(`Incorrect cid when importing animation. Expected: ${animation.cid}, Result: ${expectedCid.toString()}`)\n            // }\n\n\n            let animationObj = Object.assign(new Animation(), animation)\n\n            try {\n                await this.animationService.put(animationObj)\n                // await this.itemWebService.publishAnimation(channels[0], animationObj.cid, false)\n            } catch (ex) {} //ignore duplicates   \n\n            forkStatus.animations.saved++\n            this.logForkProgress(forkStatus, `Inserted animation ${animationObj._id}`)\n\n        }\n\n        for (let image of images) {\n\n            let content\n\n            //Load content\n            if (image.generated) {\n                image.svg = await mediaDownloader.getAsString(`images/${image.cid}.${image.generated ? 'svg' : 'jpg' }`)\n                content = image.svg\n            } else {\n                image.buffer = await mediaDownloader.getAsBuffer(`images/${image.cid}.${image.generated ? 'svg' : 'jpg' }`)\n                content = new Uint8Array(image.buffer)\n            }\n\n\n            let imageObj = Object.assign(new Image(), image)\n\n            // //Validate we match the IPFS cid \n            // let expectedCid = await Hash.of(content)\n\n            // if (expectedCid.toString() != image.cid) {    \n            //     throw new Error(`Incorrect cid when importing image. Expected: ${image.cid}, Result: ${expectedCid.toString()}`)\n            // }\n\n            try {\n                await this.imageService.put(imageObj)\n                // await this.itemWebService.publishImage(channels[0], imageObj.cid, false)\n\n            } catch (ex) {} //ignore duplicates   \n\n            forkStatus.images.saved++\n            this.logForkProgress(forkStatus, `Inserted image ${imageObj._id}`)\n\n        }\n\n        for (let theme of themes) {\n\n            let oldId = theme._id\n\n            delete theme._id\n            delete theme._rev \n            delete theme[\"_rev_tree\"]\n\n            theme.channelId = idMap.get(theme.channelId) //look up the new channel ID\n\n            let themeObj = Object.assign(new Theme(), theme)\n\n            theme.forkedFromId = oldId\n\n            await this.themeService.put(themeObj)           \n\n            //map old id\n            idMap.set(oldId, themeObj._id)\n\n            forkStatus.themes.saved++\n            this.logForkProgress(forkStatus, `Inserted theme ${themeObj._id}`)\n        }\n\n        for (let staticPage of staticPages) {\n\n            let oldId = staticPage._id\n\n            delete staticPage._id\n            delete staticPage._rev \n            delete staticPage[\"_rev_tree\"]\n\n            staticPage.channelId = idMap.get(staticPage.channelId) //look up the new channel ID\n\n            staticPage.forkedFromId = oldId\n\n            let staticPageObj = Object.assign(new StaticPage(), staticPage)\n\n            try {\n                await this.staticPageService.put(staticPageObj)\n            } catch (ex) {} //ignore duplicates            \n\n            forkStatus.staticPages.saved++\n            this.logForkProgress(forkStatus, `Inserted static page ${staticPageObj._id}`)\n        }\n\n        for (let item of items) {\n            \n            let oldId = item._id\n\n            delete item._id\n            delete item._rev \n            delete item[\"_rev_tree\"]\n\n            item.channelId = idMap.get(item.channelId) //look up the new channel ID\n\n            //Get image data and re-insert it into the content ops\n            if (item.content?.ops?.length > 0) {\n\n                let ops = []\n\n                for (let op of item.content.ops) {\n\n                    if (op.insert && op.insert.ipfsimage) {\n\n                        let image:Image = await this.imageService.get(op.insert.ipfsimage.cid)\n                        op.insert.ipfsimage.src = await this.imageService.getUrl(image)\n                    }\n\n                    ops.push(op)\n                }\n\n                item.content.ops = ops\n\n            }\n\n            //Loop through themes and update IDs\n            if (item.themes?.length > 0) {\n\n                let updatedThemes:string[] = []\n\n                for (let theme of item.themes) {\n                    updatedThemes.push(idMap.get(theme))\n                }\n    \n                item.themes = updatedThemes\n            }\n\n            item.forkedFromId = oldId\n\n\n            let itemObj = Object.assign(new Item(), item)\n\n            await this.itemWebService.put({\n                channel: channel,\n                item: itemObj,\n                updateQueryCache: false,\n                publish: false\n            }) \n\n\n\n            //Update token stats\n            tokenIdStatsQueryCache.result.count++\n\n            if (!tokenIdStatsQueryCache.result.min || item.tokenId < tokenIdStatsQueryCache.result.min) {\n                tokenIdStatsQueryCache.result.min = item.tokenId\n            }\n\n            if (!tokenIdStatsQueryCache.result.max || item.tokenId > tokenIdStatsQueryCache.result.max) {\n                tokenIdStatsQueryCache.result.max = item.tokenId\n            }\n\n\n\n            forkStatus.items.saved++\n            this.logForkProgress(forkStatus, `Inserted item ${itemObj._id}`)\n\n        }\n\n    \n        // console.log(channel)\n\n\n        this.logForkProgress(forkStatus, `\n        ******************************\\n\n        ******************************\\n\n        ******************************\\n\n                Import complete\\n\n        ******************************\\n\n        ******************************\\n\n        ******************************\n        `)\n\n        this.logForkProgress(forkStatus, `Building query cache for channel ${channelId}`)    \n\n        await this.channelService.buildAttributeCounts(channel._id)\n\n\n\n        //Update existing token cache if it exists or create a new one.\n        let existingTokenIdStatsCache \n\n        try {\n            existingTokenIdStatsCache = await this.queryCacheService.get(tokenIdStatsQueryCache._id)\n        } catch (ex) {}\n\n        if (existingTokenIdStatsCache) {\n            tokenIdStatsQueryCache._rev = existingTokenIdStatsCache._rev\n        }\n\n        await this.queryCacheService.put(tokenIdStatsQueryCache)\n\n\n        channel.importSuccess = true\n        await this.channelWebService.put(channel) \n\n        // await this.ipfsService.ipfs.files.flush(`/export/${channel._id}/`)\n\n\n        return channelId\n    }\n\n    private async _importExisting(authors:Author[], channels:Channel[], images:Image[], items:Item[], originalMetadatas:OriginalMetadata[], animations:Animation[], themes:Theme[], staticPages:StaticPage[], forkStatus:ForkStatus, mediaDownloader:MediaDownloader, contractMetadata:ContractMetadata, tokenMetadata:any, cid?:string) {\n\n        if (!authors || !channels || !images || !items) {\n            throw new Error(\"Invalid collection hash\")\n        }\n\n        let channelId\n        let channel\n\n        forkStatus.authors.total = authors.length\n        forkStatus.channels.total = channels.length\n        forkStatus.images.total = images.length\n        forkStatus.items.total = items.length\n        forkStatus.animations.total = animations.length\n        forkStatus.themes.total = themes.length\n        forkStatus.staticPages.total = staticPages.length\n\n        this.logForkProgress(forkStatus, \"Updating totals...\")\n\n        channel = Object.assign(new Channel(), channels[0])\n\n        channel.forkType = \"existing\"\n        channel.forkedFromFeeRecipient = contractMetadata.fee_recipient\n\n\n\n        //Remove any existing rev info\n        delete channel._rev\n        delete channel[\"_rev_tree\"]\n\n        //Check if it exists\n        let channelObj = await this.channelService.getLatestRevision(channel._id)\n\n        if (channelObj) {\n            channel[\"_deleted\"] = false\n            channel._rev = channelObj._rev\n        }\n\n\n        await this.channelWebService.put(channel)  \n\n\n\n\n        channelId = channel._id\n\n        forkStatus.channels.saved++\n        this.logForkProgress(forkStatus, `Inserted channel ${channel._id}`)\n\n\n\n        let tokenIdStatsQueryCache = new QueryCache()\n        tokenIdStatsQueryCache._id = `token_id_stats_by_channel_${channel._id}`\n        tokenIdStatsQueryCache.result = {\n            min: undefined,\n            max: undefined,\n            count: 0\n        }\n\n        await this.schemaService.loadChannel(channelId)\n\n        //Loop through the contents and insert each one like it's an unseen row\n        for (let author of authors) {\n\n            delete author._rev \n            delete author[\"_rev_tree\"]\n\n            //Check if it exists\n            let authorObj = await this.authorService.getLatestRevision(author._id)\n            authorObj[\"_deleted\"] = false\n\n            await this.authorService.put(Object.assign(authorObj, author))           \n\n            forkStatus.authors.saved++\n            this.logForkProgress(forkStatus, `Inserted author ${author._id}`)\n        }\n\n\n        for (let animation of animations) {\n\n            //Load content\n            animation.content = await mediaDownloader.getAsString(`animations/${animation.cid}.html`)\n\n\n            // //Validate we match the IPFS cid \n            // let expectedCid = await Hash.of(animation.content)\n\n            // if (expectedCid.toString() != animation.cid) {    \n            //     throw new Error(`Incorrect cid when importing animation. Expected: ${animation.cid}, Result: ${expectedCid.toString()}`)\n            // }\n\n\n            let animationObj = Object.assign(new Animation(), animation)\n\n            try {\n                await this.animationService.put(animationObj)\n            } catch (ex) {} //ignore duplicates   \n\n            forkStatus.animations.saved++\n            this.logForkProgress(forkStatus)\n\n        }\n\n        for (let image of images) {\n\n            let content\n\n            //Load content\n            if (image.generated) {\n                image.svg = await mediaDownloader.getAsString(`images/${image.cid}.${image.generated ? 'svg' : 'jpg' }`)\n                content = image.svg\n            } else {\n                image.buffer = await mediaDownloader.getAsBuffer(`images/${image.cid}.${image.generated ? 'svg' : 'jpg' }`)\n                content = new Uint8Array(image.buffer)\n            }\n\n\n            let imageObj = Object.assign(new Image(), image)\n\n            //Validate we match the IPFS cid \n            // let expectedCid = await Hash.of(content)\n\n            // if (expectedCid.toString() != image.cid) {    \n            //     throw new Error(`Incorrect cid when importing image. Expected: ${image.cid}, Result: ${expectedCid.toString()}`)\n            // }\n\n\n            try {\n                await this.imageService.put(imageObj)\n            } catch (ex) {} //ignore duplicates   \n\n            forkStatus.images.saved++\n            this.logForkProgress(forkStatus)\n\n        }\n\n        for (let theme of themes) {\n\n            //Remove any existing rev info\n            delete theme._rev\n            delete theme[\"_rev_tree\"]\n\n            //Check if it exists\n            let themeObj = await this.themeRepository.getLatestRevision(theme._id)\n            themeObj[\"_deleted\"] = false\n\n            await this.themeRepository.put(Object.assign(themeObj, theme))           \n\n            forkStatus.themes.saved++\n            this.logForkProgress(forkStatus, `Inserted theme ${themeObj._id}`)\n        }\n\n        for (let staticPage of staticPages) {\n\n            //Remove any existing rev info\n            delete staticPage._rev\n            delete staticPage[\"_rev_tree\"]\n\n            //Check if it exists\n            let staticPageObj = await this.staticPageRepository.getLatestRevision(staticPage._id)\n            staticPageObj[\"_deleted\"] = false\n            \n            await this.staticPageRepository.put(Object.assign(staticPageObj, staticPage))          \n\n            forkStatus.staticPages.saved++\n            this.logForkProgress(forkStatus, `Inserted static page ${staticPageObj._id}`)\n        }\n\n        for (let item of items) {\n           \n\n            //Get image data and re-insert it into the content ops\n            if (item.content?.ops?.length > 0) {\n\n                let ops = []\n\n                for (let op of item.content.ops) {\n\n                    if (op.insert && op.insert.ipfsimage) {\n\n                        let image:Image = await this.imageService.get(op.insert.ipfsimage.cid)\n                        op.insert.ipfsimage.src = await this.imageService.getUrl(image)\n                    }\n\n                    ops.push(op)\n                }\n\n                item.content.ops = ops\n\n            }\n\n            //Remove any existing rev info\n            delete item._rev\n            delete item[\"_rev_tree\"]\n\n            //Check if it exists\n            let itemObj = await this.itemService.getLatestRevision(item._id)\n\n            if (itemObj) {\n                item[\"_deleted\"] = false\n                item._rev = itemObj._rev\n            }\n\n\n            //Save metadata\n            let originalMetadata = await this.originalMetadataService.newFromText(JSON.stringify(tokenMetadata[item.tokenId]))\n            await this.originalMetadataService.put(originalMetadata)\n            item.originalJSONMetadataId = originalMetadata._id\n\n            //Save image\n            await this.itemWebService.put({\n                channel: channel,\n                item: Object.assign(new Item(), item),\n                updateQueryCache: false,\n                publish: false\n            })  \n\n\n            //Update token stats\n            tokenIdStatsQueryCache.result.count++\n\n            if (!tokenIdStatsQueryCache.result.min || item.tokenId < tokenIdStatsQueryCache.result.min) {\n                tokenIdStatsQueryCache.result.min = item.tokenId\n            }\n\n            if (!tokenIdStatsQueryCache.result.max || item.tokenId > tokenIdStatsQueryCache.result.max) {\n                tokenIdStatsQueryCache.result.max = item.tokenId\n            }\n\n\n            forkStatus.items.saved++\n            this.logForkProgress(forkStatus)\n\n        }\n\n\n\n        this.logForkProgress(forkStatus, `\n        ******************************\\n\n        ******************************\\n\n        ******************************\\n\n                Import complete\\n\n        ******************************\\n\n        ******************************\\n\n        ******************************\n        `)\n\n        this.logForkProgress(forkStatus, `Building query cache for channel ${channel._id}`)    \n\n        await this.channelService.buildAttributeCounts(channel._id)\n\n        //Update existing token cache if it exists or create a new one.\n        let existingTokenIdStatsCache \n\n        try {\n            existingTokenIdStatsCache = await this.queryCacheService.get(tokenIdStatsQueryCache._id)\n        } catch (ex) {}\n\n        if (existingTokenIdStatsCache) {\n            tokenIdStatsQueryCache._rev = existingTokenIdStatsCache._rev\n        }\n\n        await this.queryCacheService.put(tokenIdStatsQueryCache)\n\n\n        channel.importSuccess = true\n\n        await this.channelWebService.put(channel) \n\n        // await this.ipfsService.ipfs.files.flush(`/export/${channel._id}/`)\n\n        this.logForkProgress(forkStatus, `Forking channel ${channel._id} complete`)\n\n\n        \n        return channels[0]._id\n    }\n\n    private _addAttributeToChannel(attribute: { trait_type: string; value: string; }, channel: Channel) {\n    \n        let attributeOptions:AttributeOptions\n\n        //Check if the trait_type is already on the channel\n        let matching = channel.attributeOptions.filter(ao => ao.traitType == attribute.trait_type)\n\n        if (matching?.length > 0) {\n            attributeOptions = matching[0]            \n        } else {\n            channel.attributeOptions.push({ \n                id: uuidv4(),\n                traitType: attribute.trait_type, \n                values: [attribute.value] \n            })\n            attributeOptions = channel.attributeOptions[channel.attributeOptions.length - 1]\n        }\n\n        //Add the value if it doesn't exist\n        if (!attributeOptions.values.includes(attribute.value)) {\n            attributeOptions.values.push(attribute.value)\n        }\n\n\n    }\n\n    private async _getTokenMetadata(contract, tokenId:number) : Promise<TokenMetadata> {\n\n        let cacheId = `${await contract.getAddress()}-${tokenId}`\n\n        //Check the cache\n        let existing\n\n        try {\n            existing = await this.tokenMetadataCacheRepository.get(cacheId)\n        } catch(ex) {}\n        \n        if (existing) {\n            console.log(`Returning cached token metadata #${tokenId}`)\n            return existing.tokenMetadata\n        } \n\n        \n        let tokenURI = await contract.tokenURI(tokenId)\n\n        let metadataData = await this._fetchURI(tokenURI)\n\n        //Some collections \n        let metadata = JSON.parse(new TextDecoder().decode(metadataData))\n\n        metadata.tokenId = tokenId\n\n        //Cache it\n        await this.tokenMetadataCacheRepository.put({\n            _id: cacheId,\n            tokenMetadata: metadata,\n            dateCreated: new Date().toJSON()\n        })\n\n\n        return metadata\n\n    }\n\n    private async _fetchURI(uri) {\n        \n        if (uri.startsWith(\"data:application/json;utf-8,\")) {\n\n            return Buffer.from(uri.substring(28, uri.length))\n\n        } else if (uri.startsWith(\"data:image/bmp;base64,\")) {\n\n            return Buffer.from(uri.substring(22, uri.length), \"base64\")\n\n\n        } else if (uri.startsWith(\"http\")) {\n\n            //Get from old interwebs\n            let result = await axios.get(uri, {\n                responseType: \"arraybuffer\",\n            })\n\n            return Buffer.from(result.data,'binary')\n\n\n        } else {\n\n            let containResults = gatewayTools.containsCID(uri)\n\n            if (containResults?.containsCid) {\n\n                uri = gatewayTools.convertToDesiredGateway(uri, '')\n    \n                //Get from IPFS\n                const data = uint8ArrayConcat(await all(this.ipfsService.ipfs.cat(uri)))\n    \n                return data\n    \n            } \n\n        }\n\n    }\n\n    private async _readFile(filename:string) {\n        let bufferedContents = await toBuffer(this.ipfsService.ipfs.files.read(filename)) \n        return JSON.parse(new TextDecoder(\"utf-8\").decode(bufferedContents))\n\n    }\n\n    private async _fetchFile(filename:string) {\n        let response = await axios.get(filename)\n        return response.data\n    }\n\n    private logForkProgress(forkStatus:ForkStatus, message?: string) {\n\n        if (message) {\n            console.log(message)\n        }\n        \n\n        if (typeof window !== \"undefined\" && typeof window.document !== \"undefined\") {\n            // browser\n            const e = new CustomEvent('fork-progress', {\n                detail: { \n                    forkStatus: forkStatus,\n                    message: message \n                }\n            })\n\n            document.dispatchEvent(e)\n\n        }\n\n    }\n\n    private _getERC721ABI() {\n        return `[\n            {\n                \"inputs\":[\n                   {\n                      \"internalType\":\"string\",\n                      \"name\":\"name\",\n                      \"type\":\"string\"\n                   },\n                   {\n                      \"internalType\":\"string\",\n                      \"name\":\"symbol\",\n                      \"type\":\"string\"\n                   }\n                ],\n                \"stateMutability\":\"nonpayable\",\n                \"type\":\"constructor\"\n            },\n\n            {\n              \"constant\": true,\n              \"inputs\": [],\n              \"name\": \"name\",\n              \"outputs\": [\n                {\n                  \"name\": \"\",\n                  \"type\": \"string\"\n                }\n              ],\n              \"payable\": false,\n              \"stateMutability\": \"view\",\n              \"type\": \"function\"\n            },\n            {\n              \"constant\": false,\n              \"inputs\": [\n                {\n                  \"name\": \"_spender\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"name\": \"_value\",\n                  \"type\": \"uint256\"\n                }\n              ],\n              \"name\": \"approve\",\n              \"outputs\": [\n                {\n                  \"name\": \"\",\n                  \"type\": \"bool\"\n                }\n              ],\n              \"payable\": false,\n              \"stateMutability\": \"nonpayable\",\n              \"type\": \"function\"\n            },\n            {\n              \"constant\": true,\n              \"inputs\": [],\n              \"name\": \"totalSupply\",\n              \"outputs\": [\n                {\n                  \"name\": \"\",\n                  \"type\": \"uint256\"\n                }\n              ],\n              \"payable\": false,\n              \"stateMutability\": \"view\",\n              \"type\": \"function\"\n            },\n            {\n              \"constant\": false,\n              \"inputs\": [\n                {\n                  \"name\": \"_from\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"name\": \"_to\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"name\": \"_value\",\n                  \"type\": \"uint256\"\n                }\n              ],\n              \"name\": \"transferFrom\",\n              \"outputs\": [\n                {\n                  \"name\": \"\",\n                  \"type\": \"bool\"\n                }\n              ],\n              \"payable\": false,\n              \"stateMutability\": \"nonpayable\",\n              \"type\": \"function\"\n            },\n            {\n              \"constant\": true,\n              \"inputs\": [],\n              \"name\": \"decimals\",\n              \"outputs\": [\n                {\n                  \"name\": \"\",\n                  \"type\": \"uint8\"\n                }\n              ],\n              \"payable\": false,\n              \"stateMutability\": \"view\",\n              \"type\": \"function\"\n            },\n            {\n              \"constant\": true,\n              \"inputs\": [\n                {\n                  \"name\": \"_owner\",\n                  \"type\": \"address\"\n                }\n              ],\n              \"name\": \"balanceOf\",\n              \"outputs\": [\n                {\n                  \"name\": \"balance\",\n                  \"type\": \"uint256\"\n                }\n              ],\n              \"payable\": false,\n              \"stateMutability\": \"view\",\n              \"type\": \"function\"\n            },\n            {\n              \"constant\": true,\n              \"inputs\": [],\n              \"name\": \"symbol\",\n              \"outputs\": [\n                {\n                  \"name\": \"\",\n                  \"type\": \"string\"\n                }\n              ],\n              \"payable\": false,\n              \"stateMutability\": \"view\",\n              \"type\": \"function\"\n            },\n            {\n              \"constant\": false,\n              \"inputs\": [\n                {\n                  \"name\": \"_to\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"name\": \"_value\",\n                  \"type\": \"uint256\"\n                }\n              ],\n              \"name\": \"transfer\",\n              \"outputs\": [\n                {\n                  \"name\": \"\",\n                  \"type\": \"bool\"\n                }\n              ],\n              \"payable\": false,\n              \"stateMutability\": \"nonpayable\",\n              \"type\": \"function\"\n            },\n            {\n              \"constant\": true,\n              \"inputs\": [\n                {\n                  \"name\": \"_owner\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"name\": \"_spender\",\n                  \"type\": \"address\"\n                }\n              ],\n              \"name\": \"allowance\",\n              \"outputs\": [\n                {\n                  \"name\": \"\",\n                  \"type\": \"uint256\"\n                }\n              ],\n              \"payable\": false,\n              \"stateMutability\": \"view\",\n              \"type\": \"function\"\n            },\n            {\n              \"payable\": true,\n              \"stateMutability\": \"payable\",\n              \"type\": \"fallback\"\n            },\n            {\n              \"anonymous\": false,\n              \"inputs\": [\n                {\n                  \"indexed\": true,\n                  \"name\": \"owner\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"indexed\": true,\n                  \"name\": \"spender\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"indexed\": false,\n                  \"name\": \"value\",\n                  \"type\": \"uint256\"\n                }\n              ],\n              \"name\": \"Approval\",\n              \"type\": \"event\"\n            },\n            {\n              \"anonymous\": false,\n              \"inputs\": [\n                {\n                  \"indexed\": true,\n                  \"name\": \"from\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"indexed\": true,\n                  \"name\": \"to\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"indexed\": false,\n                  \"name\": \"value\",\n                  \"type\": \"uint256\"\n                }\n              ],\n              \"name\": \"Transfer\",\n              \"type\": \"event\"\n            },\n            {\n                \"inputs\":[\n                   {\n                      \"internalType\":\"uint256\",\n                      \"name\":\"tokenId\",\n                      \"type\":\"uint256\"\n                   }\n                ],\n                \"name\":\"tokenURI\",\n                \"outputs\":[\n                   {\n                      \"internalType\":\"string\",\n                      \"name\":\"\",\n                      \"type\":\"string\"\n                   }\n                ],\n                \"stateMutability\":\"view\",\n                \"type\":\"function\"\n             }\n             \n          ]`\n    }\n\n}\n\n\n\n\n\nclass IPFSDownloader implements MediaDownloader {\n    \n    basePath:string = \"/fork/\"\n\n    constructor(\n        private ipfsService:IpfsService\n    ) {}\n\n    async getAsString(filename:string): Promise<string> {        \n        let bufferedContents = await toBuffer(this.ipfsService.ipfs.files.read(`${this.basePath}${filename}`)) \n        return new TextDecoder(\"utf-8\").decode(bufferedContents)\n    }\n\n    async getAsBuffer(filename:string): Promise<Uint8Array> {        \n        return toBuffer(this.ipfsService.ipfs.files.read(`${this.basePath}${filename}`)) \n    }\n\n}\n\nclass URLDownloader implements MediaDownloader {\n    \n    constructor(\n        public basePath: string\n    ) {}\n\n    async getAsString(path:string): Promise<string> {\n        \n        let response = await axios.get(`${this.basePath}backup/export/${path}`)\n        return response.data?.toString()\n    }\n\n    async getAsBuffer(path:string): Promise<Uint8Array> {\n\n        let response = await axios.get(`${this.basePath}backup/export/${path}`, {\n            responseType: \"arraybuffer\"\n        })\n        return response.data\n    }\n\n}\n\n\n\n\n\n\n\n\nexport {\n    ImportService\n}","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport { ImportService } from \"../../../service/core/import-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let importService = ContainerService.getInstance(ImportService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let walletService = ContainerService.getWalletService();\n  let uiService = ContainerService.getInstance(UiService);\n  let ipfsReady = ipfsService.ipfs != undefined;\n  let peerCount = ipfsService.peerCount;\n  let cid = props.cid;\n  let forking = false;\n  let forkStatus;\n  let forkOutput = \"\";\n  let forkType = \"existing\";\n  let channel;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: 'Create & Import',\n    path: '/admin/channel/create-menu'\n  }, {\n    text: 'Fork Collection From IPFS Hash'\n  }];\n  $on('pageInit', async () => {\n    //Initialize IPFS\n    await ipfsService.init();\n    ipfsReady = ipfsService.ipfs != undefined;\n    await $update();\n  });\n  const formSubmit = async e => {\n    e.preventDefault();\n    let formData = $f7.form.convertToData('#import-ipfs-hash');\n    forking = true;\n    $update();\n    uiService.showSpinner('Forking...');\n    try {\n      channel = await importService.importFromIPFS(formData.hash, forkType, formData.authorId);\n    } catch (ex) {\n      console.log(ex);\n      uiService.hideSpinner();\n      $f7.dialog.alert(ex.message, \"There was an error\");\n    }\n    uiService.hideSpinner();\n    forking = false;\n    $update();\n  };\n  $(document).on('fork-progress', async e => {\n    if (e.detail.message) {\n      forkOutput = `<p>${e.detail.message}</p>`;\n    }\n    forkStatus = e.detail.forkStatus;\n    forking = true;\n    $update();\n    let outputElement = document.getElementById('ipfs-fork-process');\n    if (outputElement) {\n      $(outputElement).scrollTop(outputElement.scrollHeight);\n    }\n  });\n  const radioButtonChange = async e => {\n    e.preventDefault();\n    forkType = $(e.currentTarget).val();\n    await $update();\n  };\n  $(document).on('update-peers', async e => {\n    peerCount = e.detail.count;\n    $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-fork\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <div class=\"fixed-width-content center\">\n\n        <form @submit=\"${formSubmit}\" id=\"import-ipfs-hash\">\n\n          <div class=\"block-title\">Fork Collection From IPFS Hash</div>\n  \n          <div class=\"card\">\n            <div class=\"card-content card-content-padding\">\n              ${!ipfsReady ? $h`\n                <div class=\"ipfs-label\">IPFS Initializing...</div>\n            ` : $h`\n                <div class=\"ipfs-label\">\n                    Status: <a href=\"/admin/connect\">IPFS Ready</a>\n                </div>\n            `}\n            </div>\n          </div>\n  \n          ${!forking & !channel ? $h`\n            \n            <div class=\"block-header\">\n              A <em>fork</em> is a copy of an NFT collection. Forking a project allows you to freely experiment with changes without affecting the original project.\n            </div>\n  \n            <div class=\"list media-list inset\">\n              <ul>\n                <li>\n                  <label class=\"item-radio item-radio-icon-start item-content\">\n                    <input type=\"radio\" name=\"demo-media-radio\" checked @change=\"${radioButtonChange}\" value=\"existing\" />\n                    <i class=\"icon icon-radio\" checked></i>\n                    <div class=\"item-inner\">\n                      <div class=\"item-title-row\">\n                        <div class=\"item-title\">Create new experience around an existing collection.</div>\n                      </div>\n                      <div class=\"item-text\">Collection items will not be editable and Reader will be configured to connect to existing smart contract to view ownership and create transactions.</div>\n                    </div>\n                  </label>\n                </li>\n                <li>\n                  <label class=\"item-radio item-radio-icon-start item-content\">\n                    <input type=\"radio\" name=\"demo-media-radio\" @change=\"${radioButtonChange}\" value=\"fork\" />\n                    <i class=\"icon icon-radio\"></i>\n                    <div class=\"item-inner\">\n                      <div class=\"item-title-row\">\n                        <div class=\"item-title\">Fork collection.</div>\n                      </div>\n                      <div class=\"item-text\">Collection items can be added, deleted, or edited. Deploy and mint from a new smart contract.</div>\n                    </div>\n                  </label>\n                </li>\n  \n              </ul>\n            </div>\n  \n  \n            ${forkType == \"fork\" && walletService.address ? $h`\n              <div class=\"block-title block-title-small\">Author</div>\n  \n              <div class=\"list no-hairlines inset\">\n                <ul>\n                  <li class=\"item-content item-input\">\n                    <div class=\"item-inner\">\n                      <div class=\"item-input-wrap\">\n                        <select id=\"collection-author\" name=\"authorId\">\n                          <option value=\"\">Original Author</option>\n                          <option value=\"${walletService.address}\">${walletService.address}</option>\n                        </select>\n                      </div>\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            ` : $h`<span />`}\n          \n            \n          ` : $h`<span />`}\n  \n  \n          <div class=\"card\">\n  \n            ${forking ? $h`\n              <div class=\"card-header\">\n                  Forking...\n              </div>  \n  \n            ` : $h`<span />`}\n  \n  \n            <div class=\"card-content\">\n  \n              <div class=\"card-content card-content-padding\">\n   \n                  \n                  ${forkOutput ? $h`\n  \n                    ${forkStatus? $h`\n  \n                      <div class=\"data-table\">\n                        <table>\n                          <thead>\n                            <th class=\"label-cell\">Type</th>\n                            <th class=\"numeric-cell\">Saved</th>\n                            <th class=\"numeric-cell\">Total</th>\n                          </thead>\n                          <tbody>\n                            <tr class=\"${forkStatus.authors.saved == forkStatus.authors.total && forkStatus.authors.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Authors</td>\n                              <td class=\"numeric-cell\">${forkStatus.authors.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.authors.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.channels.saved == forkStatus.channels.total && forkStatus.channels.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Channels</td>\n                              <td class=\"numeric-cell\">${forkStatus.channels.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.channels.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.animations.saved == forkStatus.animations.total && forkStatus.animations.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Animations</td>\n                              <td class=\"numeric-cell\">${forkStatus.animations.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.animations.total}</td>\n                            </tr>\n  \n                            <tr class=\"${forkStatus.images.saved == forkStatus.images.total && forkStatus.images.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Images</td>\n                              <td class=\"numeric-cell\">${forkStatus.images.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.images.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.themes.saved == forkStatus.themes.total && forkStatus.themes.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Themes</td>\n                              <td class=\"numeric-cell\">${forkStatus.themes.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.themes.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.staticPages.saved == forkStatus.staticPages.total && forkStatus.staticPages.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Static Pages</td>\n                              <td class=\"numeric-cell\">${forkStatus.staticPages.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.staticPages.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.items.saved == forkStatus.items.total && forkStatus.items.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Items</td>\n                              <td class=\"numeric-cell\">${forkStatus.items.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.items.total}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </div>\n  \n                    ` : $h`<span />`}\n         \n  \n                    ${!channel ? $h`\n                      <div class=\"fork-output-simple\" innerHTML=\"${forkOutput}\" id=\"ipfs-fork-process\" ></div>\n                    ` : $h`\n                    \n                      <div class=\"block save-row\">\n  \n                        <div class=\"large-only\"></div>\n  \n                        <a href=\"/admin/channel/show/${channel}\" class=\"button button-fill color-green\" class=\"button button-fill\" tabindex=\"12\">\n                          View Collection\n                        </a>  \n                      </div>\n                    `}\n                    \n                  \n                  ` : $h`<span />`}\n  \n  \n                  ${ipfsReady & !forking & !channel ? $h`\n  \n                    <p>\n                      Enter the IPFS hash of the Large collection to import. For this process to work the collection must have\n                      been built with Large otherwise use the <a href=\"/admin/channel/fork-contract\">contract importer</a>.\n                    </p>\n  \n                    <div class=\"list media-list\">\n                      <ul>\n                        <li>\n                          <a href=\"#\" class=\"item-link\">\n                            <div class=\"item-content\">\n                              <div class=\"item-inner\">\n                                <div class=\"item-title item-label\">IPFS Hash</div>\n                                <div class=\"item-input-wrap\">\n                                  <input type=\"text\" name=\"hash\" placeholder=\"Enter IPFS Hash\" value=\"${cid ? cid : ''}\" required />\n                                  <span class=\"input-clear-button\"></span>\n                                </div>\n                              </div>\n                            </div>\n                          </a>\n                        </li>\n                        <li>\n  \n                          <div class=\"block cancel-save-row\">\n        \n                            <div class=\"large-only\"></div>\n              \n                            <a href=\"/admin/channel/create-menu\" class=\"button button-outline color-gray\" tabindex=\"30\">\n                              Cancel\n                            </a>\n        \n                            <button type=\"submit\" class=\"button button-fill\" tabindex=\"31\" id=\"saveButton\">\n                              <i class=\"material-icons\">fork_left</i> Create Fork\n                            </button>\n              \n                          </div>\n  \n                        </li>\n                      </ul>\n                    </div>\n  \n                      \n                  ` : $h`\n                      <p></p>\n                  `}\n  \n  \n  \n                </div>\n            </div>\n          </div>\n  \n  \n        </form>\n\n      </div>\n\n    </div>\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '86e125c2e2';\nframework7Component.style = `\n  .ipfs-label,\n  .fork-label {\n      margin-top: 10px;\n      margin-bottom: 10px;\n      font-weight: bold;\n      font-size: 18px;\n  }\n\n  .fork-output {\n      border: 1px solid #cccccc;\n      font-size: 13px;\n      width: 100%;\n      max-width: 100%;\n      padding: 5px;\n      height: 300px;\n      overflow-y: scroll;\n  }\n\n  .fork-status {\n      font-size: 14px;\n      padding: 10px;\n      border: 1px solid #f1f1f1;\n  }\n\n  .fork-status .item label {\n      font-weight: bold;\n      display: inline-block;\n      width: 180px;\n  }\n\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport { ImportService } from \"../../../service/core/import-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport Toolbar from \"../../admin/toolbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let importService = ContainerService.getInstance(ImportService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let uiService = ContainerService.getInstance(UiService);\n  let walletService;\n  let contractAddress = props.contractAddress;\n  let owner;\n  let channelId;\n  let forking = false;\n  let forkStatus;\n  let forkOutput = \"\";\n  let forkType = \"existing\";\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: 'Create & Import',\n    path: '/admin/channel/create-menu'\n  }, {\n    text: 'Fork Collection From Contract'\n  }];\n  let ipfsReady = false;\n  $on('pageInit', async () => {\n    walletService = ContainerService.getWalletService();\n    owner = await walletService.getAddress();\n\n    //Initialize IPFS\n    await ipfsService.init();\n    ipfsReady = ipfsService.ipfs != undefined;\n    await $update();\n  });\n  const radioButtonChange = async e => {\n    e.preventDefault();\n    forkType = $(e.currentTarget).val();\n    await $update();\n  };\n  const formSubmit = async e => {\n    e.preventDefault();\n    let formData = $f7.form.convertToData('#import-fork-contract');\n    forking = true;\n    $update();\n    uiService.showSpinner('Forking...');\n    try {\n      if (forkType == \"existing\") {\n        channelId = await importService.importExistingFromContract(formData.contractAddress);\n      } else {\n        channelId = await importService.importAsForkFromContract(formData.contractAddress);\n      }\n      uiService.hideSpinner();\n    } catch (ex) {\n      console.log(ex);\n      uiService.hideSpinner();\n      $f7.dialog.alert(ex.message, \"There was an error\");\n    }\n    forking = false;\n    $update();\n  };\n  $(document).on('fork-progress', async e => {\n    if (e.detail.message) {\n      forkOutput = `<p>${e.detail.message}</p>`;\n    }\n    forkStatus = e.detail.forkStatus;\n    forking = true;\n    $update();\n    let outputElement = document.getElementById('ipfs-fork-process');\n    if (outputElement) {\n      $(outputElement).scrollTop(outputElement.scrollHeight);\n    }\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-fork-contract\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n    <${Toolbar} />\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <div class=\"fixed-width-content center\">\n        <form  @submit=\"${formSubmit}\" id=\"import-fork-contract\">\n\n          <div class=\"block-title\">Fork Collection From Contract</div>\n  \n           ${walletService?.address ? $h`\n          \n  \n            <div class=\"card\">\n              <div class=\"card-content card-content-padding\">\n                ${!ipfsReady ? $h`\n                  <div class=\"ipfs-label\">IPFS Initializing...</div>\n              ` : $h`\n                  <div class=\"ipfs-label\">\n                      Status: <a href=\"/admin/connect\">IPFS Ready</a>\n                  </div>\n              `}\n              </div>\n            </div>\n  \n            ${ipfsReady & !forking & !channelId ? $h`\n  \n              <div class=\"block-header\">\n                A <em>fork</em> is a copy of an NFT collection. Forking a project allows you to freely experiment with changes without affecting the original project.\n              </div>\n    \n              <div class=\"list media-list inset\">\n                <ul>\n                  <li>\n                    <label class=\"item-radio item-radio-icon-start item-content\">\n                      <input type=\"radio\" name=\"demo-media-radio\" checked @change=\"${radioButtonChange}\" value=\"existing\" />\n                      <i class=\"icon icon-radio\" checked></i>\n                      <div class=\"item-inner\">\n                        <div class=\"item-title-row\">\n                          <div class=\"item-title\">Create new experience around an existing collection.</div>\n                        </div>\n                        <div class=\"item-text\">Collection items will not be editable and Reader will be configured to connect to existing smart contract to view ownership and create transactions.</div>\n                      </div>\n                    </label>\n                  </li>\n                  <li>\n                    <label class=\"item-radio item-radio-icon-start item-content\">\n                      <input type=\"radio\" name=\"demo-media-radio\" @change=\"${radioButtonChange}\" value=\"fork\" />\n                      <i class=\"icon icon-radio\"></i>\n                      <div class=\"item-inner\">\n                        <div class=\"item-title-row\">\n                          <div class=\"item-title\">Fork collection.</div>\n                        </div>\n                        <div class=\"item-text\">Collection items can be added, deleted, or edited. Deploy and mint from a new smart contract.</div>\n                      </div>\n                    </label>\n                  </li>\n    \n                </ul>\n              </div>\n              \n              <div class=\"block-header\">\n                Enter the contract address of the collection to import. Must be standard ERC-721. Limit 10,000 tokens.\n              </div>\n  \n  \n              <div class=\"list media-list inset\">\n                <ul>\n  \n                  <li>\n                    <a href=\"#\" class=\"item-link\">\n                      <div class=\"item-content\">\n                        <div class=\"item-inner\">\n                          <div class=\"item-title item-label\">Contract Address</div>\n                          <div class=\"item-input-wrap\">\n                            <input type=\"text\" name=\"contractAddress\" placeholder=\"Enter Contract Address\" value=\"${contractAddress ? contractAddress : ''}\" required />\n                            <span class=\"input-clear-button\"></span>\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                  </li>\n  \n                  <li>\n  \n  \n                    <div class=\"block cancel-save-row\" style=\"padding-bottom: 15px;\">\n        \n                      <div class=\"large-only\"></div>\n        \n                      <a href=\"/admin/channel/create-menu\" class=\"button button-outline color-gray\" tabindex=\"30\">\n                        Cancel\n                      </a>\n  \n                      <button type=\"submit\" class=\"button button-fill\" tabindex=\"31\" id=\"saveButton\">\n                        <i class=\"material-icons\">fork_left</i> Create Fork\n                      </button>\n        \n                    </div>\n  \n                  </li>\n  \n                </ul>\n              </div>\n  \n                \n            ` : $h`\n                <p></p>\n            `}\n  \n  \n  \n            ${forking || forkOutput ? $h`\n  \n              <div class=\"card\">\n  \n                ${forking ? $h`\n                  <div class=\"card-header\">\n                      Forking...\n                  </div>  \n    \n                ` : $h`<span />`}\n    \n  \n                <div class=\"card-content\">\n                    <div class=\"card-content card-content-padding\">\n    \n                      ${forkOutput ? $h`\n  \n                        ${forkStatus? $h`\n  \n                          <div class=\"data-table \">\n                            <table>\n                              <thead>\n                                <th class=\"label-cell\">Type</th>\n                                <th class=\"numeric-cell\">Saved</th>\n                                <th class=\"numeric-cell\">Total</th>\n                              </thead>\n                              <tbody>\n                                <tr class=\"${forkStatus.animations.saved == forkStatus.animations.total && forkStatus.animations.total > 0 ? 'complete' : ''}\">\n                                  <td class=\"label-cell\">Animations</td>\n                                  <td class=\"numeric-cell\">${forkStatus.animations.saved}</td>\n                                  <td class=\"numeric-cell\">${forkStatus.animations.total ? forkStatus.animations.total : \"?\"} </td>\n                                </tr>\n                                <tr class=\"${forkStatus.images.saved == forkStatus.images.total && forkStatus.images.total > 0 ? 'complete' : ''}\">\n                                  <td class=\"label-cell\">Images</td>\n                                  <td class=\"numeric-cell\">${forkStatus.images.saved}</td>\n                                  <td class=\"numeric-cell\">${forkStatus.images.total ? forkStatus.images.total : \"?\"}</td>\n                                </tr>\n                                <tr class=\"${forkStatus.items.saved == forkStatus.items.total && forkStatus.items.total > 0 ? 'complete' : ''}\">\n                                  <td class=\"label-cell\">Items</td>\n                                  <td class=\"numeric-cell\">${forkStatus.items.saved}</td>\n                                  <td class=\"numeric-cell\">${forkStatus.items.total}</td>\n                                </tr>\n                                <tr class=\"${forkStatus.channels.saved == forkStatus.channels.total && forkStatus.channels.total > 0 ? 'complete' : ''}\">\n                                  <td class=\"label-cell\">Channels</td>\n                                  <td class=\"numeric-cell\">${forkStatus.channels.saved}</td>\n                                  <td class=\"numeric-cell\">${forkStatus.channels.total}</td>\n                                </tr>\n                              </tbody>\n                            </table>\n                          </div>\n  \n  \n  \n                        ` : $h`<span />`}\n  \n  \n                        ${!channelId ? $h`\n                          <div class=\"fork-output-simple\" innerHTML=\"${forkOutput}\" id=\"ipfs-fork-process\" ></div>\n                        ` : $h`\n                        \n                          <div class=\"block save-row\">\n  \n                            <div class=\"large-only\"></div>\n      \n                            <a href=\"/admin/channel/show/${channelId}\" class=\"button button-fill color-green\" class=\"button button-fill\" tabindex=\"12\">\n                              View Collection\n                            </a>  \n                          </div>\n  \n                        `}\n  \n  \n                      ` : $h`<span />`}\n  \n  \n    \n                    </div>\n                </div>\n    \n              </div>\n  \n            ` : $h`\n              <span />\n            `}\n  \n          ` : $h`\n            <div class=\"block-header\">\n              Use a web browser with wallet support to import an existing ERC-721 collection.\n            </div>\n          `}\n  \n  \n  \n        </form>\n      </div>\n\n    </div>\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '2011bd107e';\nframework7Component.style = `\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport { ImportService } from \"../../../service/core/import-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport Toolbar from \"../../admin/toolbar.f7.html\";\nimport axios from \"axios\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let importService = ContainerService.getInstance(ImportService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let walletService = ContainerService.getWalletService();\n  let uiService = ContainerService.getInstance(UiService);\n  let ipfsReady = ipfsService.ipfs != undefined;\n  let peerCount = ipfsService.peerCount;\n  let contractInfo;\n  let forking = false;\n  let forkStatus;\n  let forkOutput = \"\";\n  let channel;\n  let author;\n  let owner;\n  let customName;\n  let channelId;\n  let forkType = \"existing\";\n  let readerTitle;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: 'Create & Import',\n    path: '/admin/channel/create-menu'\n  }, {\n    text: 'Fork Collection From Reader'\n  }];\n\n  //Check hash to see if we are linking to a Reader\n  let search = window.location.hash ? window.location.hash.substring(window.location.hash?.indexOf(\"?\"), window.location.hash.length) : undefined;\n  const urlParams = new URLSearchParams(search);\n  let readerConfig = {};\n  if (urlParams.get('path')) {\n    //Get the title\n    readerConfig.path = decodeURIComponent(urlParams.get('path'));\n  }\n  const loadCollection = async e => {\n    try {\n      owner = await walletService.getAddress();\n      channel = await getChannel();\n      author = await getAuthor();\n      contractInfo = await getContractInfo();\n      readerConfig.title = channel.title;\n      customName = channel.title;\n    } catch (ex) {\n      $f7.dialog.alert(ex, \"Error loading collection. Not found.\");\n    }\n  };\n  const continueSubmit = async e => {\n    e.preventDefault();\n    readerConfig.path = $('#libraryURL').val();\n    await loadCollection();\n    await $update();\n  };\n  const truncateEthAddress = address => {\n    return walletService.truncateEthAddress(address);\n  };\n\n  // const getBaseURI = () => {\n\n  //   let baseURI = window.location.pathname\n\n  //   //Get what's before admin\n  //   return baseURI.substring(0, baseURI.indexOf('large/index.html'))\n\n  // }\n\n  const getChannel = async () => {\n    let response = await axios.get(`${readerConfig.path}backup/export/backup/channels.json`);\n    let channels = response.data;\n    return channels[0];\n  };\n  const getAuthor = async () => {\n    let response = await axios.get(`${readerConfig.path}backup/export/backup/authors.json`);\n    let authors = response.data;\n    return authors[0];\n  };\n  const getContractInfo = async () => {\n    try {\n      let response = await axios.get(`${readerConfig.path}backup/contract/contract.json`);\n      let contract = response.data;\n      return contract;\n    } catch (ex) {\n      console.log(ex);\n    }\n  };\n  $on('pageInit', async () => {\n    if (readerConfig.path) {\n      await loadCollection();\n    }\n    await $update();\n  });\n  const radioButtonChange = async e => {\n    e.preventDefault();\n    forkType = $(e.currentTarget).val();\n    await $update();\n  };\n  const collectionTitleChange = async e => {\n    e.preventDefault();\n    customName = $(e.currentTarget).val();\n    await $update();\n  };\n  const formSubmit = async e => {\n    e.preventDefault();\n    forking = true;\n    await $update();\n    uiService.showSpinner('Forking...');\n\n    //Make sure it's a valid channel\n    try {\n      if (forkType == \"existing\") {\n        channelId = await importService.importExistingFromReader(readerConfig.path, contractInfo.contractAddress, contractInfo.ipfsCid);\n      } else {\n        channelId = await importService.importAsForkFromReader(readerConfig.path, customName);\n      }\n      uiService.hideSpinner();\n    } catch (ex) {\n      console.log(ex);\n      uiService.hideSpinner();\n      $f7.dialog.alert(ex.message, \"Error loading collection\");\n    }\n    forking = false;\n    await $update();\n  };\n  $(document).on('fork-progress', async e => {\n    if (e.detail.message) {\n      forkOutput = `<p>${e.detail.message}</p>`;\n    }\n    forkStatus = e.detail.forkStatus;\n    forking = true;\n    $update();\n    let outputElement = document.getElementById('ipfs-fork-process');\n    if (outputElement) {\n      $(outputElement).scrollTop(outputElement.scrollHeight);\n    }\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-fork-contract\">\n\n    <${Navbar} reader_config=${readerConfig} breadcrumbs=${breadcrumbs}  />\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <div class=\"fixed-width-content center\">\n\n        <div class=\"block-title\">Fork Collection From Reader</div>\n\n        ${!forking & !channelId ? $h`\n  \n          ${channel ? $h`\n          \n            <form @submit=\"${formSubmit}\" id=\"import-from-reader\">\n  \n              <div class=\"block-header\">\n                A <em>fork</em> is a copy of an NFT collection. Forking a project allows you to freely experiment with changes without affecting the original project. \n              </div>\n  \n              <div class=\"list media-list inset\">\n                <ul>\n                  <li>\n                    <label class=\"item-radio item-radio-icon-start item-content\">\n                      <input type=\"radio\" name=\"demo-media-radio\" checked @change=\"${radioButtonChange}\" value=\"existing\" />\n                      <i class=\"icon icon-radio\" checked></i>\n                      <div class=\"item-inner\">\n                        <div class=\"item-title-row\">\n                          <div class=\"item-title\">Create new experience around an existing collection.</div>\n                        </div>\n                        <div class=\"item-text\">Collection items will not be editable and Reader will be configured to connect to existing smart contract to view ownership and create transactions.</div>\n                      </div>\n                    </label>\n                  </li>\n                  <li>\n                    <label class=\"item-radio item-radio-icon-start item-content\">\n                      <input type=\"radio\" name=\"demo-media-radio\" @change=\"${radioButtonChange}\" value=\"fork\" />\n                      <i class=\"icon icon-radio\"></i>\n                      <div class=\"item-inner\">\n                        <div class=\"item-title-row\">\n                          <div class=\"item-title\">Fork collection.</div>\n                        </div>\n                        <div class=\"item-text\">Collection items can be added, deleted, or edited. Deploy and mint from a new smart contract.</div>\n                      </div>\n                    </label>\n                  </li>\n  \n                </ul>\n              </div>\n  \n              ${!channelId ? $h`\n                <div class=\"block block-strong inset fork-block\">\n  \n                  <p>Forking <a href=\"${readerConfig.path}\" class=\"external\">${channel.title}</a></p>\n    \n                  <div class=\"repo-name\">\n    \n                    <div class=\"left\">\n                      <strong>Author</strong>\n    \n                      <div class=\"list no-hairlines\" style=\"margin: 0; padding-left: 0px;\">\n                        <ul>\n                          <li class=\"item-content item-input\" style=\"padding-left: 0px;\">\n                            <div class=\"item-inner\">\n                              <div class=\"item-input-wrap\">\n                                <select id=\"collection-author\">\n                                  ${forkType == \"existing\" && author != undefined ? $h`\n                                    <option value=\"${author._id}\">${truncateEthAddress(author._id)} (Original Author)</option>\n                                  ` : $h`\n    \n                                    ${owner ? $h`\n                                      <option value=\"${owner}\">${truncateEthAddress(owner)}</option>\n                                    ` : $h`\n                                      <option value=\"\">None</option>\n                                    `}\n                                    \n                                  ` }\n                                </select>\n                              </div>\n                            </div>\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n    \n                    <div class=\"right\">\n                      <strong>Collection Name</strong>\n    \n                      <div class=\"list no-hairlines\" style=\"margin: 0; padding-left: 0px;\">\n                        <ul>\n                          <li class=\"item-content item-input\" style=\"padding-left: 0px;\">\n                            <div class=\"item-inner\">\n    \n                                ${forkType == \"existing\" ? $h`\n                                  <div class=\"item-input-wrap \">\n                                    ${channel.title}\n                                  </div>\n                                ` : $h`\n                                  <div class=\"item-input-wrap \">\n                                    <input type=\"text\" value=\"${readerConfig.title}\" @change=\"${collectionTitleChange}\" />\n                                    <span class=\"input-clear-button\"></span>\n                                  </div>\n                                ` }\n    \n                            </div>\n                          </li>\n                        </ul>\n                      </div>\n    \n                    </div>\n                  </div>\n                  \n    \n                  <p>\n                    You are downloading all project data, including images and HTML, into a local web-based <a href=\"https://pouchdb.com\" class=\"external\">database</a> on your device.\n                  </p>\n    \n                  ${!forking? $h`\n                    <button type=\"submit\" class=\"button button-fill col-30\" tabindex=\"12\" style=\"margin-bottom: 10px; width: 200px;\">\n                      <i class=\"material-icons\">fork_left</i> Create Fork\n                    </button>\n                  ` : $h`\n                      <span />\n                  `}\n    \n                </div>\n              ` : $h`<span />`}\n  \n            </form>\n  \n  \n          ` : $h`\n            \n            <form @submit=\"${continueSubmit}\">\n  \n              <div class=\"block-header\">\n                Enter the URL (home page) of the Large NFT collection to import. \n              </div>\n  \n  \n              <div class=\"list media-list inset\">\n                <ul>\n  \n                  <li>\n                    <a href=\"#\" class=\"item-link\">\n                      <div class=\"item-content\">\n                        <div class=\"item-inner\">\n                          <div class=\"item-title item-label\">Large URL</div>\n                          <div class=\"item-input-wrap\">\n                            <input type=\"text\" id=\"libraryURL\" placeholder=\"Enter URL\" value=\"\" required />\n                            <span class=\"input-clear-button\"></span>\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                  </li>\n  \n                  <li>\n  \n                    <div class=\"block cancel-save-row\" style=\"padding-bottom: 15px;\">\n        \n                      <div class=\"large-only\"></div>\n        \n                      <a href=\"/admin/channel/create-menu\" class=\"button button-outline color-gray\" tabindex=\"30\">\n                        Cancel\n                      </a>\n  \n                      <button type=\"submit\" class=\"button button-fill\" tabindex=\"31\" id=\"saveButton\">\n                        Continue\n                      </button>\n        \n                    </div>\n  \n                  </li>\n  \n                </ul>\n              </div>\n            </form>\n  \n  \n  \n          `}\n          \n        ` : $h`<span />`}\n  \n  \n        ${forking || forkOutput ? $h`\n  \n          <div class=\"card\">\n  \n            ${forking ? $h`\n              <div class=\"card-header\">\n                  Forking...\n              </div>  \n  \n            ` : $h`<span />`}\n  \n  \n            <div class=\"card-content\">\n                <div class=\"card-content card-content-padding\">\n  \n  \n                  ${forkOutput ? $h`\n  \n                    ${forkStatus? $h`\n                      <div class=\"data-table\">\n                        <table>\n                          <thead>\n                            <th class=\"label-cell\">Type</th>\n                            <th class=\"numeric-cell\">Saved</th>\n                            <th class=\"numeric-cell\">Total</th>\n                          </thead>\n                          <tbody>\n                            <tr class=\"${forkStatus.channels.saved == forkStatus.channels.total && forkStatus.channels.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Channels</td>\n                              <td class=\"numeric-cell\">${forkStatus.channels.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.channels.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.authors.saved == forkStatus.authors.total && forkStatus.authors.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Authors</td>\n                              <td class=\"numeric-cell\">${forkStatus.authors.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.authors.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.animations.saved == forkStatus.animations.total && forkStatus.animations.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Animations</td>\n                              <td class=\"numeric-cell\">${forkStatus.animations.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.animations.total}</td>\n                            </tr>\n  \n                            <tr class=\"${forkStatus.images.saved == forkStatus.images.total && forkStatus.images.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Images</td>\n                              <td class=\"numeric-cell\">${forkStatus.images.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.images.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.themes.saved == forkStatus.themes.total && forkStatus.themes.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Themes</td>\n                              <td class=\"numeric-cell\">${forkStatus.themes.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.themes.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.staticPages.saved == forkStatus.staticPages.total && forkStatus.staticPages.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Static Pages</td>\n                              <td class=\"numeric-cell\">${forkStatus.staticPages.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.staticPages.total}</td>\n                            </tr>\n                            <tr class=\"${forkStatus.items.saved == forkStatus.items.total && forkStatus.items.total > 0 ? 'complete' : ''}\">\n                              <td class=\"label-cell\">Items</td>\n                              <td class=\"numeric-cell\">${forkStatus.items.saved}</td>\n                              <td class=\"numeric-cell\">${forkStatus.items.total}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </div>\n                    ` : $h`<span />`}\n  \n  \n                    ${!channelId ? $h`\n                      <div class=\"fork-output\" innerHTML=\"${forkOutput}\" id=\"ipfs-fork-process\" ></div>\n                    ` : $h`\n  \n                      <br />\n  \n                      <div class=\"block save-row\">\n  \n                        <div class=\"large-only\"></div>\n  \n                        <a href=\"/admin/channel/show/${channelId}\" class=\"button button-fill color-green\" class=\"button button-fill\" tabindex=\"12\">\n                          View Collection\n                        </a>  \n                      </div>\n  \n  \n                    \n                    `}\n  \n  \n                  ` : $h`<span />`}\n  \n  \n  \n                </div>\n            </div>\n  \n          </div>\n  \n        ` : $h`\n          <span />\n        `}\n\n      </div>\n\n    </div>\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = 'ca8203cdc4';\nframework7Component.style = `\n\n\n\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelWebService } from \"../../../service/web/channel-web-service\";\nimport { ImageService } from \"../../../service/image-service\";\nimport { QuillEditorService } from \"../../../service/quill-editor-service\";\nimport { Channel } from \"../../../dto/channel\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport ChannelForm from \"../../admin/channel/form.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelWebService = ContainerService.getInstance(ChannelWebService);\n  let channelViewModel = props.channelViewModel;\n  const formSubmit = async e => {\n    e.preventDefault();\n\n    //Save\n    try {\n      await channelWebService.upgrade(channelViewModel.channel);\n    } catch (ex) {\n      $f7.dialog.alert(ex.errors, \"There was an error\");\n    }\n  };\n  const upgradeClick = async e => {\n    e.preventDefault();\n    try {\n      await channelWebService.upgrade(channelViewModel.channel);\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex, \"There was an error\");\n    }\n  };\n  const regenerateAnimationsClick = async e => {\n    e.preventDefault();\n    $f7.preloader.show();\n    try {\n      await channelWebService.regenerateItemMedia(channelViewModel.channel);\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex, \"There was an error\");\n    }\n    $f7.preloader.hide();\n  };\n  $on('pageInit', async (e, page) => {});\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-edit-channel\">\n\n    <${Navbar} />\n\n    <div class=\"page-content\">\n\n      <div class=\"row\">\n        <div class=\"col-100 large-66 center\">\n\n          <ul class=\"breadcrumb\">\n            <li><a href=\"/admin/channel/show/${channelViewModel.channel._id}\">${channelViewModel.channel.title}</a></li>\n            <li>Upgrade Collection</li>\n          </ul>\n\n          <div class=\"block list\">\n\n            <p>This screen is used to update a collection to the latest database structure. Currently this is a \n            diagnostic level tool and should only be used if you have backed up the data.</p>\n\n            <p>The effect is like opening each item individually and resaving it.</p>\n\n\n            <button class=\"button button-fill\" @click=\"${regenerateAnimationsClick}\">\n              Regenerate Animations\n            </button>\n\n            <br />\n\n            <button class=\"button button-fill\" @click=\"${upgradeClick}\">\n              Upgrade\n            </button>\n\n          </div>\n\n        </div>\n      </div>\n\n\n\n    </div>\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = 'c5d7c71b88';\nframework7Component.style = `\n\n`;\nexport default framework7Component;","import { inject, injectable } from \"inversify\"\nimport { ModelView } from \"../util/model-view.js\"\nimport { routeMap } from \"../util/route-map.js\"\nimport { RouteTo } from '../service/core/routing-service.js'\n\nimport AdminChannelIndexComponent from '../components/admin/channel/index.f7.html'\n\nimport AdminChannelCreateComponent from '../components/admin/channel/create.f7.html'\nimport AdminChannelShowComponent from '../components/admin/channel/show.f7.html'\nimport AdminChannelThemesComponent from '../components/admin/channel/themes.f7.html'\nimport AdminChannelStaticPagesComponent from '../components/admin/channel/static-pages.f7.html'\n\nimport AdminChannelEditComponent from '../components/admin/channel/edit.f7.html'\nimport AdminChannelCreateMenuComponent from '../components/admin/channel/create-menu.f7.html'\nimport AdminChannelForkComponent from '../components/admin/channel/fork.f7.html'\nimport AdminChannelForkContractComponent from '../components/admin/channel/fork-contract.f7.html'\nimport AdminChannelForkReaderComponent from '../components/admin/channel/fork-reader.f7.html'\n\nimport AdminChannelUpgradeComponent from '../components/admin/channel/upgrade.f7.html'\n\n\nimport { ChannelWebService } from \"../service/web/channel-web-service.js\"\nimport { ItemWebService } from \"../service/web/item-web-service.js\"\nimport { ItemRepository } from \"../repository/item-repository.js\"\nimport { SchemaService } from \"../service/core/schema-service.js\"\nimport { Theme } from \"../dto/theme.js\"\nimport { ThemeService } from \"../service/theme-service.js\"\nimport { StaticPage } from \"../dto/static-page.js\"\nimport { StaticPageService } from \"../service/static-page-service.js\"\nimport axios from \"axios\"\n\n\n@injectable()\nclass ChannelController {\n\n    constructor(\n        private channelWebService:ChannelWebService,\n        private itemWebService:ItemWebService,\n        private schemaService:SchemaService,\n        private themeService:ThemeService,\n        private staticPageService:StaticPageService,\n        @inject('footer-text') private footerText:string\n    ) {}\n\n    @routeMap(\"/\")\n    async app() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n\n            return {\n                footerText: this.footerText\n            }\n\n        }, AdminChannelIndexComponent)\n    }\n\n\n    @routeMap(\"/admin/channel/create\")\n    async create() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n        }, AdminChannelCreateComponent)\n    }\n\n    @routeMap(\"/admin/channel/create-menu\")\n    async createMenu() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n        }, AdminChannelCreateMenuComponent)\n    }\n\n    @routeMap(\"/admin/channel/fork\")\n    async fork() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            return {\n                cid: routeTo.query.cid\n            }\n\n        }, AdminChannelForkComponent)\n    }\n\n    @routeMap(\"/admin/channel/fork-contract\")\n    async forkContract() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            return {\n                footerText: this.footerText,\n                contractAddress: routeTo.query.contractAddress\n            }\n\n        }, AdminChannelForkContractComponent)\n    }\n\n    @routeMap(\"/admin/channel/fork-reader\")\n    async forkReader() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            return {\n                footerText: this.footerText\n            }\n\n        }, AdminChannelForkReaderComponent)\n    }\n\n\n\n    @routeMap(\"/admin/channel/show/:id\")\n    async show() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n\n            let firstPageItems = await this.itemWebService.listByChannel(channelViewModel.channel._id, ItemRepository.CHUNK_SIZE, 0)\n\n            return {\n                channelViewModel: channelViewModel,\n                firstPageItems: firstPageItems\n            }\n\n        }, AdminChannelShowComponent)\n    }\n\n\n    @routeMap(\"/admin/channel/themes/:id\")\n    async themes() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n\n            let themes:Theme[] = await this.themeService.listByChannel(channelViewModel.channel._id, 1000, 0)\n\n\n            return {\n                channelViewModel: channelViewModel,\n                themes: themes\n            }\n\n        }, AdminChannelThemesComponent)\n    }\n\n\n    @routeMap(\"/admin/channel/static-pages/:id\")\n    async staticPages() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n\n            let staticPages:StaticPage[] = await this.staticPageService.listByChannel(channelViewModel.channel._id, 1000, 0)\n\n\n            return {\n                channelViewModel: channelViewModel,\n                staticPages: staticPages\n            }\n\n        }, AdminChannelStaticPagesComponent)\n    }\n\n\n    @routeMap(\"/admin/channel/edit/:id\")\n    async edit() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n\n            return {\n                channelViewModel: channelViewModel\n            }\n\n        }, AdminChannelEditComponent)\n    }\n\n    @routeMap(\"/admin/channel/upgrade/:id\")\n    async upgrade() : Promise<ModelView> {\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n\n            return {\n                channelViewModel: channelViewModel\n            }\n\n        }, AdminChannelUpgradeComponent)\n    }\n\n\n}\n\nexport {\n    ChannelController\n}","import axios from \"axios\";\nimport { inject, injectable } from \"inversify\";\nimport _sodium from 'libsodium-wrappers';\n\n\nimport { Channel } from \"../../dto/channel.js\";\nimport { ForkInfo, GitProviderService } from './git-provider-service.js';\n\nimport { SettingsService } from './settings-service.js';\n\n\n\n@injectable()\nclass GithubService implements GitProviderService {\n\n    static BASE_URL = 'https://api.github.com'\n    static GRAPHQL_URL = 'https://api.github.com/graphql'\n\n    static READER_REPO_OWNER = \"LargeNFT\"\n    static READER_REPO = \"large-reader\"\n\n    constructor(\n        private settingsService: SettingsService,\n        @inject(\"dayjs\") private dayjs\n    ) { }\n\n\n    async createFork(channel: Channel): Promise<ForkInfo> {\n\n        console.log(`Creating reader fork...`)\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = settings.gitProviders[\"github\"]\n\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n        //Look for an existing fork and just return it.\n        let existingFork = await this.getExistingFork(channel)\n        if (existingFork) return existingFork\n\n\n\n        let url = `${GithubService.BASE_URL}/repos/${GithubService.READER_REPO_OWNER}/${GithubService.READER_REPO}/generate`\n\n        //Create a new one\n        let response = await axios.post(url, {\n            owner: gitProvider.username,\n            name: this.getBranchName(channel),\n            include_all_branches: false,\n            'private': true\n\n        }, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n        let repoInfo = response.data\n\n\n\n        return  {\n            id: repoInfo.id,\n            httpUrlToRepo: repoInfo.html_url,\n            path: repoInfo.name,\n            branch: \"master\"\n        }\n    }\n\n    async createVariables(channel: Channel): Promise<any> {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = settings.gitProviders[\"github\"]\n\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n    \n        //Alchemy\n        if (settings.alchemyKey) {\n            //Create\n            await this._createVariable(channel, gitProvider, \"ALCHEMY_API_KEY\", settings.alchemyKey)\n        }\n\n\n    }\n\n    private async _createVariable(channel, gitProvider, key, value) {\n\n        let theUrl = `${GithubService.BASE_URL}/repos/${gitProvider.username}/${this.getBranchName(channel)}/actions/secrets/public-key`\n\n        //Update\n        let publicKeyResponse = await axios.get(theUrl, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n\n        const secret = value // replace with the secret you want to encrypt\n        let publicKey = publicKeyResponse.data\n\n\n        await _sodium.ready\n\n        // Convert Secret & Base64 key to Uint8Array.\n        let binkey = _sodium.from_base64(publicKey.key, _sodium.base64_variants.ORIGINAL)\n        let binsec = _sodium.from_string(secret)\n        \n        //Encrypt the secret using LibSodium\n        let encBytes = _sodium.crypto_box_seal(binsec, binkey)\n        \n        // Convert encrypted Uint8Array to Base64\n        let encryptedValue = _sodium.to_base64(encBytes, _sodium.base64_variants.ORIGINAL)\n        \n\n        let url = `${GithubService.BASE_URL}/repos/${gitProvider.username}/${this.getBranchName(channel)}/actions/secrets/${key}`\n\n        //Update\n        return axios.put(url, {\n            key_id: publicKey.key_id,\n            encrypted_value: encryptedValue,\n        } , {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n    }\n\n    public async getExistingFork(channel: Channel): Promise<ForkInfo> {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = settings.gitProviders[\"github\"]\n\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n\n        try {\n\n            let url = `${GithubService.BASE_URL}/repos/${gitProvider.username}/${this.getBranchName(channel)}`\n\n            let response = await axios.get(url, {\n                headers: {\n                    \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                }\n            })\n    \n            let repoInfo = response.data\n    \n            if (repoInfo.id) {\n    \n                return {\n                    id: repoInfo.id,\n                    httpUrlToRepo: repoInfo.html_url,\n                    path: repoInfo.name,\n                    branch: \"master\"\n                }\n        \n            }\n\n\n        } catch(ex) {}\n\n\n\n\n\n    }\n\n    async getForkRepoStatus(channel: Channel): Promise<string> {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = settings.gitProviders[\"github\"]\n\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n        let existingFork = await this.getExistingFork(channel)\n\n        if (existingFork) {\n            return \"finished\"\n        }\n\n        return \"pending\"\n\n\n    }\n\n    async commit(channel, actions, gitProvider) : Promise<string> {\n\n        let total = 0\n\n        let chunks = this.chunkIt(actions, 100)\n\n        let latestCommit\n\n\n        for (const [i, chunk] of chunks.entries()) {\n\n            total += chunk.length\n\n            this.logPublishProgress(`Commiting reader data for ${channel.title} to GitHub: committing ${chunk.length} actions. ${total} / ${actions.length}`)\n\n\n            let oid = await this.getMostRecentCommitOid(channel, gitProvider)\n\n            const additions = chunk.map((a) => {\n                return {\n                    path: a.file_path.slice(1),\n                    contents: Buffer.from(a.content).toString('base64')\n                }\n            })\n    \n\n\n            let headline = \"\"\n            if (i === chunks.length - 1) {\n                headline = `Commiting reader data complete`\n            } else {\n                headline = `Commiting reader data for ${channel.title}`\n            }\n    \n            const mutation = `\n                mutation createCommit($additions: [FileAddition!]!, $oid: GitObjectID!) {\n                    createCommitOnBranch (input: {\n                        branch : {\n                            repositoryNameWithOwner: \"${gitProvider.username}/${this.getBranchName(channel)}\"\n                            branchName: \"master\"\n                        }\n                        message: {\n                            headline: \"${headline}\"\n                        }\n                        fileChanges: {\n                            additions: $additions\n                        }\n                        expectedHeadOid: $oid\n                        }) {\n                        commit {\n                            commitUrl\n                        }\n                    }\n                }\n            `;\n    \n            const variables = {\n                oid: oid,\n                additions: additions\n            }\n    \n            const createCommitResult = await axios.post(\n                GithubService.GRAPHQL_URL,\n                {\n                    query: mutation,\n                    variables: variables\n                },\n                {\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                    }\n                }\n            )\n\n\n            latestCommit = createCommitResult.data.data.createCommitOnBranch.commit.commitUrl.split(\"/\").pop()\n            \n            this.logPublishProgress(`Commit successful: ${latestCommit}`)\n\n        }\n\n\n        return latestCommit\n\n    }\n\n\n    private async getMostRecentActionRun(channel, gitProvider) {\n\n        if (!channel.publishReaderIPFSStatus?.headSha) return\n\n        const workflowRunResults = await axios.get(`${GithubService.BASE_URL}/repos/${gitProvider.username}/${channel.publishReaderRepoPath}/actions/workflows/main.yml/runs?per_page=1&page=1&head_sha=${channel.publishReaderIPFSStatus.headSha}`, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n        if (workflowRunResults.data.workflow_runs?.length > 0) {\n            return workflowRunResults.data.workflow_runs[0]\n        }\n        \n    }\n\n    private async createCommit(currentCommitSha, newTreeSha, channel, message, gitProvider) {\n\n\n        //Create a new commit with this tree\n        const createCommitResult = await axios.post(`${GithubService.BASE_URL}/repos/${gitProvider.username}/${channel.publishReaderRepoPath}/git/commits`, {\n            message: message,\n            parents: [currentCommitSha],\n            tree: newTreeSha\n        }, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n\n        //Update the branch reference to the new commit\n        const updateRefResult = await axios.patch(`${GithubService.BASE_URL}/repos/${gitProvider.username}/${channel.publishReaderRepoPath}/git/refs/heads/master`, {\n            sha: createCommitResult.data.sha\n        }, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n    }\n\n    private async createTree(baseTreeSha, newTree, channel, gitProvider) {\n\n        let parameters = {\n            tree: newTree,\n            base_tree: baseTreeSha\n        }\n\n        const createTreeResult = await axios.post(`${GithubService.BASE_URL}/repos/${gitProvider.username}/${channel.publishReaderRepoPath}/git/trees`, parameters, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`,\n                \"Accept\": \"application/vnd.github+json\"\n            }\n        })\n\n\n        return createTreeResult.data.sha\n\n    }\n\n    async deleteReaderBackup(channel: Channel, gitProvider) {\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n        this.logPublishProgress(`Deleting existing files from repo...`)\n\n\n        await this.deleteDirectory(channel, gitProvider, \".upload\")\n\n\n        this.logPublishProgress(`Successfully deleted existing backup...`)\n\n\n    }\n\n    async deleteContractBackup(channel: Channel, gitProvider) {\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(\"Gitlab personal access token not set\")\n        }\n\n        this.logPublishProgress(`Deleting existing contract files from repo...`)\n\n\n        await this.deleteDirectory(channel, gitProvider, \"backup/contract\")\n\n    }\n\n    async getMostRecentCommit(channel, gitProvider) {\n\n        //Get the most recent commit\n        let currentCommitResult = await axios.get(`${GithubService.BASE_URL}/repos/${gitProvider.username}/${channel.publishReaderRepoPath}/commits/master`, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n        return currentCommitResult.data\n    }\n\n    async getMostRecentCommitOid(channel, gitProvider) {\n\n        const query = `\n            query GetBranch{\n                repository (name: \"${this.getBranchName(channel)}\", owner: \"${gitProvider.username}\") {\n                    ref (qualifiedName: \"master\") {\n                        target {\n                            ... on Commit {\n                                history(first: 1) {\n                                    nodes {\n                                        oid\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        `\n\n        const getOidResult = await axios.post(GithubService.GRAPHQL_URL, JSON.stringify({ query: query }), {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            },\n        })\n\n        return getOidResult.data.data.repository.ref.target.history.nodes[0].oid\n\n\n    }\n\n    async deleteDirectory(channel, gitProvider, directoryPath) {\n\n        const currentCommit = await this.getMostRecentCommit(channel, gitProvider)\n\n        //Get the sha of the tree referenced by the latest commit\n        const treeSha = currentCommit.commit.tree.sha\n\n        //Get that tree\n        let treeResult = await axios.get(`${GithubService.BASE_URL}/repos/${gitProvider.username}/${channel.publishReaderRepoPath}/git/trees/${treeSha}`, {\n            headers: {\n                \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n            }\n        })\n\n        let tree = treeResult.data.tree\n\n        //Filter to the backup folder\n        let theDirSha = tree.find(r => r.path == directoryPath)?.sha\n        \n        //If it exists, remove it.\n        if (theDirSha) {\n\n            //Get the tree for the backup folder\n            let theDirResult = await axios.get(`${GithubService.BASE_URL}/repos/${gitProvider.username}/${channel.publishReaderRepoPath}/git/trees/${theDirSha}`, {\n                headers: {\n                    \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n                },\n                params: { recursive: true }\n            })\n\n            let theDirTree = theDirResult.data.tree\n\n\n            let theTree = theDirTree\n                .filter(({ type }) => type === \"blob\")\n                .map((blob) => {\n\n                    return {\n                        path: `${directoryPath}/${blob.path}`,\n                        mode: blob.mode,\n                        type: blob.type,\n                        sha: null\n                    }\n                })\n\n            const newTreeSha = await this.createTree(treeSha, theTree, channel, gitProvider)\n\n            await this.createCommit(currentCommit.sha, newTreeSha, channel, `Deleting ${directoryPath}`, gitProvider)\n\n        }\n    }\n\n    private logPublishProgress(message: string) {\n\n        console.log(message)\n\n        if (typeof window !== \"undefined\" && typeof window.document !== \"undefined\") {\n            // browser\n            const imageSelectedEvent = new CustomEvent('publish-progress', {\n                detail: { message: message }\n            })\n\n            document.dispatchEvent(imageSelectedEvent)\n\n        }\n\n    }\n\n    chunkIt(gitActions: any[], perChunk: number) {\n\n        let chunks = []\n\n        //Break into rows\n        for (let i = 0; i < gitActions.length; i += perChunk) {\n            let chunk = gitActions.slice(i, i + perChunk)\n            chunks.push(chunk)\n        }\n\n        return chunks\n    }\n\n    getBranchName(channel) {\n        return channel.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()\n    }\n\n}\n\n\n\nexport {\n    GithubService\n}\n\n\n\n\n    // private async createBranch(channel, gitProvider) {\n\n    //     console.log(\"Creating branch\")\n\n    //     let oid = await this.getMostRecentCommitOid(channel, gitProvider)\n\n    //     const getRespositoryId = await axios.post(GithubService.GRAPHQL_URL, { \n    //         query: `\n    //             query {\n    //                 repository(owner: \"${gitProvider.username}\", name: \"large-reader\") {\n    //                     id\n    //                 }\n    //             }\n    //         `\n    //     }, {\n    //         headers: {\n    //             \"Content-Type\": \"application/json\",\n    //             \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n    //         }\n    //     })\n\n\n    //     const mutation = `\n    //         mutation {\n    //             createRef(input: {\n    //                 repositoryId: \"${getRespositoryId.data.data.repository.id}\",\n    //                 name: \"refs/heads/${this.getBranchName(channel)}\",\n    //                 oid: \"${oid}\"\n    //             }) {\n    //                 ref {\n    //                     name\n    //                         target {\n    //                         oid\n    //                         }\n    //                 }\n    //             }\n    //         }\n    //     `\n\n    //     const createBranchResult = await axios.post(\n    //         GithubService.GRAPHQL_URL,\n    //         {\n    //             query: mutation,\n    //         },\n    //         {\n    //             headers: {\n    //                 \"Content-Type\": \"application/json\",\n    //                 \"Authorization\": `Bearer ${gitProvider.personalAccessToken}`\n    //             }\n    //         }\n    //     )\n\n    //     console.log(\"Created branch\")\n\n\n    // }\n","import { injectable } from \"inversify\"\n\n\nimport { ValidationException } from \"../util/validation-exception.js\"\nimport { validate, ValidationError } from 'class-validator'\nimport { CarRepository } from \"../repository/car-repository.js\"\nimport { Car } from \"../dto/car.js\"\n\n\n\n\n@injectable()\nclass CarService {\n\n  db: any\n\n  constructor(\n    private carRepository: CarRepository\n  ) { }\n\n  async get(_id:string): Promise<Car> {\n    return this.carRepository.get(_id)\n  }\n\n  async put(car:Car) {\n\n    if (!car.dateCreated) {\n      car.dateCreated = new Date().toJSON()\n    } \n\n    //Validate\n    let errors: ValidationError[] = await validate(car, {\n      forbidUnknownValues: true,\n      whitelist: true\n    })\n\n    if (errors.length > 0) {\n      throw new ValidationException(errors)\n    }\n\n    await this.carRepository.put(car)\n  }\n\n  async delete(car:Car): Promise<void> {\n    await this.carRepository.delete(car)\n  }\n\n  async getByIds(ids:string[]) {\n    return this.carRepository.getByIds(ids)\n  }\n\n\n}\n\nexport {\n  CarService\n}","import { inject, injectable } from \"inversify\";\nimport { Channel } from \"../../dto/channel.js\";\nimport { AuthorService } from \"../author-service.js\";\nimport { SettingsService } from \"./settings-service.js\";\n\n//@ts-ignore\nimport { GitlabService } from \"./gitlab-service.js\";\nimport { ChannelService } from \"../channel-service.js\";\nimport { ForkInfo, GitProviderService } from \"./git-provider-service.js\";\nimport { GithubService } from \"./github-service.js\";\nimport { SchemaService } from \"./schema-service.js\";\nimport { CarService } from \"../car-service.js\";\nimport { Car } from \"../../dto/car.js\";\n\n//TODO: Refactor this so we're not specifically switching between github and gitlab \n//Inject the proper service and then call the method on it. This will make it easier to add more \n//providers later.\n\n@injectable()\nclass GitService {\n\n    fs\n\n    repoURI:string\n    defaultBranch:string\n\n    constructor(\n        private settingsService:SettingsService,\n        private channelService:ChannelService,\n        private gitlabService:GitlabService,\n        private githubService:GithubService,\n        private carService:CarService\n\n    ) {}\n\n    async deployReader(channel:Channel) {\n\n        //Delete all existing files from the repo\n        this.logPublishProgress(`Deploying reader...`)\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = await this.channelService.getGitProviderCredentials(channel, settings)\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(`${gitProvider.name} personal access token not set`)\n        }\n\n        let gitActions:any[] = []\n\n        let car:Car = await this.carService.get(\"export\")\n        let contractCar:Car = await this.carService.get(\"contract\")\n\n        if (!car) {\n            throw new Error(`Generate an IPFS .car bundle before deploying to git provider.`)\n        }\n\n        gitActions.push({\n            action: \"create\",\n            file_path: `/backup/export.car`,\n            content: car.content\n        })\n\n        if (contractCar && channel.contractAddress) {\n            gitActions.push({\n                action: \"create\",\n                file_path: `/backup/contract.car`,\n                content: contractCar.content\n            })\n        }\n\n        switch(gitProvider.name) {\n\n            case \"gitlab\":\n                await this.gitlabService.createVariables(channel)\n                await this.gitlabService.deleteReaderBackup(channel, gitProvider)\n                return this.gitlabService.commit(channel, gitActions, gitProvider)\n                \n            case \"github\":\n                await this.githubService.createVariables(channel)\n                await this.githubService.deleteReaderBackup(channel, gitProvider)\n                return this.githubService.commit(channel, gitActions, gitProvider)\n        }\n\n\n        //Commit \n        this.logPublishProgress(`Export to git complete`)\n\n    }\n\n    async deployReaderContract(channel:Channel, gitActions:any[]) {\n\n        //Delete all existing files from the repo\n        // this.logPublishProgress(`Deploying reader contract...`)\n\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = await this.channelService.getGitProviderCredentials(channel, settings)\n\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(`${gitProvider.name} personal access token not set`)\n        }\n\n\n\n        switch(gitProvider.name) {\n            case \"gitlab\":\n\n                await this.gitlabService.deleteContractBackup(channel, gitProvider)\n                return this.gitlabService.commit(channel, gitActions, gitProvider)\n\n            case \"github\":\n\n                // await this.githubService.deleteContractBackup(channel, gitProvider)\n                return this.githubService.commit(channel, gitActions, gitProvider)\n\n        }\n\n\n        //Commit \n        this.logPublishProgress(`Export to git complete`)\n\n    }\n\n    async getExistingFork(channel:Channel) {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = await this.channelService.getGitProviderCredentials(channel, settings)\n\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(`${gitProvider.name} personal access token not set`)\n        }\n\n        switch(gitProvider.name) {\n            case \"gitlab\":\n                return this.gitlabService.getExistingFork(channel)\n            case \"github\":\n                return this.githubService.getExistingFork(channel)\n        }\n\n    }\n\n    async createFork(channel: Channel): Promise<ForkInfo> {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = await this.channelService.getGitProviderCredentials(channel, settings)\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(`${gitProvider.name} personal access token not set`)\n        }\n\n        switch(gitProvider.name) {\n            case \"gitlab\":\n                return this.gitlabService.createFork(channel)\n            case \"github\":\n                return this.githubService.createFork(channel)\n        }\n\n    }\n\n    async createVariables(channel: Channel): Promise<any> {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = await this.channelService.getGitProviderCredentials(channel, settings)\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(`${gitProvider.name} personal access token not set`)\n        }\n\n        switch(gitProvider.name) {\n            case \"gitlab\":\n                return this.gitlabService.createVariables(channel)\n            case \"github\":\n                return this.githubService.createVariables(channel)\n        }\n\n    }\n\n\n    async getForkRepoStatus(channel: Channel): Promise<string> {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider = await this.channelService.getGitProviderCredentials(channel, settings)\n\n        if (gitProvider.personalAccessToken.length < 1) {\n            throw new Error(`${gitProvider.name} personal access token not set`)\n        }\n\n        switch(gitProvider.name) {\n            case \"gitlab\":\n                return this.gitlabService.getForkRepoStatus(channel)\n            case \"github\":\n                return this.githubService.getForkRepoStatus(channel)\n        }\n\n    }\n\n    \n\n    // async getProductionURIInfo(channel: Channel) : Promise<any> {\n        \n    //     let settings = await this.settingsService.get()\n\n    //     let gitProvider\n\n    //     //If it's \"default\" or blank then look at the global default\n    //     if (!channel.gitProvider || channel.gitProvider == \"default\") {\n\n    //         if (settings.defaultGitProvider) {\n    //             gitProvider = settings.defaultGitProvider\n    //         } else {\n    //             gitProvider = \"github\"\n    //         }\n            \n    //     } else {\n    //         gitProvider = channel.gitProvider\n    //     }\n\n\n    //     switch(gitProvider) {\n    //         case \"gitlab\":\n    //             return this.gitlabService.getProductionURIInfo(channel)\n    //         case \"github\":\n    //             return this.githubService.getProductionURIInfo(channel)\n    //     }\n\n    // }\n\n    private logPublishProgress(message:string) {\n    \n        console.log(message)\n    \n        if (typeof window !== \"undefined\" && typeof window.document !== \"undefined\") {\n          // browser\n          const imageSelectedEvent = new CustomEvent('publish-progress', {\n            detail: { message: message }\n          })\n      \n          document.dispatchEvent(imageSelectedEvent)\n    \n        }\n    \n    }\n\n    private chunkArrayByBytes(items, chunkSizeBytes) {\n\n        let chunks = []\n\n\n        //First create a map with the size of each item\n        let itemSizes = {}\n        items.forEach(item => {\n\n            itemSizes[item._id] = Buffer.byteLength(JSON.stringify(item), 'utf8')\n\n            console.log(item)\n\n            if (itemSizes[item._id] > chunkSizeBytes) {\n                throw new Error(`Image larger than 15MB found. Upload can not proceed.`)\n            }\n        })\n\n\n        let currentChunk = []\n        let currentChunkSize = 0\n\n        for (let item of items) {\n\n            //If this one would put us over the limit, create a new chunk\n            if (currentChunkSize + itemSizes[item._id] >= chunkSizeBytes) {\n                chunks.push(currentChunk) \n                currentChunk = []\n                currentChunkSize = 0\n            }\n\n            currentChunk.push(item)\n            currentChunkSize += itemSizes[item._id]\n\n        }\n\n        //If there's anything in the last chunk then add it\n        if (currentChunk.length > 0) {\n            chunks.push(currentChunk) \n        }\n\n        return chunks\n\n    }\n      \n\n}\n\nexport {\n    GitService\n}\n\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { QuillEditorService } from \"../../../service/quill-editor-service\";\nimport { QuillService } from \"../../../service/quill-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { ImageService } from \"../../../service/image-service\";\nimport { ItemWebService } from \"../../../service/web/item-web-service\";\nimport { v4 as uuidv4 } from 'uuid';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let quillEditorService = ContainerService.getInstance(QuillEditorService);\n  let quillService = ContainerService.getInstance(QuillService);\n  let itemWebService = ContainerService.getInstance(ItemWebService);\n  let imageService = ContainerService.getInstance(ImageService);\n  let uiService = ContainerService.getInstance(UiService);\n  const loadCoverImages = async () => {\n    itemViewModel.images = await itemWebService.getImagesFromContent({\n      title: itemViewModel.item.title,\n      content: {\n        ops: quillEditorService.activeEditor.getContents().ops\n      },\n      coverImageCSS: itemViewModel.item.coverImageCSS,\n      themes: itemViewModel.item.themes\n    });\n\n    //If we just have the text based one select it.\n    if (itemViewModel.images?.length == 1) {\n      itemViewModel.coverImage = itemViewModel.images[0];\n    }\n    quillEditorService.activeEditor.update();\n    await $update();\n  };\n  const coverImageClick = async e => {\n    let id = $(e.currentTarget).data('id');\n    let matches = itemViewModel?.images.filter(i => i.cid == id);\n    if (matches?.length > 0) {\n      itemViewModel.coverImage = matches[0];\n    }\n    await $update();\n  };\n  const coverImageClearClick = async e => {\n    e.preventDefault();\n    itemViewModel.coverImage = undefined;\n    await $update();\n  };\n  const valueNameChange = async e => {\n    let id = $(e.currentTarget).data('id');\n    attributeSelections.filter(as => as.id == id)[0].value = $(e.currentTarget).val();\n    await $update();\n  };\n  const themeSelectionChange = async e => {\n    let themes = $(e.currentTarget).val();\n    itemViewModel.item.themes = themes;\n    await $update();\n    await loadCoverImages();\n  };\n  const setAttributeSelections = as => {\n    attributeSelections = as;\n\n    //Set defaults for any that are not set.\n    for (let attributeSelection of attributeSelections) {\n      if (!attributeSelection.value && attributeSelection.values?.length > 0) {\n        attributeSelection.value = attributeSelection.values[0];\n      }\n    }\n  };\n  const titleOnInput = e => {\n    let value = $(e.currentTarget).val();\n    itemViewModel.item.title = value;\n    document.dispatchEvent(new CustomEvent('load-cover-images'));\n  };\n  const coverImageAsAnimationOnClick = e => {\n    showAnimationCss = $(e.currentTarget).prop('checked');\n    $update();\n  };\n  const generateFormSubmit = async e => {\n    e.preventDefault();\n    let formData = $f7.form.convertToData('#generate-form');\n    try {\n      await quillEditorService.generateAIImage(formData.model, formData.prompt, formData.negativePrompt);\n      $f7.popup.close('.ai-popup');\n    } catch (ex) {\n      uiService.hideSpinner();\n      $f7.dialog.alert(ex.message, \"There was an error\");\n    }\n  };\n  let itemViewModel = props.item;\n  let editorId = props.editor;\n  let toolbarId = props.toolbar;\n  let themes = props.themes;\n  let ipfsReady;\n  let cancelLink = props.cancel_link;\n  let attributeSelections;\n  let originalCoverImage = itemViewModel.coverImage;\n  let coverImageCSSEditorId = props.cover_image_css_editor_id;\n  let animationCSSEditorId = props.animation_css_editor_id;\n  let showHuggingFace = props.show_hugging_face;\n  let aiPrompt;\n  let showAnimationCss = !itemViewModel.item.coverImageAsAnimation;\n  if (itemViewModel) {\n    setAttributeSelections(itemViewModel.attributeSelections);\n  }\n  $(document).on('image-selected', async e => {\n    itemViewModel.coverImage = await imageService.get(e.detail._id);\n    await loadCoverImages();\n  });\n  $(document).on('update-cover-image-css', async e => {\n    itemViewModel.item.coverImageCSS = e?.detail?.coverImageCSS;\n    await loadCoverImages();\n  });\n  $(document).on('load-cover-images', async e => {\n    await loadCoverImages();\n  });\n  $(document).on('ipfs-ready', async e => {\n    ipfsReady = true;\n    await $update();\n  });\n  $(document).on('hugging-face-ready', async e => {\n    showHuggingFace = true;\n    await $update();\n  });\n  $(document).on('set-ai-prompt', async e => {\n    let range = quillEditorService.activeEditor.getSelection();\n    if (range) {\n      if (range.length > 0) {\n        aiPrompt = quillEditorService.activeEditor.getText(range.index, range.length);\n        console.log('User has highlighted: ', aiPrompt);\n      } else {\n        aiPrompt = '';\n      }\n    }\n    await $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"item-show\">\n\n        <input type=\"hidden\" name=\"_id\" value=\"${itemViewModel?.item?._id}\" />\n        <input type=\"hidden\" name=\"_rev\" value=\"${itemViewModel?.item?._rev}\" />\n        <input type=\"hidden\" name=\"dateCreated\" value=\"${itemViewModel?.item?.dateCreated}\" />\n        <input type=\"hidden\" name=\"tokenId\" value=\"${itemViewModel?.item?.tokenId}\" />\n        <input type=\"hidden\" name=\"channelId\" value=\"${itemViewModel?.channel?._id}\" />\n\n        <div class=\"left\">\n            <div class=\"card\">\n                <div class=\"card-content\">\n    \n                    <div class=\"list\">\n                        <ul>\n                            <li>\n                                <div class=\"item-content item-input\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title item-label\">Title</div>\n                                        <div class=\"item-input-wrap\">\n                                            <input type=\"text\" name=\"title\" placeholder=\"Title\"\n                                                value=\"${itemViewModel?.item?.title}\" id=\"title-header-input\"\n                                                @input=\"${titleOnInput}\" />\n                                        </div>\n                                    </div>\n                                </div>\n                            </li>\n    \n                            <li>\n                                <div class=\"item-content item-input\">\n                                    <div class=\"item-inner post-area\">\n                                        <div class=\"item-title item-label\">Content</div>\n    \n                                        <div id=\"${toolbarId}\">\n    \n                                            <select class=\"ql-header\">\n                                                <option selected></option>\n                                                <option value=\"1\">Heading</option>\n                                                <option value=\"2\">Subheading</option>\n                                            </select>\n    \n    \n                                            <!-- Add a bold button -->\n                                            <button class=\"ql-bold\"></button>\n                                            <button class=\"ql-italic\"></button>\n                                            <button class=\"ql-strike\"></button>\n                                            <button class=\"ql-underline\"></button>\n                                            <button class=\"ql-link\"></button>\n                                            <button class=\"ql-list\" value=\"ordered\"></button>\n                                            <button class=\"ql-list\" value=\"bullet\"></button>\n    \n    \n                                            <!-- Add subscript and superscript buttons -->\n                                            <button class=\"ql-script\" value=\"sub\"></button>\n                                            <button class=\"ql-script\" value=\"super\"></button>\n    \n                                            <button class=\"text-editor-button image-button\"><i class=\"material-icons\">image</i></button>\n                                            <label><input type=\"file\" class=\"image-button-input\" /></label>\n\n                                            <button class=\"text-editor-button ai-button\" ${showHuggingFace ? $h`style='display: visible;'` : $h``}>AI</button>                                                \n\n\n                                        </div>\n    \n                                        <div class=\"editor bg-color-white text-color-black\" id=\"${editorId}\"></div>\n                                    </div>\n                                </div>\n                            </li>\n    \n    \n    \n                            <li class=\"cover-photo-preview\">\n    \n                                ${itemViewModel?.coverImage ? $h`\n                                <input type=\"hidden\" name=\"coverImageId\" value=\"${itemViewModel?.coverImage?.cid}\" />\n                                ` : $h`\n                                <input type=\"hidden\" name=\"coverImageId\" value=\"\" />\n                                `}\n    \n                                <div class=\"item-content item-input\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title item-label\">\n                                            Cover Image\n                                            <div class=\"item-footer\">If there is no image in the content then an SVG cover image will be generated.</div>\n                                        </div>\n                                        <div class=\"item-input-wrap\">\n    \n                                            ${itemViewModel?.images?.length > 0 ? $h`\n    \n                                                ${itemViewModel?.images?.map( (image) => $h`\n                                                    <img class=\"cover-image-thumbnail ${ (  (image?.cid == itemViewModel.coverImage?.cid) || (itemViewModel.coverImage == undefined && image.generated == true) )  ? 'selected' : ''}  \"\n                                                        src=\"${image?.url}\" data-id=\"${image?.cid}\" @click=${coverImageClick} />\n                                                `)}\n    \n                                            ` : $h`\n    \n                                                <p>No images</p>\n    \n                                            `}\n    \n                                            <button class=\"button button-outline clear-button margin-bottom\"\n                                                @click=\"${coverImageClearClick}\">Clear</button>\n    \n                                        </div>\n                                    </div>\n                                </div>\n    \n                            </li>    \n                            <li>\n                                <label class=\"item-checkbox item-content\">\n    \n                                    <input type=\"checkbox\" checked=\"${!itemViewModel.item.coverImageAsAnimation}\" name=\"coverImageAsAnimation\" @change=\"${coverImageAsAnimationOnClick}\" />\n                                    \n                                    <i class=\"icon icon-checkbox\"></i>\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title\">\n                                            <div class=\"item-header\"></div>\n                                            Generate Animation HTML\n                                            <div class=\"item-footer\">\n                                            Include full text. Otherwise only the cover image will be shown.\n                                            </div>\n                                        </div>\n                                    </div>\n                                </label>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header\">Customize</div>\n                <div class=\"card-content\">\n                    <div class=\"list\">\n                        <ul>\n                            <li>\n                                <a href=\"#\" class=\"item-link smart-select smart-select-init\" data-open-in=\"popup\">\n                                    <!-- \"multiple\" attribute for multiple select-->\n                                    <select name=\"themes\" @change=\"${themeSelectionChange}\" tabindex=\"2\" multiple>\n                                        <optgroup>\n                                            ${themes?.map( (theme) => $h`\n    \n                                                ${itemViewModel.item?.themes?.includes(theme._id) ? $h`\n                                                    <option value=\"${theme._id}\" selected>${theme.name}</option>\n                                                    ` : $h`\n                                                    <option value=\"${theme._id}\">${theme.name}</option>\n                                                `}\n    \n                                            `)}\n                                        </optgroup>\n                                    </select>\n                                    <div class=\"item-content\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title\">Choose Theme(s)</div>\n                                        </div>\n                                    </div>\n                                </a>\n                            </li>\n    \n                            <li class=\"accordion-item\">\n                                <a href=\"\" class=\"item-link item-content\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title\">Edit Cover Image CSS (SVG)</div>\n                                    </div>\n                                </a>\n                                <div class=\"accordion-item-content\">\n                                    <div class=\"editor bg-color-white text-color-black css-editor\" id=\"${coverImageCSSEditorId}\" tabindex=\"3\"></div>\n                                </div>\n                            </li>\n    \n                            ${showAnimationCss ? $h`\n                                <li class=\"accordion-item\">\n                                    <a href=\"\" class=\"item-link item-content\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title\">Edit Animation CSS (HTML)</div>\n                                        </div>\n                                    </a>\n                                    <div class=\"accordion-item-content\">\n                                        <div class=\"editor bg-color-white text-color-black css-editor\" id=\"${animationCSSEditorId}\" tabindex=\"4\"></div>\n                                    </div>\n                                </li>\n                            ` : $h`\n                                <li class=\"accordion-item\" style=\"display:none;\">\n                                    <a href=\"\" class=\"item-link item-content\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title\">Edit Animation CSS (HTML)</div>\n                                        </div>\n                                    </a>\n                                    <div class=\"accordion-item-content\">\n                                        <div class=\"editor bg-color-white text-color-black css-editor\" id=\"${animationCSSEditorId}\" tabindex=\"4\"></div>\n                                    </div>\n                                </li>\n    \n    \n                            `}\n    \n    \n                        \n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        <div class=\"right\">\n\n            <div class=\"sticky\">\n\n                <div class=\"card\">\n                    <div class=\"card-content card-content-padding\" style=\"background: #f1f1f1;\">\n                        <div class=\"segmented\">\n       \n                            <a href=\"${cancelLink}\" class=\"button button-outline color-gray\" tabindex=\"12\">Cancel</a>\n                \n                            ${ipfsReady ? $h`\n                              <button type=\"submit\" class=\"button button-fill\" tabindex=\"12\">Save</button>\n                            ` : $h`\n                              <button class=\"button button-outline color-lightblue\" tabindex=\"12\" disabled>IPFS initializing...</button>\n                            `}\n                \n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            ${itemViewModel.attributeSelections?.length > 0 ? $h`\n                <div class=\"card\">\n                    <div class=\"card-header\">Attributes</div>\n                    <div class=\"card-content\">\n                        <div class=\"list\">\n                            <ul>\n                                ${itemViewModel.attributeSelections?.map( (attributeSelectionViewModel) => $h`\n                                <li>\n                                    <a href=\"#\" class=\"item-link smart-select smart-select-init\" data-open-in=\"popover\">\n                                        <!-- \"multiple\" attribute for multiple select-->\n                                        <select @change=\"${valueNameChange}\" tabindex=\"2\" data-id=\"${attributeSelectionViewModel?.id}\">\n                                            ${attributeSelectionViewModel?.values?.map( v => $h`\n\n                                                ${attributeSelectionViewModel?.value?.toString() == v.toString() ? $h`\n                                                <option value=\"${v}\" selected>${v}</option>\n                                                ` : $h`\n                                                <option value=\"${v}\">${v}</option>\n                                                `}\n\n                                            `)}\n                                        </select>\n                                        <div class=\"item-content\">\n                                            <div class=\"item-inner\">\n                                                <div class=\"item-title\">${attributeSelectionViewModel?.traitType}</div>\n                                            </div>\n                                        </div>\n                                    </a>\n                                </li>\n\n\n                                `)}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            ` : $h``}\n\n\n\n\n        </div>\n\n        <input type=\"hidden\" name=\"attributeSelections\" value=\"${JSON.stringify(attributeSelections)}\" />\n\n        <div class=\"popup ai-popup\">\n            <div class=\"view\">\n                <div class=\"page\">\n                    <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                            <div class=\"title\">Generate AI Image</div>\n                            <div class=\"right\">\n                                <!-- Link to close popup -->\n                                <a class=\"link popup-close\">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"page-content\">\n\n                        <form id=\"generate-form\" @submit=\"${generateFormSubmit}\">\n                        \n                            <div class=\"list\">\n                                <ul>\n    \n                                    <li>\n                                        <div class=\"item-content item-input\">\n                                            <div class=\"item-inner\">\n\n                                                <div class=\"item-title item-label\">Model</div>\n                                                <div class=\"item-input-wrap input-dropdown-wrap\">\n                                                    <select name=\"model\" tabindex=\"40\">\n                                                        <option value=\"stabilityai/stable-diffusion-2\" selected>Image: stabilityai/stable-diffusion-2</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </li>\n\n\n                                    <li>\n                                        <div class=\"item-content item-input\">\n                                            <div class=\"item-inner\">\n                                                <div class=\"item-title item-label\">Prompt</div>\n                                                <div class=\"item-input-wrap\">\n                                                    <textarea name=\"prompt\" tabindex=\"41\">${aiPrompt}</textarea>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </li>\n    \n                                    <li>\n                                        <div class=\"item-content item-input\">\n                                            <div class=\"item-inner\">\n                                                <div class=\"item-title item-label\">Negative Prompt</div>\n                                                <div class=\"item-input-wrap\">\n                                                    <textarea name=\"negativePrompt\" tabindex=\"42\"></textarea>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </li>\n    \n    \n    \n                                </ul>\n                            </div>\n    \n                            <div class=\"block save-row\">\n              \n                                <div class=\"large-only\"></div>\n                  \n                                <button type=\"submit\" class=\"button button-fill\" tabindex=\"43\">\n                                  Generate\n                                </button>\n                  \n                            </div>\n                        </form>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '4c1252bee4';\nframework7Component.style = `\n    .cover-image-thumbnail {\n        width: 250px;\n        height: 250px;\n    }\n\n    .cover-image-thumbnail.selected {\n        border: 3px solid #ff0000;\n    }\n\n    #title-header-input {\n        line-height: 30px;\n        font-size: 30px;\n        font-weight: 700;\n        height: 50px;\n    }\n\n    .clear-button {\n        width: 100px;\n    }\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport { GitService } from \"../../../service/core/git-service\";\nimport { QuillEditorService } from \"../../../service/quill-editor-service\";\nimport { QuillService } from \"../../../service/quill-service\";\nimport { ItemService } from \"../../../service/item-service\";\nimport { ImageService } from \"../../../service/image-service\";\nimport { HuggingFaceService } from \"../../../service/core/hugging-face-service\";\nimport { ItemWebService } from \"../../../service/web/item-web-service\";\nimport { WalletService } from \"../../../service/core/wallet-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { SettingsService } from \"../../../service/core/settings-service\";\nimport { Item } from \"../../../dto/item\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport ItemForm from \"../../admin/item/form.f7.html\";\nimport excerptHtml from 'excerpt-html';\nimport hljs from \"highlight.js\";\nimport Quill from \"quill\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let quillEditorService = ContainerService.getInstance(QuillEditorService);\n  let quillService = ContainerService.getInstance(QuillService);\n  let uiService = ContainerService.getInstance(UiService);\n  let itemService = ContainerService.getInstance(ItemService);\n  let imageService = ContainerService.getInstance(ImageService);\n  let itemWebService = ContainerService.getInstance(ItemWebService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let gitService = ContainerService.getInstance(GitService);\n  let settingsService = ContainerService.getInstance(SettingsService);\n  let huggingFaceService = ContainerService.getInstance(HuggingFaceService);\n  let walletService = ContainerService.getWalletService();\n  let itemViewModel = props.itemViewModel;\n  let themes = props.themes;\n  let ipfsReady = false;\n  let cancelLink = `/admin/channel/show/${itemViewModel.channel._id}`;\n  let showHuggingFace = false;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: itemViewModel.channel.title,\n    path: `/admin/channel/show/${itemViewModel.channel._id}`\n  }, {\n    text: 'Create Item'\n  }];\n  let toast;\n  let coverImageCSSQuillEditor;\n  let animationCSSQuillEditor;\n  hljs.configure({\n    // optionally configure hljs\n    languages: ['css']\n  });\n  const formSubmit = async e => {\n    e.preventDefault();\n\n    //Initialize IPFS\n    await ipfsService.init();\n\n    //Initialize git's fs\n    // await gitService.initFS(itemViewModel.channel)\n\n    let formData = $f7.form.convertToData('#create-item-form');\n    let showExcerpt = false;\n\n    //Get data\n    let item = Object.assign(new Item(), formData);\n    item.coverImageAsAnimation = formData.coverImageAsAnimation[0] != \"on\";\n\n    //Get content from quill\n    item.content = quillEditorService.activeEditor.getContents();\n    item.coverImageCSS = coverImageCSSQuillEditor.getText() != \"\\n\" ? coverImageCSSQuillEditor.getText() : undefined;\n    item.animationCSS = animationCSSQuillEditor.getText() != \"\\n\" ? animationCSSQuillEditor.getText() : undefined;\n\n    //Parse attributes\n    item.attributeSelections = JSON.parse(item.attributeSelections).map(as => {\n      return {\n        id: as.id,\n        traitType: as.traitType,\n        value: as.value\n      };\n    });\n\n    //Build contentHTML for searching\n    item.contentHTML = await quillService.translateContent(item.content, true);\n\n    //Save the cover image if necessary\n    let coverImage = await itemWebService.saveGeneratedCoverImage(item);\n    item.coverImageGenerated = coverImage.generated;\n\n    //And the animation\n    item.tokenId = await itemService.getNextTokenId(item.channelId); //Will get overwritten when saved but we need it for the animation\n\n    if (!item.coverImageAsAnimation) {\n      await itemWebService.saveAnimation(item);\n    }\n\n    //Save\n    try {\n      uiService.showSpinner();\n      await itemWebService.put({\n        channel: itemViewModel.channel,\n        item: item,\n        updateQueryCache: true,\n        publish: false\n      });\n      const toast = $f7.toast.show({\n        text: 'Item created',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n\n      //Redirect\n      $f7.views.main.router.navigate(`/admin/channel/show/${item.channelId}/${item.tokenId}`);\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex.errors, \"There was an error\");\n    }\n  };\n  $on('pageInit', async (e, page) => {\n    quillEditorService.buildQuillPostEditor(\"#create-item-editor\", \"#create-item-toolbar\");\n    quillEditorService.activeEditor.root.addEventListener('blur', function () {\n      document.dispatchEvent(new CustomEvent('load-cover-images'));\n    });\n    quillEditorService.activeEditor.on('text-change', (delta, oldContents, source) => {\n      document.dispatchEvent(new CustomEvent('load-cover-images'));\n      if (source !== 'user') return;\n      function getImgUrls(delta) {\n        return delta.ops.filter(i => i.insert && i.insert.ipfsimage).map(i => i.insert.ipfsimage);\n      }\n\n      //Get images that have been removed. \n      const deleted = getImgUrls(quillEditorService.activeEditor.getContents().diff(oldContents));\n\n      //Remove them from the images array\n      deleted.forEach(img => {\n        itemViewModel.images = itemViewModel.images.filter(i => i.cid != img.cid);\n        if (img.cid == itemViewModel.coverImage?.cid) {\n          itemViewModel.coverImage = undefined;\n        }\n      });\n    });\n    $('.image-button').off('click');\n    $('.image-button-input').off('click');\n    $('.ai-button').off('click');\n    $('.image-button').on('click', function (e) {\n      e.preventDefault();\n      const imageButtonInput = $(\".image-button-input\");\n      imageButtonInput.click();\n    });\n    $('.image-button-input').on('change', async function (e) {\n      e.preventDefault();\n      await quillEditorService.imageSelected(this);\n    });\n    $('.ai-button').on('click', async function (e) {\n      e.preventDefault();\n      const aiPromptEvent = new CustomEvent('set-ai-prompt');\n      document.dispatchEvent(aiPromptEvent);\n      $f7.popup.open('.ai-popup');\n    });\n\n    //Cover image\n    coverImageCSSQuillEditor = new Quill('#cover-image-css-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        syntax: {\n          highlight: text => hljs.highlightAuto(text).value\n        },\n        toolbar: false\n      }\n    });\n    coverImageCSSQuillEditor.on('text-change', (delta, oldContents, source) => {\n      document.dispatchEvent(new CustomEvent('update-cover-image-css', {\n        detail: {\n          coverImageCSS: coverImageCSSQuillEditor.getText() != \"\\n\" ? coverImageCSSQuillEditor.getText() : undefined\n        }\n      }));\n    });\n    animationCSSQuillEditor = new Quill('#animation-css-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        syntax: {\n          highlight: text => hljs.highlightAuto(text).value\n        },\n        toolbar: false\n      }\n    });\n    coverImageCSSQuillEditor.setText(\".svg-h1 {}\");\n    animationCSSQuillEditor.setText(\".animation-container {}\");\n    await $update();\n    uiService.showSpinner();\n\n    //Initialize git's fs\n    // await gitService.initFS(itemViewModel.channel)\n\n    //Initialize IPFS\n    await ipfsService.init();\n    ipfsReady = ipfsService.ipfs != undefined;\n    const ipfsReadyEvent = new CustomEvent('ipfs-ready');\n    document.dispatchEvent(ipfsReadyEvent);\n    const settings = await settingsService.get();\n    showHuggingFace = settings?.huggingFace != undefined;\n    if (settings?.huggingFace?.length > 0) {\n      await huggingFaceService.init();\n      const huggingFaceReady = new CustomEvent('hugging-face-ready');\n      document.dispatchEvent(huggingFaceReady);\n    }\n    uiService.hideSpinner();\n    await $update();\n  });\n  $on('pageBeforeRemove', () => {\n    // Destroy toasts when page removed\n    // if (toast) toast.destroy()\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-create-item\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <form class=\"list media-list\" id=\"create-item-form\" @submit=\"${formSubmit}\">\n\n        <${ItemForm} item=${itemViewModel} \n          themes=${themes}\n          editor=\"create-item-editor\" \n          toolbar=\"create-item-toolbar\" \n          cover_image_css_editor_id=\"cover-image-css-editor\"\n          animation_css_editor_id=\"animation-css-editor\"\n          themes=${themes}\n          cancel_link=${cancelLink}\n          show_hugging_face=${showHuggingFace}\n        />\n\n      </form>\n\n\n    </div>\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '2c1a8a9b44';\nframework7Component.style = `\n  #create-item-editor {\n    min-height: 175px;\n    height: 100%;\n    /* added these styles */\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n  }\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { ItemService } from \"../../../service/item-service\";\nimport TokenNavigator from \"../channel/token-navigator.f7.html\";\nimport { ItemWebService } from \"../../../service/web/item-web-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport hotkeys from 'hotkeys-js';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let itemService = ContainerService.getInstance(ItemService);\n  let uiService = ContainerService.getInstance(UiService);\n  let itemWebService = ContainerService.getInstance(ItemWebService);\n  let itemViewModel = props.itemViewModel;\n  // console.log(itemViewModel)\n\n  let showEdit = itemViewModel.editable;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: itemViewModel.channel.title,\n    path: `/admin/channel/show/${itemViewModel.channel._id}`\n  }, {\n    text: itemViewModel.item.title ? itemViewModel.item.title : `#${itemViewModel.item.tokenId}`\n  }];\n  $on('pageInit', async (e, page) => {\n    //Add external to any links in the doc\n    $(`#item-content-${itemViewModel.item._id} a`).addClass('external');\n    await $update();\n  });\n  const deleteClick = async e => {\n    try {\n      $f7.dialog.confirm(\"Do you want to delete this item? Note: This only deletes from your device.\", async function () {\n        await itemWebService.delete(itemViewModel.item);\n        const toast = $f7.toast.show({\n          text: 'Item deleted',\n          closeTimeout: 2000,\n          closeButton: true,\n          position: 'bottom',\n          horizontalPosition: 'left'\n        });\n\n        //Redirect\n        $f7.views.main.router.navigate(`/admin/channel/show/${itemViewModel.channel._id}`);\n      });\n    } catch (ex) {\n      uiService.showExceptionPopup(ex);\n    }\n  };\n  const cloneClick = async e => {\n    let clone = await itemWebService.clone(itemViewModel.item);\n\n    // console.log(`/admin/channel/show/${itemViewModel.channel._id}/${clone.tokenId}`)\n\n    $f7.views.main.router.navigate(`/admin/channel/${itemViewModel.channel._id}/item/edit/${clone._id}`);\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-show-item\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n    ${itemViewModel.editable ? $h`\n      <div class=\"fab fab-extended fab-right-bottom\">\n        <a href=\"/admin/item/create/${itemViewModel.channel._id}\">\n          <i class=\"material-icons\">create</i>\n          <div class=\"fab-text\">Create Item</div>\n        </a>\n      </div>\n    ` : $h``} \n\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <div class=\"item-show\">\n\n        <div class=\"left\">\n          <div class=\"card animation-card\">\n            <div class=\"card-content ${itemViewModel.item.coverImageAsAnimation ? $h`card-content-padding` : $h` `}\">\n  \n              ${itemViewModel.item.coverImageAsAnimation ? $h`\n                <div class=\"animation-content animation-image\">\n                  <img src=\"${itemViewModel.coverImage?.url}\" alt=\"Item cover image\" />\n                </div>\n               \n              ` : $h`\n                <div class=\"animation-content\" innerHTML=\"${itemViewModel.animationContentHTML}\"></div>\n  \n              `}\n  \n            </div>\n  \n  \n          </div> \n  \n          <div class=\"block split-row-both\">\n  \n            ${itemViewModel.previous ? $h`\n              <a class=\"button button-outline back-token-button margin-bottom color-gray\" href=\"/admin/channel/show/${itemViewModel.channel._id}/${itemViewModel.previous}\">\n                <i class=\"icon f7-icons color-blue\">arrow_left</i>\n              </a>\n            ` : $h`<span />`}\n  \n    \n            ${itemViewModel.next ? $h`\n              <a class=\"button button-fill continue-button margin-bottom\" href=\"/admin/channel/show/${itemViewModel.channel._id}/${itemViewModel.next}\" data-transition=\"f7-cover\">\n                Continue <i class=\"f7-icons\">arrow_right</i>\n              </a>\n            ` : $h`<span />`}\n  \n          </div>\n        </div>\n\n        <div class=\"right\">\n\n          <${TokenNavigator} channel=${itemViewModel.channel._id} item=${itemViewModel} />\n  \n  \n          ${itemViewModel.previous || itemViewModel.next ? $h`\n            \n            <div class=\"card large-only\">\n              <div class=\"card-content card-content-padding\">\n                <div class=\"segmented\">\n  \n                  ${itemViewModel.previous ? $h`\n                    <a class=\"button button-outline\" href=\"/admin/channel/show/${itemViewModel.channel._id}/${itemViewModel.previous}\">\n                      <i class=\"icon f7-icons\">arrow_left</i>\n                    </a>\n                  ` : $h`\n                    <a class=\"button button-outline\" href=\"#\"></a>\n                  `}\n        \n                  ${itemViewModel.next ? $h`\n                    <a class=\"button button-outline\" href=\"/admin/channel/show/${itemViewModel.channel._id}/${itemViewModel.next}\" data-transition=\"f7-cover\">\n                      <i class=\"f7-icons\">arrow_right</i>\n                    </a>\n                  ` : $h`\n                    <a class=\"button button-outline\" href=\"#\"></a>\n                  `}\n  \n                </div>\n              </div>\n            </div>\n  \n          ` : $h`<span />`}\n  \n  \n          ${itemViewModel.editable ? $h`\n            <div class=\"card\">\n              <div class=\"card-header\">Modify</div>\n              <div class=\"card-content card-content-padding\">\n  \n                <div class=\"segmented col-100\">\n  \n                  <a class=\"button button-outline \" href=\"/admin/channel/${itemViewModel.channel._id}/item/edit/${itemViewModel.item._id}\" id=\"edit-${itemViewModel.item._id}\">Edit</a>\n                  <a class=\"button button-outline \" href=\"#\" data-id=\"${itemViewModel.item._id}\" @click=\"${cloneClick}\">Clone</a>\n  \n                  ${itemViewModel.canDelete ? $h`\n                    <a class=\"button button-outline\" @click=\"${deleteClick}\">\n                      <i class=\"material-icons\">delete</i>\n                    </a>\n                  ` : $h`<span/>`}\n  \n                </div>\n  \n                ${!itemViewModel.canDelete ? $h`\n                  <p>Note: Only the last NFT can be deleted.</p>\n                ` : $h`<span />`}\n  \n  \n              </div>\n  \n  \n  \n            </div>          \n          ` :$h`<span />`}\n          \n  \n  \n          <div class=\"card\">\n            <div class=\"card-header\">\n              <span>\n                <i class=\"material-icons\">person</i>\n                <label>Info</label>\n              </span>\n            </div>\n            <div class=\"card-content data-table\">\n  \n              <table>\n                <tbody>\n  \n                  ${itemViewModel?.authorDisplayName ? $h`\n                    <tr>\n                      <td class=\"label-cell\">Creator:</td> \n                      <td><a href=\"/admin/author/show/${itemViewModel?.author?._id}\">${itemViewModel?.authorDisplayName}</a></td>\n                    </tr>  \n                  ` : $h`<span />`}\n  \n                  <tr>\n                    <td class=\"label-cell\">Date:</td> \n                    <td><span class=\"date\">${itemViewModel.dateDisplay}</span></td>\n                  </tr>\n  \n                </tbody>\n              </table>\n  \n  \n            </div>\n          </div>\n  \n          <div class=\"card\">\n            <div class=\"card-header\">\n              <span>\n                <i class=\"material-icons\">label</i>\n                <label>Attributes</label>\n              </span>\n            </div>\n            <div class=\"card-content data-table\">\n  \n              <div class=\"button-outline attribute-value\">\n                <div class=\"trait-type\">Token ID</div>\n                <div class=\"value\">#${itemViewModel.item.tokenId}</div>\n              </div>\n  \n              ${itemViewModel.attributeSelections?.map(as => $h`\n  \n                ${as.value ? $h`\n                  <div class=\"button-outline attribute-value\">\n                    <div class=\"trait-type\">${as.traitType}</div>\n                    <div class=\"value\">${as.value}</div>\n                    <div class=\"category-percent\">${as.categoryPercent} have this trait</div>\n                  </div>\n                ` : $h`<span />`}\n  \n              `)}\n  \n            </div>\n          </div>\n  \n          ${itemViewModel.themes?.length > 0 ? $h`\n  \n            <div class=\"card\">\n              <div class=\"card-header\">Theme(s)</div>\n              <div class=\"card-content\">\n                \n                ${itemViewModel.themes?.map( (theme) => $h`\n  \n                  <div class=\"button-outline attribute-value\">\n                    <div class=\"value\">${theme.name}</div> <span class=\"theme-id\">${theme._id}</span>\n                  </div>\n  \n                `)}\n              </div>\n            </div>\n  \n          ` : $h`<span/>`}\n  \n  \n  \n  \n          ${!itemViewModel.item.coverImageAsAnimation ? $h`\n            <div class=\"card\">\n              <div class=\"card-header\">Cover Image</div>\n              <div class=\"card-content\">\n                <div class=\"square\">\n                  <img src=\"${itemViewModel.coverImage?.url}\" class=\"cover-image-preview\" alt=\"Item cover image\" />\n                </div>\n              </div>\n            </div>\n           \n          ` : $h`<span />`}\n  \n  \n  \n  \n        </div>\n  \n      </div>\n\n    </div>\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '739abc83dd';\nframework7Component.style = `\n\n\n\n\n  /* .item-card-show a {\n    color: var(--f7-text-color);\n  } */\n\n\n  .menu-dropdown-link.menu-close {\n    color: #ffffff;\n  }\n\n\n  .attribute-row {\n    font-size: 16px;\n    vertical-align: top;\n  }\n\n  .attribute-row strong {\n    width: 175px;\n    display: inline-block;\n    vertical-align: top;\n  }\n\n\n  .attribute-row .material-icons {\n    line-height: 16px;\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .item-show-footer {\n    font-size: 14px;\n  }\n\n  .card-header {\n    line-height: 21px;\n  }\n\n  .card-header label {\n    padding-bottom: 3px;\n    margin-left: 5px;\n    float: left;\n  }\n\n  .card-header .material-icons {\n    float: left;\n  }\n\n  .item-show-token-id {\n    color: rgb(79, 79, 79);\n  }\n\n  .cover-image-preview {\n    max-width: 100%;\n  }\n\n  .animation-preview {\n    margin-left: 5px;\n    height: 500px; \n    width: 500px;\n    max-width: 100%;\n    border: 1px solid #cccccc;\n  }\n\n\n  .nft-header-row {\n    display: flex;  \n  }\n\n  .nft-header-row .left {\n    flex: 0 0 500px;\n  }\n\n  .nft-header-row .right {\n    flex: 1;\n  }\n\n  .nft-header-row .right h1 {\n    font-size: 25px;\n  }\n\n  .nft-header-row .right h4 {\n    margin-bottom: 0px;\n  }\n\n\n\n\n\n@media only screen and (max-width: 1024px) {\n\n  .nft-header-row {\n    display: block;  \n  }\n  \n  .nft-header-row .left {\n    width: 100%;\n  }\n  \n  .nft-header-row .right {\n    width: 100%;\n  }\n  \n}\n\n\n.theme-name {\n  display: block;\n}\n\n.main-header {\n\n}\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { QuillEditorService } from \"../../../service/quill-editor-service\";\nimport { QuillService } from \"../../../service/quill-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport { GitService } from \"../../../service/core/git-service\";\nimport { HuggingFaceService } from \"../../../service/core/hugging-face-service\";\nimport { ItemService } from \"../../../service/item-service\";\nimport { ImageService } from \"../../../service/image-service\";\nimport { ItemWebService } from \"../../../service/web/item-web-service\";\nimport { SettingsService } from \"../../../service/core/settings-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { WalletService } from \"../../../service/core/wallet-service\";\nimport { Item } from \"../../../dto/item\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport ItemForm from \"../../admin/item/form.f7.html\";\nimport excerptHtml from 'excerpt-html';\nimport hljs from \"highlight.js\";\nimport Quill from \"quill\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let quillEditorService = ContainerService.getInstance(QuillEditorService);\n  let quillService = ContainerService.getInstance(QuillService);\n  let uiService = ContainerService.getInstance(UiService);\n  let itemService = ContainerService.getInstance(ItemService);\n  let itemWebService = ContainerService.getInstance(ItemWebService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let gitService = ContainerService.getInstance(GitService);\n  let settingsService = ContainerService.getInstance(SettingsService);\n  let huggingFaceService = ContainerService.getInstance(HuggingFaceService);\n  let imageService = ContainerService.getInstance(ImageService);\n  let walletService = ContainerService.getWalletService();\n  let itemViewModel = props.itemViewModel;\n  let themes = props.themes;\n  let ipfsReady = false;\n  let cancelLink = `/admin/channel/show/${itemViewModel.item.channelId}/${itemViewModel.item.tokenId}`;\n  let showHuggingFace = false;\n  let coverImageCSSQuillEditor;\n  let animationCSSQuillEditor;\n  hljs.configure({\n    // optionally configure hljs\n    languages: ['css']\n  });\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: itemViewModel.channel.title,\n    path: `/admin/channel/show/${itemViewModel.channel._id}`\n  }, {\n    text: itemViewModel.item.title ? itemViewModel.item.title : `#${itemViewModel.item.tokenId}`,\n    path: `/admin/channel/show/${itemViewModel.channel._id}/${itemViewModel.item.tokenId}`\n  }, {\n    text: \"Edit Item\"\n  }];\n  const formSubmit = async e => {\n    e.preventDefault();\n    let formData = $f7.form.convertToData('#edit-item-form');\n    let showExcerpt = false;\n\n    //Get data\n    let item = Object.assign(new Item(), formData);\n    item.coverImageAsAnimation = formData.coverImageAsAnimation[0] != \"on\";\n    item.tokenId = parseInt(formData.tokenId);\n\n    //Get content from quill\n    item.content = quillEditorService.activeEditor.getContents();\n    item.coverImageCSS = coverImageCSSQuillEditor.getText() != \"\\n\" ? coverImageCSSQuillEditor.getText() : undefined;\n    item.animationCSS = animationCSSQuillEditor.getText() != \"\\n\" ? animationCSSQuillEditor.getText() : undefined;\n\n    //Parse attributeOptions and category\n    if (item.attributeSelections) {\n      item.attributeSelections = JSON.parse(item.attributeSelections).map(as => {\n        return {\n          id: as.id,\n          traitType: as.traitType,\n          value: as.value\n        };\n      });\n    } else {\n      item.attributeSelections = [];\n    }\n\n    //Build contentHTML for searching\n    item.contentHTML = await quillService.translateContent(item.content, true);\n\n    //Save the cover image if necessary\n    let coverImage = await itemWebService.saveGeneratedCoverImage(item);\n    item.coverImageGenerated = coverImage.generated;\n\n    //And the animation\n    if (!item.coverImageAsAnimation) {\n      await itemWebService.saveAnimation(item);\n    }\n\n    //Save\n    try {\n      uiService.showSpinner();\n      await itemWebService.put({\n        channel: itemViewModel.channel,\n        item: item,\n        updateQueryCache: true,\n        publish: false\n      });\n      const toast = $f7.toast.show({\n        text: 'Item saved',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n\n      //Redirect\n      $f7.views.main.router.navigate(`/admin/channel/show/${item.channelId}/${item.tokenId}`);\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex.errors, \"There was an error\");\n    }\n  };\n  $on('pageInit', async (e, page) => {\n    //Initialize quill and fill contents\n    quillEditorService.buildQuillPostEditor('#edit-item-editor', '#edit-item-toolbar');\n    quillEditorService.activeEditor.setContents(itemViewModel.item.content);\n    quillEditorService.activeEditor.on('selection-change', range => {\n      document.dispatchEvent(new CustomEvent('load-cover-images'));\n    });\n    quillEditorService.activeEditor.on('text-change', (delta, oldContents, source) => {\n      document.dispatchEvent(new CustomEvent('load-cover-images'));\n      if (source !== 'user') return;\n      function getImgUrls(delta) {\n        return delta.ops.filter(i => i.insert && i.insert.ipfsimage).map(i => i.insert.ipfsimage);\n      }\n      let current = quillEditorService.activeEditor.getContents();\n      let diff = quillEditorService.activeEditor.getContents().diff(oldContents);\n\n      //Get images that have been changed. \n      const changed = getImgUrls(diff);\n\n      //Filter images that are different but just style updates\n      const deleted = [];\n      for (let d of changed) {\n        //Look for it in original\n        let old = oldContents.ops.filter(i => i.insert && i.insert.ipfsimage && i.insert.ipfsimage.cid == d.cid);\n\n        //Look for it in current\n        let cur = current.ops.filter(i => i.insert && i.insert.ipfsimage && i.insert.ipfsimage.cid == d.cid);\n        if (old.length > 0 && cur.length == 0) {\n          deleted.push(d);\n        }\n      }\n\n      //Remove them from the images array\n      deleted.forEach(img => {\n        itemViewModel.images = itemViewModel.images.filter(i => i.cid != img.cid);\n        if (img.cid == itemViewModel.coverImage?.cid) {\n          itemViewModel.coverImage = undefined;\n        }\n      });\n      $update();\n    });\n    $('.image-button').off('click');\n    $('.image-button-input').off('click');\n    $('.ai-button').off('click');\n    $('.image-button').on('click', function (e) {\n      e.preventDefault();\n      const imageButtonInput = $(\".image-button-input\");\n      imageButtonInput.click();\n    });\n    $('.image-button-input').on('change', async function (e) {\n      e.preventDefault();\n      await quillEditorService.imageSelected(this);\n    });\n    $('.ai-button').on('click', async function (e) {\n      e.preventDefault();\n      const aiPromptEvent = new CustomEvent('set-ai-prompt');\n      document.dispatchEvent(aiPromptEvent);\n      $f7.popup.open('.ai-popup');\n    });\n\n    //Cover image\n    coverImageCSSQuillEditor = new Quill('#cover-image-edit-css-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        syntax: {\n          highlight: text => hljs.highlightAuto(text).value\n        },\n        toolbar: false\n      }\n    });\n    coverImageCSSQuillEditor.on('text-change', (delta, oldContents, source) => {\n      document.dispatchEvent(new CustomEvent('update-cover-image-css', {\n        detail: {\n          coverImageCSS: coverImageCSSQuillEditor.getText() != \"\\n\" ? coverImageCSSQuillEditor.getText() : undefined\n        }\n      }));\n    });\n    animationCSSQuillEditor = new Quill('#animation-edit-css-editor', {\n      bounds: \".page-content\",\n      theme: \"snow\",\n      modules: {\n        syntax: {\n          highlight: text => hljs.highlightAuto(text).value\n        },\n        toolbar: false\n      }\n    });\n    if (itemViewModel.item.coverImageCSS) {\n      coverImageCSSQuillEditor.setText(itemViewModel.item.coverImageCSS);\n    }\n    if (itemViewModel.item.animationCSS) {\n      animationCSSQuillEditor.setText(itemViewModel.item.animationCSS);\n    }\n    await $update();\n    uiService.showSpinner();\n\n    //Initialize git's fs\n    // await gitService.initFS(itemViewModel.channel)\n\n    //Initialize IPFS\n    await ipfsService.init();\n    ipfsReady = ipfsService.ipfs != undefined;\n    const ipfsReadyEvent = new CustomEvent('ipfs-ready');\n    document.dispatchEvent(ipfsReadyEvent);\n    const settings = await settingsService.get();\n    showHuggingFace = settings?.huggingFace != undefined;\n    if (settings?.huggingFace?.length > 0) {\n      await huggingFaceService.init();\n      const huggingFaceReady = new CustomEvent('hugging-face-ready');\n      document.dispatchEvent(huggingFaceReady);\n    }\n    uiService.hideSpinner();\n    await $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"admin-edit-post\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs} />\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <form class=\"list media-list\" id=\"edit-item-form\" @submit=\"${formSubmit}\">\n\n        <${ItemForm} item=${itemViewModel} \n          editor=\"edit-item-editor\" \n          toolbar=\"edit-item-toolbar\" \n          cover_image_css_editor_id=\"cover-image-edit-css-editor\"\n          animation_css_editor_id=\"animation-edit-css-editor\"\n          themes=${themes}\n          cancel_link=${cancelLink}\n          show_hugging_face=${showHuggingFace}\n        />\n\n\n      </form>\n\n    </div>\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = 'd3a669057a';\nframework7Component.style = `\n  #edit-item-editor {\n    min-height: 175px;\n    height: 100%;\n    /* added these styles */\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n  }\n`;\nexport default framework7Component;","import { injectable } from \"inversify\";\nimport { ModelView } from \"../util/model-view.js\";\nimport { routeMap } from \"../util/route-map.js\";\nimport { RouteTo } from '../service/core/routing-service.js';\n\nimport AdminItemCreateComponent from '../components/admin/item/create.f7.html'\nimport AdminItemShowComponent from '../components/admin/item/show.f7.html'\nimport AdminItemEditComponent from '../components/admin/item/edit.f7.html'\n\nimport { ItemWebService } from \"../service/web/item-web-service.js\";\nimport { ThemeService } from \"../service/theme-service.js\";\nimport { SchemaService } from \"../service/core/schema-service.js\";\n\n\n@injectable()\nclass ItemController {\n\n    constructor(\n        private itemWebService:ItemWebService,\n        private themeService:ThemeService,\n        private schemaService:SchemaService\n    ) {}\n\n    @routeMap(\"/admin/item/create/:channelId\")\n    async create() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.channelId)\n\n            let itemViewModel = await this.itemWebService.getNewViewModel(routeTo.params.channelId)\n\n            return {\n                itemViewModel: itemViewModel,\n                themes: await this.themeService.listByChannel(itemViewModel.channel._id, 1000, 0)\n            }\n\n        }, AdminItemCreateComponent)\n    }\n\n    @routeMap(\"/admin/channel/show/:channelId/:tokenId\")\n    async show() : Promise<ModelView> {\n        \n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.channelId)\n\n            let itemViewModel = await this.itemWebService.getNavigation(routeTo.params.channelId, parseInt(routeTo.params.tokenId))\n\n            return {\n                itemViewModel: itemViewModel\n            }\n\n        }, AdminItemShowComponent)\n    }\n\n    @routeMap(\"/admin/channel/:channelId/item/edit/:id\")\n    async edit() : Promise<ModelView> {\n        \n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.channelId)\n\n            let itemViewModel = await this.itemWebService.get(routeTo.params.id)\n\n\n            return {\n                itemViewModel: itemViewModel,\n                themes: await this.themeService.listByChannel(itemViewModel.channel._id, 1000, 0)\n            }\n\n        }, AdminItemEditComponent)\n    }\n\n\n}\n\nexport {\n    ItemController\n}","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { AuthorService } from \"../../../service/author-service\";\nimport { Author } from \"../../../dto/author\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let authorViewModel = props.authorViewModel;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: 'Author Profile'\n  }];\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n    <div class=\"page\" data-name=\"profile-show\">\n\n        <${Navbar} breadcrumbs=${breadcrumbs} active=\"profile\" />\n\n        <div class=\"page-content hide-toolbar-on-scroll\">\n\n            ${authorViewModel.author._id ? $h`\n\n                <div class=\"block row\">\n                    <div class=\"col-20\">\n\n                        ${authorViewModel.authorPhoto ? $h`\n                            <img src=\"${authorViewModel.authorPhoto.url}\" class=\"profile-pic-main\" alt=\"Author photo\" />\n                        ` : $h`\n                            <i class=\"material-icons\" id=\"profile-pic-not-found\">person</i>\n                        `}\n\n                    </div>\n\n                    <div class=\"col-80\">\n\n                        <div class=\"profile-name\">\n                            ${authorViewModel.authorDisplayName}\n                        </div>\n\n                        <div class=\"profile-address\">\n                            ${authorViewModel.author._id}\n                        </div>\n\n                        <p>${authorViewModel.author.description}</p>\n\n                        <div class=\"row\">\n                            <a href=\"/admin/${props.channelId}/author/edit/${authorViewModel.author.walletAddress}\"\n                                class=\"button button-outline button-small button-round col-20\">Edit</a>\n                        </div>\n\n                    </div>\n                </div>\n\n                ` : $h`\n                    <div class=\"block\">\n                        Create your Large <a href=\"/admin/${props.channelId}/author/edit/${authorViewModel.author.walletAddress}\">author profile</a>. \n                    </div>\n                `}\n\n\n        </div>\n\n    </div>\n`\n    }\n    ;\n}\nframework7Component.id = '06233773ce';\nframework7Component.style = `\n    \n  .profile-pic-edit, #profile-pic--edit-not-found {\n    max-width: 300px;\n    border-radius: 50%;\n    font-size: 100px;\n    float: left;\n  }\n  \n  \n  .profile-pic-main, #profile-pic-not-found {\n    max-width: 100%;\n    border-radius: 50%;\n    font-size: 100px;\n    float: left;\n  }\n  \n  .profile-name {\n    color: var(--f7-block-title-medium-text-color);\n    font-weight: bold;\n  }\n  \n  .profile-address {\n    color: var(--f7-list-item-text-text-color);\n    font-size: 13px;\n  }\n  \n  \n  .profile-pic-wrapper {\n    width: 115px;\n    float: left;\n    padding-right: 20px;\n  }\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { UploadService } from \"../../../service/core/upload-service\";\nimport { AuthorService } from \"../../../service/author-service\";\nimport { ImageService } from \"../../../service/image-service\";\nimport { Author } from \"../../../dto/author\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let uploadService = ContainerService.getInstance(UploadService);\n  let imageService = ContainerService.getInstance(ImageService);\n  let authorService = ContainerService.getInstance(AuthorService);\n  let walletService = ContainerService.getWalletService();\n  let authorViewModel = props.authorViewModel;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: walletService.truncateEthAddress(authorViewModel.author.walletAddress),\n    path: `/admin/author/show/${authorViewModel.author.walletAddress}`\n  }, {\n    text: 'Edit Profile'\n  }];\n  const formSubmit = async e => {\n    e.preventDefault();\n\n    //Get data\n    let author = Object.assign(new Author(), $f7.form.convertToData('#edit-author-form'));\n\n    //Save\n    try {\n      await authorService.put(author);\n      const toast = $f7.toast.show({\n        text: 'Profile Saved',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n\n      //Redirect\n      $f7.views.main.router.navigate(`/admin/${props.channelId}/author/show/${author._id}`);\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex.errors, \"There was an error\");\n    }\n  };\n  const handleAuthorPhotoBrowseClick = async e => {\n    $(\"#author-photo-browse\").click();\n  };\n  const handleAuthorPhotoChange = async e => {\n    let imageBuffer = await uploadService.uploadFile(document.getElementById('author-photo-browse'));\n    let image = await imageService.newFromBuffer(imageBuffer);\n    try {\n      //Could be a duplicate. Which means it's fine.\n      await imageService.put(image);\n    } catch (ex) {}\n    authorViewModel.authorPhoto = {\n      cid: image.cid,\n      url: await imageService.getUrl(image)\n    };\n    $update();\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n    <div class=\"page\" data-name=\"profile-edit\">\n\n        <${Navbar} breadcrumbs=${breadcrumbs} active=\"profile\" />\n\n\n        <div class=\"page-content hide-toolbar-on-scroll\">\n\n            <div class=\"block-title block-title-medium\">Edit Profile</div>\n            <form id=\"edit-author-form\" @submit=\"${formSubmit}\">\n\n                <input type=\"hidden\" name=\"_id\" value=\"${authorViewModel.author._id}\" />\n                <input type=\"hidden\" name=\"_rev\" value=\"${authorViewModel.author._rev}\" />\n\n                <input type=\"hidden\" name=\"walletAddress\" value=\"${authorViewModel.author.walletAddress}\" />\n\n                <div class=\"card\">\n                    <div class=\"card-content\">\n                        <div class=\"list\">\n                            <ul>\n        \n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Avatar</div>\n                                            <div class=\"item-input-wrap\">\n            \n                                                ${authorViewModel.authorPhoto ? $h`\n                                                <img class=\"author-photo-preview\"\n                                                    src=\"${authorViewModel.authorPhoto.url}\" alt=\"Author photo\" />\n                                                ` : $h`\n                                                <i class=\"material-icons author-photo-preview\">image</i>\n                                                `}\n            \n                                                <input type=\"button\" class=\"button button-fill browse-file\" value=\"Browse\"\n                                                    @click=\"${handleAuthorPhotoBrowseClick}\" tabindex=\"1\" />\n                                                <input type=\"hidden\" name=\"coverPhotoId\"\n                                                    value=\"${authorViewModel?.authorPhoto?.cid}\" />\n                                                <input type=\"file\" id=\"author-photo-browse\" style=\"display: none\"\n                                                    @change=\"${handleAuthorPhotoChange}\" />\n            \n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n            \n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Name</div>\n                                            <div class=\"item-input-wrap\">\n                                                <input type=\"text\" name=\"name\" value=\"${authorViewModel.author.name}\" placeholder=\"Enter your name\" tabindex=\"2\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n                                <li>\n                                    <div class=\"item-content item-input\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title item-label\">Description</div>\n                                            <div class=\"item-input-wrap\">\n                                                <textarea name=\"description\" placeholder=\"Enter a short bio\" tabindex=\"3\">${authorViewModel.author.description}</textarea>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n            \n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"block cancel-save-row\">\n\n                    <div class=\"large-only\"></div>\n\n                    <a href=\"/admin/author/show/${authorViewModel.author.walletAddress}\" class=\"button button-outline color-gray\" tabindex=\"4\">Cancel</a>\n      \n                    <button type=\"submit\" class=\"button button-fill\" tabindex=\"5\">\n                      Save\n                    </button>\n      \n                </div>\n\n\n            </form>\n\n        </div>\n\n    </div>\n`\n    }\n    ;\n}\nframework7Component.id = '56eb88bbe1';\nframework7Component.style = `\n    .author-photo-preview {\n        max-width: 100%;\n        max-height: 200px;\n        border: 1px solid #cccccc;\n        padding: 5px;\n        margin-bottom: 10px;\n    }\n`;\nexport default framework7Component;","import { injectable } from \"inversify\";\nimport { ModelView } from \"../util/model-view.js\";\nimport { routeMap } from \"../util/route-map.js\";\nimport { RouteTo } from '../service/core/routing-service.js';\n\n\nimport { AuthorWebService } from \"../service/web/author-web-service.js\";\n\nimport AdminAuthorShowComponent from '../components/admin/author/show.f7.html'\nimport AdminAuthorEditComponent from '../components/admin/author/edit.f7.html'\nimport { Author } from \"../dto/author.js\";\nimport { SchemaService } from \"../service/core/schema-service.js\";\n\n@injectable()\nclass AuthorController {\n\n    constructor(\n        private authorWebService:AuthorWebService,\n        private schemaService:SchemaService\n    ) {}\n\n    @routeMap(\"/admin/:channelId/author/show/:id\")\n    async show() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.channelId)\n\n\n            let authorViewModel\n\n            try {\n              authorViewModel = await this.authorWebService.get(routeTo.params.id)\n            } catch(ex) {\n              console.log(ex)\n            } //might be missing\n\n\n            //If it doesn't exist create an empty one\n            if (!authorViewModel) {\n              authorViewModel = Object.assign(new Author(), {\n                author: {\n                  walletAddress: routeTo.params.id\n                }\n              })\n            }\n\n            return {\n                authorViewModel: authorViewModel\n            }\n\n        }, AdminAuthorShowComponent)\n    }\n\n\n    @routeMap(\"/admin/:channelId/author/edit/:id\")\n    async edit() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.channelId)\n\n            let authorViewModel\n\n            try {\n              authorViewModel = await this.authorWebService.get(routeTo.params.id)\n            } catch(ex) {}\n            \n            //If it doesn't exist create an empty one\n            if (!authorViewModel) {\n              authorViewModel = Object.assign(new Author(), {\n                author: {\n                  walletAddress: routeTo.params.id\n                }\n              })\n            }\n\n            return {\n                authorViewModel: authorViewModel\n            }\n\n        }, AdminAuthorEditComponent)\n    }\n\n}\n\nexport {\n    AuthorController\n}","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { SettingsService } from \"../../../service/core/settings-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport { Settings } from \"../../../dto/settings\";\nimport { v4 as uuidv4 } from 'uuid';\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let settingsService = ContainerService.getInstance(SettingsService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let settings;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: 'Settings'\n  }];\n  const formSubmit = async e => {\n    e.preventDefault();\n    let formData = $f7.form.convertToData('#edit-settings-form');\n    let formSettings = {\n      _id: formData._id,\n      _rev: formData._rev,\n      ipfsHost: formData.ipfsHost,\n      defaultGitProvider: formData.gitProvider,\n      gitCorsProxy: formData.gitCorsProxy,\n      gitProviders: {\n        gitlab: {\n          name: \"gitlab\",\n          username: formData.gitLabUsername,\n          personalAccessToken: formData.gitLabPersonalAccessToken\n        },\n        github: {\n          name: \"github\",\n          username: formData.gitHubUsername,\n          personalAccessToken: formData.gitHubPersonalAccessToken\n        }\n      },\n      alchemyKey: formData.alchemyKey,\n      huggingFace: formData.huggingFace,\n      welcomeHide: formData.welcomeHide == \"true\"\n    };\n\n    //Save\n    try {\n      let updatedSettings = Object.assign(new Settings(), formSettings);\n      await settingsService.put(updatedSettings);\n      if (settings?.ipfsHost != updatedSettings?.ipfsHost) {\n        await ipfsService.clearInit();\n      }\n      const toast = $f7.toast.show({\n        text: 'Settings Saved',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n\n      //Redirect\n      $f7.views.main.router.navigate(`/`);\n    } catch (ex) {\n      console.log(ex.errors);\n      $f7.dialog.alert(ex, \"Saving settings failed\");\n    }\n  };\n  const providerChange = async e => {\n    settings.gitProvider = $(e.currentTarget).val();\n    await $update();\n  };\n  $on('pageInit', async e => {\n    settings = await settingsService.get();\n    $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"page\" data-name=\"admin-settings\">\n\n        <${Navbar} breadcrumbs=${breadcrumbs} />\n\n        <div class=\"page-content hide-toolbar-on-scroll\">\n\n            <div class=\"fixed-width-content center\">\n\n                ${settings ? $h`\n                    <form id=\"edit-settings-form\" @submit=\"${formSubmit}\">\n            \n                        <input type=\"hidden\" name=\"_id\" value=\"${settings?._id}\" />\n                        <input type=\"hidden\" name=\"_rev\" value=\"${settings?._rev}\" />\n                        <input type=\"hidden\" name=\"welcomeHide\" value=\"${settings?.welcomeHide}\" />\n    \n\n                        <div class=\"list accordion-list\">\n                            <ul>\n                                <li class=\"accordion-item\">\n                                    <a href=\"\" class=\"item-link item-content\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title\">Configure an AI provider</div>\n                                        </div>\n                                    </a>\n                                    <div class=\"accordion-item-content\">\n                                        <div class=\"block\">\n                                            To enable AI generation features configure your Hugging Face token.\n                                        </div>\n                    \n                                        <div class=\"card\">\n                                            <div class=\"card-content\">\n                    \n                                                <div class=\"block block-strong\">\n                    \n                                                    <strong>Hugging Face</strong> Instructions\n                    \n                                                    <ol>\n                                                        <li>Create a <a href=\"http://huggingface.co\" class=\"external\" target=\"_blank\">Hugging Face</a> account.</li>\n                                                        <li>Create a <a href=\"https://huggingface.co/settings/tokens\" class=\"external\" target=\"_blank\">new token</a> and \n                                                            save it below.</li>\n                            \n                                                    </ol>\n                            \n                                                    <p>Give the token a name and choose \"Read\" in the role dropdown.</p>        \n                      \n                                                </div>\n                    \n                    \n                                                <div class=\"list\">\n                                                    <ul>\n                                                        <li class=\"item-content item-input\">\n                    \n                                                            <div class=\"item-inner\">\n                                                                <div class=\"item-title item-label\">Enter your <a href=\"https://huggingface.co/settings/tokens\" class=\"external\" target=\"_blank\">Hugging Face</a> API key</div>\n                                                                <div class=\"item-input-wrap\">\n                                                                    <input type=\"text\" name=\"huggingFace\" value=\"${settings?.huggingFace}\" placeholder=\"API token...\" />\n                                                                    <span class=\"input-clear-button\"></span>\n                                                                </div>\n                                                            </div>\n                    \n                    \n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </div>\n\n\n                                    </div>\n                                </li>\n                                <li class=\"accordion-item\">\n                                    <a href=\"\" class=\"item-link item-content\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title\">Configure Git Provider(s)</div>\n                                        </div>\n                                    </a>\n                                    <div class=\"accordion-item-content\">\n\n                                        <div class=\"card\">\n                                            <div class=\"card-content card-content-padding\">\n                        \n                                                <div class=\"list\">\n                        \n                                                    <ul>\n                                                        <li>\n                                                            <div class=\"item-content item-input\">\n                                                                <div class=\"item-inner\">\n                                                                    <div class=\"item-title item-label\">Default Git Provider</div>\n                                                                    <div class=\"item-input-wrap\">\n                                                                        <select @change=\"${providerChange}\" class=\"value-input\" name=\"gitProvider\">     \n                                                                            \n                                                                            ${!settings?.defaultGitProvider || settings?.defaultGitProvider == \"github\" ? $h`\n                                                                                <option value=\"github\" selected>GitHub</option>\n                                                                            ` : $h`\n                                                                                <option value=\"github\">GitHub</option>\n                                                                            `}\n                        \n                        \n                                                                            ${settings?.defaultGitProvider == \"gitlab\" ? $h`\n                                                                                <option value=\"gitlab\" selected>GitLab</option>\n                                                                            ` : $h`\n                                                                                <option value=\"gitlab\">GitLab</option>\n                                                                            `}\n                        \n                                                                        </select>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </li>\n                                                        \n                                                    </ul>\n                                                </div>\n                        \n                                                <br />\n                        \n                                            </div>\n                                        </div>\n                    \n                                        <div class=\"card\">\n                                            <div class=\"card-content\">\n                                                <div class=\"list accordion-list\">\n                                                    <ul>\n                                                        <li class=\"accordion-item\">\n                                                            <a href=\"\" class=\"item-link item-content\">\n                                                                <div class=\"item-inner\">\n                                                                    <div class=\"item-title\">Configure GitHub</div>\n                                                                </div>\n                                                            </a>\n                                                            <div class=\"accordion-item-content\">\n                    \n                                                                <div class=\"block block-strong block-outline\">\n                    \n                                                                    <strong>GitHub Instructions</strong>\n                        \n                                                                    <ol>\n                                                                        <li>Create a <a href=\"http://github.com\" class=\"external\" target=\"_blank\">GitHub</a> account.</li>\n                                                                        <li>Create a <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic\" class=\"external\" target=\"_blank\">\"Personal access token (classic)\"</a> and \n                                                                            save it below.</li>\n                                                                        <li>If you are logged into GitHub <a href=\"https://github.com/settings/tokens\" class=\"external\" target=\"_blank\">this link</a> will take you directly to the create form. </li>\n                                            \n                                                                    </ol>\n                                            \n                                                                    <p>Give the token a name and select an expiration date.</p>\n                                            \n                                                                    <ul>\n                                                                        <li>Check the \"repo\" permission. </li>\n                                                                    </ul>  \n                                            \n                                            \n                                            \n                                                                    <div class=\"list\">\n                                            \n                                                                        <ul>\n                                                                            <li>\n                                                                                <div class=\"item-content item-input\">\n                                                                                    <div class=\"item-inner\">\n                                                                                        <div class=\"item-title item-label\">Username (NOT email)</div>\n                                                                                        <div class=\"item-input-wrap\">\n                                                                                            <input type=\"text\" name=\"gitHubUsername\" placeholder=\"Username\"\n                                                                                                value=\"${settings.gitProviders?.github?.username}\"  />\n                                                                                        </div>\n                                                                                    </div>\n                                                                                </div>\n                                                                            </li>\n                                                                            <li>\n                                                                                <div class=\"item-content item-input\">\n                                                                                    <div class=\"item-inner\">\n                                                                                        <div class=\"item-title item-label\">Personal Access Token</div>\n                                                                                        <div class=\"item-input-wrap\">\n                                                                                            <input type=\"text\" name=\"gitHubPersonalAccessToken\" placeholder=\"Personal access token\"\n                                                                                                value=\"${settings.gitProviders?.github?.personalAccessToken}\"  />\n                                                                                        </div>\n                                                                                    </div>\n                                                                                </div>\n                                                                            </li>\n                                                                            \n                                                                        </ul>\n                                                                    </div>\n                                                                </div>\n                    \n                                                            </div>\n                                                        </li>\n                                                        <li class=\"accordion-item\">\n                                                            <a href=\"\" class=\"item-link item-content\">\n                                                                <div class=\"item-inner\">\n                                                                    <div class=\"item-title\">Configure GitLab</div>\n                                                                </div>\n                                                            </a>\n                                                            <div class=\"accordion-item-content\">\n                    \n                                                                <div class=\"block block-strong block-outline\">\n                    \n                                                                    <strong>GitLab Instructions</strong>\n                        \n                                                                    <ol>\n                                                                        <li>Create a <a href=\"http://gitlab.com\" class=\"external\" target=\"_blank\">Gitlab</a> account.</li>\n                                                                        <li>Create a <a href=\"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html\" class=\"external\" target=\"_blank\">\"Personal access token\"</a> and \n                                                                            save it below.</li>\n                                                                        <li>If you are logged into Gitlab <a href=\"https://gitlab.com/-/profile/personal_access_tokens\" class=\"external\" target=\"_blank\">this link</a> will\n                                                                            take you directly to the create form. </li>\n                                            \n                                                                    </ol>\n                                            \n                                                \n                                                                    <p>Give the token a name and select an expiration date. Under \"Select scopes\" check the boxes beside:</p>\n                                                                    \n                                                                    <ul>\n                                                                        <li>api</li>\n                                                                        <li>read_api</li>\n                                                                        <li>read_repository</li>\n                                                                        <li>write_repository</li>\n                                                                    </ul>  \n                                            \n                                            \n                                                                    <div class=\"list\">\n                                            \n                                                                        <ul>\n                                                                            <li>\n                                                                                <div class=\"item-content item-input\">\n                                                                                    <div class=\"item-inner\">\n                                                                                        <div class=\"item-title item-label\">Username (NOT email)</div>\n                                                                                        <div class=\"item-input-wrap\">\n                                                                                            <input type=\"text\" name=\"gitLabUsername\" placeholder=\"Username\"\n                                                                                                value=\"${settings.gitProviders?.gitlab?.username}\"  />\n                                                                                        </div>\n                                                                                    </div>\n                                                                                </div>\n                                                                            </li>\n                                                                            <li>\n                                                                                <div class=\"item-content item-input\">\n                                                                                    <div class=\"item-inner\">\n                                                                                        <div class=\"item-title item-label\">Personal Access Token</div>\n                                                                                        <div class=\"item-input-wrap\">\n                                                                                            <input type=\"text\" name=\"gitLabPersonalAccessToken\" placeholder=\"Personal access token\"\n                                                                                                value=\"${settings.gitProviders?.gitlab?.personalAccessToken}\"  />\n                                                                                        </div>\n                                                                                    </div>\n                                                                                </div>\n                                                                            </li>\n                                                                            \n                                                                        </ul>\n                                                                    </div>\n                                                                </div>\n                    \n                                                            </div>\n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </div>\n\n\n\n                                    </div>\n                                </li>\n                                <li class=\"accordion-item\">\n                                    <a href=\"\" class=\"item-link item-content\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title\">Configure IPFS</div>\n                                        </div>\n                                    </a>\n                                    <div class=\"accordion-item-content\">\n\n                                        <div class=\"card\">\n                                            <div class=\"card-header\">Remote IPFS API</div>\n                                            <div class=\"card-content\">\n                                                <div class=\"list\">\n                                                    <ul>\n                                                        <li class=\"item-content item-input item-input-with-info\">\n                    \n                                                            <div class=\"item-inner\">\n                                                                <div class=\"item-title item-label\">URL</div>\n                                                                <div class=\"item-input-wrap\">\n                                                                    <input type=\"text\" name=\"ipfsHost\" value=\"${settings?.ipfsHost}\" placeholder=\"Example: https://localhost:5001/api/v0\" />\n                                                                    <span class=\"input-clear-button\"></span>\n                                                                    <!-- element with additional information -->\n                                                                    <div class=\"item-input-info\">Note: Must be https:// unless you are running Large locally.</div>\n                                                                </div>\n                                                            </div>\n                    \n                    \n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </div>\n\n\n                                    </div>\n                                </li>\n                                <li class=\"accordion-item\">\n                                    <a href=\"\" class=\"item-link item-content\">\n                                        <div class=\"item-inner\">\n                                            <div class=\"item-title\">Configure Ethereum connection.</div>\n                                        </div>\n                                    </a>\n                                    <div class=\"accordion-item-content\">\n\n                                        <div class=\"block\">\n                                            Large can create a masked/secret variable on the collection's git provider that allows the sync job to run and collection live transaction data. (alpha)\n                                        </div>\n                    \n                                        <div class=\"card\">\n                                            <div class=\"card-header\">Alchemy (Ethereum Provider)</div>\n                                            <div class=\"card-content\">\n                    \n                                                <div class=\"list\">\n                                                    <ul>\n                                                        <li class=\"item-content item-input\">\n                    \n                                                            <div class=\"item-inner\">\n                                                                <div class=\"item-title item-label\">Enter your <a href=\"https://www.alchemy.com/\" class=\"external\" target=\"_blank\">Alchemy</a> API key</div>\n                                                                <div class=\"item-input-wrap\">\n                                                                    <input type=\"text\" name=\"alchemyKey\" value=\"${settings?.alchemyKey}\" placeholder=\"API key...\" />\n                                                                    <span class=\"input-clear-button\"></span>\n                                                                </div>\n                                                            </div>\n                    \n                    \n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                </li>\n                            </ul>\n                        </div>\n\n\n    \n    \n                        <div class=\"block cancel-save-row\">\n              \n                            <div class=\"large-only\"></div>\n              \n                            <a href=\"/\" class=\"button button-outline color-gray\" tabindex=\"30\">\n                              Cancel\n                            </a>\n        \n                            <button type=\"submit\" class=\"button button-fill\" tabindex=\"31\" id=\"saveButton\">\n                              Save\n                            </button>\n              \n                        </div>\n        \n        \n                    </form>\n                ` : $h` `}\n\n            </div>\n\n        </div>\n\n    </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = 'bbc3ae0b5f';\nframework7Component.style = `\n\n\n`;\nexport default framework7Component;","import { injectable } from \"inversify\";\nimport { ModelView } from \"../util/model-view.js\";\nimport { routeMap } from \"../util/route-map.js\";\nimport { RouteTo } from '../service/core/routing-service.js';\n\n\nimport AdminSettingsComponent from '../components/admin/settings/index.f7.html'\n\nimport { SettingsService } from \"../service/core/settings-service.js\";\nimport { Settings } from \"../dto/settings.js\";\n\n\n@injectable()\nclass SettingsController {\n\n  constructor(\n    private settingsService: SettingsService\n  ) { }\n\n  @routeMap(\"/admin/settings\")\n  async show(): Promise<ModelView> {\n\n    return new ModelView(async (routeTo: RouteTo) => {\n    }, AdminSettingsComponent)\n  }\n\n\n}\n\nexport {\n  SettingsController\n}","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { UiService } from \"../../../service/core/ui-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let uiService = ContainerService.getInstance(UiService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let peers = props.peers;\n  let peerCount = props.peerCount;\n  let addresses = props.addresses;\n  let subscribed;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: 'IPFS'\n  }];\n  const addPeerClick = async e => {\n    console.log('Add peer submit');\n\n    //@ts-ignore\n    document.getElementById('peerAddressInput').setCustomValidity(\"\");\n    let peerValue = document.getElementById('peerAddressInput').value;\n    if (peerValue) {\n      try {\n        await ipfsService.ipfs.swarm.connect(peerValue);\n        uiService.showPopup(`Successfully connected to peer ${peerValue}`);\n        console.log('Connected to peer');\n      } catch (ex) {\n        uiService.showExceptionPopup(ex);\n      }\n    }\n  };\n  $(document).on('update-peers', async e => {\n    peers = e.detail.peers;\n    peerCount = e.detail.count;\n    addresses = e.detail.addresses;\n    $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"page\" data-name=\"connect\">\n\n        <${Navbar} breadcrumbs=${breadcrumbs}  />\n\n\n        <div class=\"page-content hide-toolbar-on-scroll\">\n\n            <div class=\"row\">\n                <div class=\"col-100 tablet-50 center\">\n\n                    <div class=\"block-title\">IPFS Addresses\n                    </div>\n                    <div class=\"block list media-list peer-list\">\n                        <ul>\n                            ${addresses?.map( (address) => $h`\n                            <li>\n                                <div class=\"item-content\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-subtitle no-wrap\">\n                                            ${address}\n                                        </div>\n                                    </div>\n                                </div>\n                            </li>\n                            `)}\n                        </ul>\n                    </div>\n\n                    <div class=\"block-title\">IPFS Peers <span class=\"badge peers-badge color-blue\">${peerCount}</span>\n                    </div>\n                    <div class=\"block list media-list peer-list\">\n                        <ul>\n                            ${peers?.map( (peer) => $h`\n                            <li>\n                                <div class=\"item-content\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-subtitle no-wrap\">\n                                            ${peer}\n                                        </div>\n                                    </div>\n                                </div>\n                            </li>\n                            `)}\n                        </ul>\n                    </div>\n\n\n                    <div class=\"block-title\">Add IPFS Peer</div>\n                    <div class=\"block list\">\n                        <ul>\n                            <li>\n                                <div class=\"item-content item-input\">\n                                    <div class=\"item-inner\">\n                                        <div class=\"item-title item-label\">Peer Address</div>\n                                        <div class=\"item-input-wrap\">\n                                            <input id=\"peerAddressInput\" type=\"text\" name=\"peerAddress\" placeholder=\"Enter peer address\" required validate />\n                                        </div>\n                                        <div class=\"item-after\">\n                                            <button class=\"button button-fill text-color-black\" value=\"Add Peer\" @click=${addPeerClick}>Add Peer</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </li>\n                        </ul>\n                    </div>\n\n                </div>\n            </div>\n\n        </div>\n\n    </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '812afac3c9';\nexport default framework7Component;","import { injectable } from \"inversify\";\nimport { ModelView } from \"../util/model-view.js\";\nimport { routeMap } from \"../util/route-map.js\";\nimport { RouteTo } from '../service/core/routing-service.js';\n\n\nimport AdminConnectComponent from '../components/admin/connect/index.f7.html'\n\nimport { Author } from \"../dto/author.js\";\nimport { IpfsService } from \"../service/core/ipfs-service.js\";\n\n@injectable()\nclass ConnectController {\n\n    constructor(\n      private ipfsService:IpfsService\n    ) {}\n\n    @routeMap(\"/admin/connect\")\n    async show() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n\n          if (!this.ipfsService.ipfs) return {}\n\n          let peers = await this.ipfsService.ipfs.swarm.peers()\n            \n          let id = await this.ipfsService.ipfs.id()\n\n          return {\n            peers: peers.map(e => e.addr.toString()),\n            peerCount: peers.length,\n            addresses: id?.addresses?.map( a => a.toString())\n          }\n\n\n        }, AdminConnectComponent)\n    }\n\n}\n\nexport {\n  ConnectController\n}","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $h,\n  $on,\n  $f7,\n  $update\n}) {\n  let walletService;\n  let channelViewModel = props.channelViewModel;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title,\n    path: `/admin/channel/show/${channelViewModel.channel._id}`\n  }, {\n    text: 'Publish'\n  }];\n  $on('pageInit', async (e, page) => {\n    walletService = ContainerService.getWalletService();\n    await $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"page\" data-name=\"publish\">\n  \n      <${Navbar} breadcrumbs=${breadcrumbs}  />\n  \n      <div class=\"page-content hide-toolbar-on-scroll\">\n\n        <div class=\"fixed-width-content center\">\n\n          ${channelViewModel.itemCount > 0 ? $h`\n          \n            <div class=\"block-title block-title-medium\">IPFS</div>\n  \n            <div class=\"block list media-list\">\n              <ul>\n                <li>\n                  <a href=\"/admin/publish/ipfs/${channelViewModel.channel._id}\" class=\"item-link\">\n                    <div class=\"item-content\">\n                      <div class=\"item-media\">\n                        <span class=\"material-icons\">import_export</span>\n                      </div>\n                      <div class=\"item-inner\">\n                        <div class=\"item-title-row\">\n                          <div class=\"item-title\">Create IPFS bundle</div>\n                        </div>\n                        <div class=\"item-text\">\n                          Generate an IPFS archive (.car) for download. This archive can be imported into an IPFS node and represents all of the content in the collection. \n                          Later it can be uploaded to your git provider for display in Large Reader.\n                        </div>\n                      </div>\n                    </div>\n                  </a>\n                </li>\n  \n              </ul>\n            </div>\n\n            \n            <div class=\"block-title block-title-medium\">Git Repo</div>\n            <div class=\"block list media-list\">\n              <ul>\n                <li>\n                  <a href=\"/admin/publish/fork-reader/${channelViewModel.channel._id}\" class=\"item-link\">\n                    <div class=\"item-content\">\n                      <div class=\"item-media\">\n                        <span class=\"material-icons\">fork_left</span>\n                      </div>\n                      <div class=\"item-inner\">\n                        <div class=\"item-title-row\">\n                          <div class=\"item-title\">Create/Connect Git Repo</div>\n                        </div>\n                        <div class=\"item-subtitle\">Create or connect to a remote git repository.</div>\n  \n                        <div class=\"item-text\">\n                          \n                            ${channelViewModel?.gitProvider ? $h`\n                              <strong>Provider:</strong>  ${channelViewModel?.gitProvider.name} <br />\n                            ` : $h` `}\n  \n                            ${channelViewModel.channel.httpUrlToRepo ? $h`\n                              <strong>Repository:</strong>  ${channelViewModel.channel.httpUrlToRepo}\n                            ` : $h` `}\n  \n                        </div>\n                      </div>\n                    </div>\n                  </a>\n                </li>\n\n                <li>\n                  <a href=\"/admin/publish/export/${channelViewModel.channel._id}\" class=\"item-link\">\n                    <div class=\"item-content\">\n                      <div class=\"item-media\">\n                        <span class=\"material-icons\">import_export</span>\n                      </div>\n                      <div class=\"item-inner\">\n                        <div class=\"item-title-row\">\n                          <div class=\"item-title\">Push to Git Repo</div>\n                        </div>\n                        <div class=\"item-text\">\n                          Export collection data to the configured git repo. The git provider will deploy an updated Large Reader.\n                        </div>\n                      </div>\n                    </div>\n                  </a>\n                </li>\n\n              </ul>\n            </div>\n  \n\n  \n  \n            <div class=\"block-title block-title-medium\">Contract (optional)</div>\n  \n            ${walletService?.address ? $h`\n              \n              <div class=\"block list media-list\">\n                <ul>\n                  <li>\n                    <a href=\"/admin/publish/contract/${channelViewModel.channel._id}\" class=\"item-link\">\n                      <div class=\"item-content\">\n                        <div class=\"item-media\">\n                          <span class=\"material-icons\">gavel</span>\n                        </div>\n  \n                        <div class=\"item-inner\">\n                          <div class=\"item-title-row\">\n                            <div class=\"item-title\">Deploy Contract</div>\n                          </div>\n                          <div class=\"item-text\">\n                            Deploy contract to connected network. This will deploy a new contract or update the existing one to point to the latest IPFS bundle. \n                          </div>\n                        </div>\n  \n                      </div>\n                    </a>\n                  </li>\n                </ul>\n              </div>\n  \n            ` : $h`\n              <div class=\"block-header\">\n                Note: Use a web browser with wallet support to deploy an ERC-721 smart contract.\n              </div>\n            `}\n\n  \n  \n          ` : $h`\n            <div class=\"card\">\n              <div class=\"card-content card-content-padding\">\n                <p>Add NFTs to the collection before publishing.</p>\n              </div>\n            </div>\n            \n          `}\n\n\n        </div>\n\n\n        \n\n\n      </div>\n  \n    </div>\n  \n  `\n    }\n    ;\n}\nframework7Component.id = '0dac60a5bd';\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport dayjs from \"dayjs\";\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { PublishService } from \"../../../service/core/publish-service\";\nimport { GitlabService } from \"../../../service/core/gitlab-service\";\nimport { GitService } from \"../../../service/core/git-service\";\nimport { QueueService } from \"../../../service/core/queue-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $h,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelService = ContainerService.getInstance(ChannelService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let queueService = ContainerService.getInstance(QueueService);\n  let gitlabService = ContainerService.getInstance(GitlabService);\n  let gitService = ContainerService.getInstance(GitService);\n  let channelViewModel = props.channelViewModel;\n  let settings = props.settings;\n  let publishing = false;\n  // let checkingStatus = false\n  let publishStatus;\n  let publishOutput = \"\";\n  let ipfsCar;\n  let contractCar;\n  let pageUnloaded = false;\n  let showRefresh = channelViewModel?.channel.publishReaderIPFSStatus?.status == \"pending\";\n  let hasItems = channelViewModel.itemCount > 0;\n  let gitConfigured = channelViewModel?.gitProvider?.personalAccessToken?.length > 0;\n  let gitRepo = channelViewModel?.channel?.httpUrlToRepo?.length > 0;\n  let showForm = hasItems && gitConfigured && gitRepo;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title,\n    path: `/admin/channel/show/${channelViewModel.channel._id}`\n  }, {\n    text: 'Publish',\n    path: `/admin/publish/${channelViewModel.channel._id}`\n  }, {\n    text: 'Push to Git Repo'\n  }];\n  let gitProvider;\n  $on('pageInit', async () => {\n    pageUnloaded = false;\n    await $update();\n  });\n  $on('pageAfterOut', (e, page) => {\n    console.log(\"Unloading page\");\n    pageUnloaded = true;\n  });\n  const formSubmit = async e => {\n    e.preventDefault();\n    let formData = $f7.form.convertToData('#export-form');\n    publishing = true;\n    await $update();\n    let elem = document.getElementsByClassName('publish-label')[0];\n    $f7.preloader.showIn(elem);\n\n    //Now publish\n    try {\n      let headSha = await gitService.deployReader(channelViewModel.channel);\n      $f7.dialog.alert(\"Files exported to git provider.\", \"Success\");\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex.message, \"There was an error\");\n    }\n    $f7.preloader.hideIn(elem);\n    publishing = false;\n    showRefresh = true;\n    await $update();\n  };\n  $(document).on('publish-progress', async e => {\n    if (e.detail.message) {\n      publishOutput = `<p>${e.detail.message}</p>`;\n    }\n    publishStatus = e.detail.publishStatus;\n    $update();\n    let outputElement = document.getElementById('ipfs-publish-process');\n    if (outputElement) {\n      $(outputElement).scrollTop(outputElement.scrollHeight);\n    }\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"page\" data-name=\"publish\">\n\n        <${Navbar} breadcrumbs=${breadcrumbs}  />\n\n        <div class=\"page-content hide-toolbar-on-scroll\">\n\n            <div class=\"fixed-width-content center\">\n                ${showForm ? $h`\n\n                    <form @submit=\"${formSubmit}\" id=\"export-form\">\n    \n    \n                        <div class=\"card card-header-divider\">\n                            <div class=\"card-header\">Push to Git Repo</div>\n                            <div class=\"card-content card-content-padding\">\n    \n                                <p>\n                                    Export collection data to the configured git repo. The git provider will deploy an updated Large Reader.\n                                </p>\n\n                                <p>\n                                    <strong>Provider:</strong>  ${channelViewModel?.gitProvider.name} <br />\n                                    <strong>Repository:</strong>   <a href=\"${channelViewModel.channel.httpUrlToRepo}\" class=\"link external\" target=\"_blank\">${channelViewModel.channel.httpUrlToRepo}</a><br />\n                                    <strong>Branch:</strong>   ${channelViewModel.channel.publishReaderRepoBranch}\n                                </p>\n\n                                <p>\n                                    ${channelViewModel.channel.publishReaderIPFSStatus?.cid? $h`\n                                        <button type=\"submit\" class=\"button button-fill button-small deploy-button\">Push to Git Repo</button>\n                                    ` : $h`\n                                        No files available for export. Generate IPFS bundle first.\n                                    `}\n                                </p>\n                            </div>\n                        </div>\n                        \n  \n    \n                    </form>\n    \n                ` : $h`\n    \n                    ${!hasItems ? $h`\n                \n                        <div class=\"card\">\n                        <div class=\"card-content card-content-padding\">\n                            <p>Add NFTs to the collection before publishing.</p>\n                        </div>\n                        </div>\n        \n                    ` : $h` `}\n        \n                    ${!gitConfigured ? $h`\n                        \n                        <div class=\"card\">\n                        <div class=\"card-content card-content-padding\">\n                            <p>Configure a <a href=\"/admin/settings\">git provider</a> to deploy the reader.</p>\n                        </div>\n                        </div>\n        \n                    ` : $h` \n                    \n                        ${!gitRepo ? $h`\n                            \n                            <div class=\"card\">\n                            <div class=\"card-content card-content-padding\">\n                                <p>Create/connect a <a href=\"/admin/publish/fork-reader/${channelViewModel.channel._id}\">git repo</a> to begin export.</p>\n                            </div>\n                            </div>\n            \n                        ` : $h` `}\n                    \n                    `}\n        \n    \n    \n                `}\n\n            </div>\n\n            \n\n        </div>\n\n    </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '500aa3c509';\nframework7Component.style = `\n    .deploy-button {\n        margin-top: 10px;\n        width: 200px;\n    }\n\n    .publish-label,\n    .ipfs-label,\n    .forking-label {\n        margin-top: 10px;\n        margin-bottom: 10px;\n        font-weight: bold;\n        font-size: 18px;\n    }\n\n    .publish-output {\n        border: 1px solid #cccccc;\n        font-size: 13px;\n        width: 100%;\n        max-width: 100%;\n        padding: 5px;\n        height: 100px;\n        overflow-y: scroll;\n    }\n\n    .publish-status {\n        font-size: 14px;\n        padding: 10px;\n        border: 1px solid #f1f1f1;\n    }\n\n    .publish-status .item label {\n        font-weight: bold;\n        display: inline-block;\n        width: 180px;\n    }\n\n    /* #export-refresh-button {\n        width: 45px;\n        height: 30px;\n        display: inline-block;\n        margin-left: 5px;\n        padding-top: 2.5px;\n    } */\n\n    #export-next-button {\n        width: 200px;\n        float: right;\n    }\n\n`;\nexport default framework7Component;","import { inject, injectable } from \"inversify\"\n\nimport Hash from 'ipfs-only-hash'\nimport { CID, CarWriter } from '@ipld/car/writer'\n\nimport { Channel } from \"../../dto/channel.js\"\n\n\nimport { BackupBundle, ExportBundle } from \"../../dto/export-bundle.js\"\nimport { Image } from \"../../dto/image.js\"\n\nimport { PublishStatus } from \"../../dto/viewmodel/publish-status.js\"\nimport { ChannelService } from \"../channel-service.js\"\nimport { ImageService } from \"../image-service.js\"\nimport { ItemService } from \"../item-service.js\"\n\nimport { IpfsService } from \"./ipfs-service.js\"\n\nimport { ExportService } from \"./export-service.js\"\nimport { ContractMetadata } from \"../../dto/contract-metadata.js\"\n\nimport { AnimationService } from \"../animation-service.js\"\nimport { Item } from \"../../dto/item.js\"\nimport { Car } from \"../../dto/car.js\"\nimport { CarService } from \"../car-service.js\"\n\n\n@injectable()\nclass PublishIPFSService {\n\n    constructor(\n        private channelService: ChannelService,\n        private itemService: ItemService,\n        private ipfsService: IpfsService,\n        private imageService: ImageService,\n        private animationService:AnimationService,\n        private exportService:ExportService,\n        private carService:CarService\n    ) { }\n\n    async exportToIPFS(exportBundle:ExportBundle, backup:BackupBundle, feeRecipient:string): Promise<CID> {\n\n        let ipfsDirectory = this.getIPFSDirectory(exportBundle.channel)\n\n        try {\n            let stat = await this.ipfsService.heliaStat(ipfsDirectory)\n            await this.ipfsService.heliaRm(ipfsDirectory)\n        } catch(ex) {}\n\n\n        await this.ipfsService.heliaMkDir(`${ipfsDirectory}`, { force: true })\n\n\n\n        let publishStatus:PublishStatus = {\n\n            contractMetadata: { saved: 0, total: 1 },\n            \n            nftMetadata: { saved: 0, total: exportBundle.items.length },\n            images: { saved: 0, total: exportBundle.imageCids.length  },\n            animations: { saved: 0, total: exportBundle.animationCids.length},\n        \n            backups: {\n                channels: { saved: 0, total: 1 },\n                authors: { saved: 0, total: 1 }, \n                items: { saved: 0, total: backup.itemCount },\n                images: { saved: 0, total: exportBundle.imageCids.length },\n                animations: { saved: 0, total: exportBundle.animationCids.length },\n                themes: { saved: 0, total: backup.themeCount },\n                staticPages: { saved: 0, total: backup.staticPageCount }\n            }\n        }\n\n\n        //Save images\n        await this._publishImages(publishStatus, ipfsDirectory, exportBundle.imageCids)\n\n        //Save animations\n        await this._publishAnimations(publishStatus, ipfsDirectory, exportBundle.animationCids)\n\n        //Save metadata\n        await this._publishNFTMetadata(publishStatus, ipfsDirectory, exportBundle.channel, exportBundle.items)\n\n        //Save contract metadata\n        let contractMetadataPath = `${ipfsDirectory}/contractMetadata.json`\n        let contractMetadata:ContractMetadata = await this.channelService.exportContractMetadata(exportBundle.channel, feeRecipient)\n\n        //IPFS\n        let addContractResult = await this.ipfsService.heliaAdd(  new TextEncoder().encode(JSON.stringify(contractMetadata)), contractMetadataPath  )\n        \n        publishStatus.contractMetadata.saved = 1\n        this.logPublishProgress(publishStatus, `Saving contract metadata to ${contractMetadataPath} (${addContractResult.toString()})`)\n\n\n        await this.ipfsService.heliaMkDir(`${ipfsDirectory}/backup`)\n\n\n        //Write channels backup\n        await this.ipfsService.heliaAdd(  new TextEncoder().encode(JSON.stringify(backup.channels)), `${ipfsDirectory}/backup/channels.json`  )\n\n        publishStatus.backups.channels.saved = 1\n        this.logPublishProgress(publishStatus)\n\n\n        //Write authors backup\n        await this.ipfsService.heliaAdd(  new TextEncoder().encode(JSON.stringify(backup.authors)), `${ipfsDirectory}/backup/authors.json`  )\n\n        publishStatus.backups.authors.saved = 1\n        this.logPublishProgress(publishStatus)\n\n\n        //Write items backup\n        await this.ipfsService.heliaAdd(  new TextEncoder().encode(JSON.stringify(backup.items)), `${ipfsDirectory}/backup/items.json` )\n\n        publishStatus.backups.items.saved = backup.itemCount\n        this.logPublishProgress(publishStatus)\n\n\n        //Write original metadata backup       \n        await this.ipfsService.heliaAdd(  new TextEncoder().encode(JSON.stringify(backup.originalMetadata)), `${ipfsDirectory}/backup/originalMetadata.json` )\n\n        //Write images backup\n        await this.ipfsService.heliaAdd(  new TextEncoder().encode(JSON.stringify(backup.images)) , `${ipfsDirectory}/backup/images.json` )\n\n        publishStatus.backups.images.saved = backup.imageCount\n        this.logPublishProgress(publishStatus)\n\n\n        //Write animations backup\n        await this.ipfsService.heliaAdd(  new TextEncoder().encode(JSON.stringify(backup.animations)) , `${ipfsDirectory}/backup/animations.json` )\n\n        publishStatus.backups.animations.saved = backup.animationCount\n        this.logPublishProgress(publishStatus)\n\n\n        //Write themes backup        \n        await this.ipfsService.heliaAdd(  new TextEncoder().encode(JSON.stringify(backup.themes)) , `${ipfsDirectory}/backup/themes.json` )\n\n        publishStatus.backups.themes.saved = backup.themeCount\n        this.logPublishProgress(publishStatus)\n\n\n        //Write staticPages backup        \n        await this.ipfsService.heliaAdd(  new TextEncoder().encode(JSON.stringify(backup.staticPages)) , `${ipfsDirectory}/backup/static-pages.json` )\n\n        publishStatus.backups.staticPages.saved = backup.staticPageCount\n        this.logPublishProgress(publishStatus)\n\n\n        let stat = await this.ipfsService.heliaStat(ipfsDirectory)\n\n\n        this.logPublishProgress(publishStatus, `Published to local IPFS at ${stat.cid.toString()}`)\n\n\n        return stat.cid\n\n    }\n\n    async exportContractToIPFS(channel:Channel, contract:Buffer, contractABI:Buffer, largeConfig): Promise<CID> {\n\n        let ipfsDirectory = `/contract/${this.getIPFSDirectory(channel)}`\n\n        try {\n            let stat = await this.ipfsService.heliaStat(ipfsDirectory)\n            await this.ipfsService.heliaRm(ipfsDirectory)\n        } catch(ex) {}\n\n\n        await this.ipfsService.heliaMkDir(`${ipfsDirectory}`, { force: true })\n\n        //Contract\n\n        //Contract ABI\n        //Large config\n\n        //IPFS\n        await this.ipfsService.heliaAdd(  contract, `${ipfsDirectory}/contract.json`  )\n        await this.ipfsService.heliaAdd(  contractABI, `${ipfsDirectory}/contract-abi.json`  )\n        await this.ipfsService.heliaAdd(  largeConfig , `${ipfsDirectory}/large-config.json`  )\n\n        let stat = await this.ipfsService.heliaStat(ipfsDirectory)\n\n        let publishStatus:PublishStatus = {\n            contractMetadata: undefined,\n            nftMetadata: undefined,\n            images: undefined,\n            animations: undefined,\n            backups: {\n                channels: undefined,\n                authors: undefined,\n                items: undefined,\n                images: undefined,\n                animations: undefined,\n                themes: undefined,\n                staticPages: undefined\n            }\n        }\n\n        this.logPublishProgress(publishStatus, `Published to local IPFS at ${stat.cid.toString()}`)\n\n\n        return stat.cid\n\n    }\n\n\n    getIPFSDirectory(channel:Channel) {\n        return `/export/${channel._id}`\n    }\n\n    private async _publishAnimations(publishStatus:PublishStatus, ipfsDirectory:string, animationCids:string[]) {\n\n        this.logPublishProgress(publishStatus, `Exporting ${animationCids.length} animations`)\n\n        await this.ipfsService.heliaMkDir(`${ipfsDirectory}/animations`)\n\n\n        for (let animationCid of animationCids) {\n\n            let animation = await this.animationService.get(animationCid)\n\n            let ipfsFilename = `${ipfsDirectory}/animations/${animation.cid}.html`\n\n\n            const result = await this.ipfsService.heliaAdd(new TextEncoder().encode(animation.content), ipfsFilename)\n\n            if (result.toString() !== animation.cid.toString()) {\n                throw new Error(`Incorrect cid when saving animation. Expected: ${animation.cid}, Result: ${result.toString()}`)\n            }\n\n            this.logPublishProgress(publishStatus, `Saving animation #${publishStatus.animations.saved} to /animations/${animation.cid}.html (${animation.cid})`)\n\n            publishStatus.animations.saved++\n\n        }\n\n    }\n\n    private async _publishImages(publishStatus:PublishStatus, ipfsDirectory:string, imageCids:string[]){\n\n        await this.ipfsService.heliaMkDir(`${ipfsDirectory}/images`)\n\n        for (let imageCid of imageCids) {\n            \n            let image = await this.imageService.get(imageCid)\n\n            let ipfsFilename = `${ipfsDirectory}/images/${image.cid}.${image.buffer ? 'jpg' : 'svg'}` \n\n            //Add to IPFS\n            const result = await this.ipfsService.heliaAdd(await this.imageService.getImageContent(image), ipfsFilename)\n\n            //Validate cid\n            if (result.toString() != image.cid) {    \n                throw new Error(`Incorrect cid when saving image. Expected: ${image.cid}, Result: ${result.toString()}`)\n            }\n\n            this.logPublishProgress(publishStatus, `Saving image to ${ipfsFilename} (${result.toString()})`)\n\n            publishStatus.images.saved++\n\n        }\n\n    }\n\n    private async _publishNFTMetadata(publishStatus:PublishStatus, ipfsDirectory:string, channel:Channel, items:Item[])  {\n\n        this.logPublishProgress(publishStatus, `Exporting ${items.length} metadata files`)\n\n        await this.ipfsService.heliaMkDir(`${ipfsDirectory}/metadata`)\n\n        let metadataNFTMap = {}\n\n        for (let theItem of items) {\n\n            let item = this.exportService.prepareItem(theItem)\n\n            let ipfsFilename = `${ipfsDirectory}/metadata/${item.tokenId}.json`\n\n\n            let coverImage:Image = await this.imageService.get(item.coverImageId)\n            let nftMetadata = await this.itemService.exportNFTMetadata(channel, item, coverImage)\n            \n            let content = new TextEncoder().encode(JSON.stringify(nftMetadata))\n            let contentCid = await Hash.of(content)\n\n            metadataNFTMap[contentCid] = nftMetadata\n\n            const result = await this.ipfsService.heliaAdd(content, ipfsFilename)\n\n            publishStatus.nftMetadata.saved++\n\n            this.logPublishProgress(publishStatus, `Saving #${item.tokenId} to ${ipfsFilename}`)\n\n        }\n\n    }\n\n\n    async createCarFromCID(_id:string, cid:CID) {\n\n        const { writer, out } = await this.ipfsService.createCAR(cid)\n        \n        const carBlobPromise = this.ipfsService.carWriterOutToBlob(out)\n\n        // await the heliaCar.export, where heliaCar will write blocks to the writer\n        await this.ipfsService.exportCAR(cid, writer)\n\n        let car:Car\n\n        try {\n            car = await this.carService.get(_id)\n        } catch(ex) {}\n\n        if (!car) {\n            car = new Car()\n            car._id = _id\n        }\n\n        car.cid = cid.toString()\n        car.content = new Uint8Array(await (await carBlobPromise).arrayBuffer())\n\n        await this.carService.put(car)\n\n        return car\n    }\n\n    private logPublishProgress(publishStatus:PublishStatus, message?: string) {\n\n        if (message) {\n            console.log(message)\n        }\n        \n\n        if (typeof window !== \"undefined\" && typeof window.document !== \"undefined\") {\n            // browser\n            const imageSelectedEvent = new CustomEvent('publish-progress', {\n                detail: { \n                    publishStatus: publishStatus,\n                    message: message \n                }\n            })\n\n            document.dispatchEvent(imageSelectedEvent)\n\n        }\n\n    }\n\n}\n\ninterface CidInfo {\n    cid: CID\n}\n\nexport {\n    PublishIPFSService, CidInfo\n}","import { inject, injectable } from \"inversify\"\n\nimport { Channel } from \"../../dto/channel.js\"\n\nimport { BackupBundle, ExportBundle } from \"../../dto/export-bundle.js\"\n\nimport { PublishStatus } from \"../../dto/viewmodel/publish-status.js\"\nimport { ChannelService } from \"../channel-service.js\"\n\nimport TYPES from \"./types.js\"\nimport { WalletService } from \"./wallet-service.js\"\n\nimport { ExportService } from \"./export-service.js\"\nimport contractABI from '../../../../contracts.json' assert { type: \"json\" }\nimport { SettingsService } from \"./settings-service.js\"\nimport { PublishIPFSService } from \"./publish-ipfs-service.js\"\n\nimport { CID, CarWriter } from '@ipld/car/writer'\nimport { Car } from \"../../dto/car.js\"\n\n\n@injectable()\nclass PublishService {\n\n    constructor(\n        private channelService: ChannelService,\n        private exportService:ExportService,\n        private settingsService:SettingsService,\n        private publishIPFSService:PublishIPFSService,\n        @inject(TYPES.WalletService) private walletService: WalletService\n    ) { }\n\n    async publish(channel: Channel, baseDir:string) : Promise<{cid:CID, car:Car}> {\n\n        //First clear out the existing IPFS info\n        delete channel.publishReaderIPFSStatus\n        await this.channelService.put(channel)\n\n\n        //Export metadata\n        this.logPublishProgress(undefined, \"Preparing export...\")\n        let exportBundle:ExportBundle = await this.exportService.prepareExport(channel, this.walletService.address)\n\n\n        let feeRecipient = await this.getFeeReceipient(exportBundle.channel, exportBundle.ownerAddress)\n\n        if (feeRecipient) {\n            this.logPublishProgress(undefined, `Fee Recipient: ${feeRecipient}`)\n        }\n\n        this.logPublishProgress(undefined, \"Preparing backup...\")\n\n        let backup:BackupBundle = await this.exportService.createBackup(exportBundle)\n\n\n        this.logPublishProgress(undefined, \"Exporting to IPFS...\")\n\n        let cid = await this.publishIPFSService.exportToIPFS(exportBundle, backup, feeRecipient)\n            \n        let car = await this.publishIPFSService.createCarFromCID(\"export\", cid)\n\n        return {\n            cid: cid,\n            car: car\n        } \n\n\n    }\n\n    async publishContract(channel:Channel) : Promise<Car> {\n\n        let contract:Buffer\n        let contractABIBuffer:Buffer\n        let largeConfig:Buffer\n\n        if (channel.contractAddress) {\n                    \n            contract = Buffer.from(JSON.stringify({ \n                contractAddress: channel.contractAddress,\n                ipfsCid: channel.publishReaderIPFSStatus?.cid\n            }))\n\n            //Also the ABI\n            contractABIBuffer = Buffer.from(JSON.stringify(contractABI))\n\n        } else {\n            contract =  Buffer.from(JSON.stringify({}))\n            contractABIBuffer = Buffer.from(JSON.stringify({}))\n        }\n\n        let productionURIInfo = await this.getProductionURIInfo(channel)\n\n\n        //Copy a large-config.json to GitHub\n        largeConfig = Buffer.from(JSON.stringify({\n            \"showMintPage\": channel.showMintPage,\n            \"showActivityPage\": channel.showActivityPage,\n            \"hostname\": channel.productionHostname ? channel.productionHostname : productionURIInfo?.hostname,\n            \"libraryURL\": channel.productionBaseLibraryURI,\n            \"baseURL\": channel.productionBaseURI ? channel.productionBaseURI : productionURIInfo?.baseURI,\n            \"externalLinks\": channel.externalLinks,\n            \"marketplaces\": channel.marketplaces\n        }))\n\n\n        let cid = await this.publishIPFSService.exportContractToIPFS(channel, contract, contractABIBuffer, largeConfig )\n\n\n        return this.publishIPFSService.createCarFromCID(\"contract\", cid)\n\n    }\n  \n    public async getFeeReceipient(channel:Channel, ownerAddress:string) {\n\n        let feeRecipient\n\n        if (channel.forkType == \"existing\") {  \n            if (channel.forkedFromFeeRecipient) {\n                feeRecipient = channel.forkedFromFeeRecipient \n            }\n        } else {\n            feeRecipient = ownerAddress\n        }\n\n        return feeRecipient\n    }\n\n    //** TODO: Move to appropriate git services */\n    private async getProductionURIInfo(channel) {\n\n        let settings = await this.settingsService.get()\n\n        let gitProvider\n\n        //If it's \"default\" or blank then look at the global default\n        if (!channel.gitProvider || channel.gitProvider == \"default\") {\n\n            if (settings.defaultGitProvider) {\n                gitProvider = settings.defaultGitProvider\n            } else {\n                gitProvider = \"github\"\n            }\n            \n        } else {\n            gitProvider = channel.gitProvider\n        }\n\n        switch(gitProvider) {\n\n            case \"gitlab\":\n\n                function getGitLabUsername(url) {\n\n                    const path = url.replace(\"https://gitlab.com/\", \"\")\n                \n                    // Split the remaining path into parts\n                    const parts = path.split(\"/\")\n                \n                    // Extract the username and repository name\n                    const username = parts[0]\n                    \n                    return username\n        \n                }\n        \n                if (!channel.httpUrlToRepo) return\n\n                return {\n                    hostname: `https://${getGitLabUsername(channel.httpUrlToRepo)}.gitlab.io`,\n                    baseURI: `/${channel.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}/`\n                }\n\n            case \"github\":\n\n                function getGitHubUsername(url) {\n\n                    const path = url.replace(\"https://github.com/\", \"\");\n                \n                    // Split the remaining path into parts\n                    const parts = path.split(\"/\");\n                \n                    // Extract the username and repository name\n                    const username = parts[0];\n                    \n                    return username\n        \n                }\n        \n        \n                if (!channel.httpUrlToRepo) return\n\n                return {\n                    hostname: `https://${getGitHubUsername(channel.httpUrlToRepo)}.github.io`,\n                    baseURI: `/${channel.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}/`\n                }\n\n        }\n\n    }\n\n    private logPublishProgress(publishStatus:PublishStatus, message?: string) {\n\n        if (message) {\n            console.log(message)\n        }\n        \n\n        if (typeof window !== \"undefined\" && typeof window.document !== \"undefined\") {\n            // browser\n            const imageSelectedEvent = new CustomEvent('publish-progress', {\n                detail: { \n                    publishStatus: publishStatus,\n                    message: message \n                }\n            })\n\n            document.dispatchEvent(imageSelectedEvent)\n\n        }\n\n    }\n\n}\n\n\ninterface FSAction {\n    file_path: string\n    content: any\n    keepExisting?: boolean\n}\n\nexport {\n    PublishService\n}","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport dayjs from \"dayjs\";\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { PublishService } from \"../../../service/core/publish-service\";\nimport { GitlabService } from \"../../../service/core/gitlab-service\";\nimport { GitService } from \"../../../service/core/git-service\";\nimport { QueueService } from \"../../../service/core/queue-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport { CarService } from \"../../../service/car-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $h,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelService = ContainerService.getInstance(ChannelService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let publishService = ContainerService.getInstance(PublishService);\n  let queueService = ContainerService.getInstance(QueueService);\n  let carService = ContainerService.getInstance(CarService);\n  let channelViewModel = props.channelViewModel;\n  let settings = props.settings;\n  let publishing = false;\n  let checkingStatus = false;\n  let publishStatus;\n  let publishOutput = \"\";\n  let carBlobURL;\n  let pageUnloaded = false;\n  let showRefresh = channelViewModel?.channel.publishReaderIPFSStatus?.status == \"pending\";\n  let hasItems = channelViewModel.itemCount > 0;\n  let gitConfigured = channelViewModel?.gitProvider?.personalAccessToken?.length > 0;\n  let gitRepo = channelViewModel?.channel?.httpUrlToRepo?.length > 0;\n  let showForm = hasItems && gitConfigured && gitRepo;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title,\n    path: `/admin/channel/show/${channelViewModel.channel._id}`\n  }, {\n    text: 'Publish',\n    path: `/admin/publish/${channelViewModel.channel._id}`\n  }, {\n    text: 'IPFS'\n  }];\n  let gitProvider;\n  $on('pageInit', async () => {\n    pageUnloaded = false;\n    await ipfsService.initLocal();\n    await $update();\n  });\n  $on('pageAfterOut', async (e, page) => {\n    console.log(\"Unloading page\");\n    pageUnloaded = true;\n  });\n  const formSubmit = async e => {\n    e.preventDefault();\n    let formData = $f7.form.convertToData('#create-car-form');\n    publishing = true;\n    await $update();\n    let elem = document.getElementsByClassName('publish-label')[0];\n    $f7.preloader.showIn(elem);\n\n    //Now publish\n    try {\n      //Now publish\n      let result = await publishService.publish(channelViewModel.channel);\n      await $update();\n\n      //Update IPFS info in channel\n      channelViewModel.channel.publishReaderIPFSStatus = {\n        status: \"complete\",\n        cid: result.cid.toString(),\n        date: new Date().toJSON()\n      };\n      await channelService.put(channelViewModel.channel);\n      await $update();\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex.message, \"There was an error\");\n    }\n    $f7.preloader.hideIn(elem);\n    publishing = false;\n    showRefresh = true;\n    await $update();\n  };\n  $(document).on('publish-progress', async e => {\n    if (e.detail.message) {\n      publishOutput = `<p>${e.detail.message}</p>`;\n    }\n    publishStatus = e.detail.publishStatus;\n    $update();\n    let outputElement = document.getElementById('ipfs-publish-process');\n    if (outputElement) {\n      $(outputElement).scrollTop(outputElement.scrollHeight);\n    }\n  });\n  const downloadCAR = async e => {\n    e.preventDefault();\n    const car = await carService.get(\"export\");\n    carBlobURL = URL.createObjectURL(new Blob([car.content], {\n      type: \"application/car\"\n    }));\n    $('#hidden-download').attr('href', carBlobURL);\n    $('#hidden-download').attr('download', `export.car`);\n    $('#hidden-download').click();\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"page\" data-name=\"publish\">\n\n        <${Navbar} breadcrumbs=${breadcrumbs}  />\n\n        <div class=\"page-content hide-toolbar-on-scroll\">\n\n            <div class=\"fixed-width-content center\">\n                ${showForm ? $h`\n\n                    <form @submit=\"${formSubmit}\" id=\"create-car-form\">\n    \n    \n                        <div class=\"card card-header-divider\">\n                            <div class=\"card-header\">IPFS</div>\n                            <div class=\"card-content card-content-padding\">\n    \n                                <p>\n                                    Generate an IPFS archive (.car) for download. This archive can be imported into an IPFS node and represents all of the content in the collection. \n                          Later it can be uploaded to your git provider for display in Large Reader.\n                                </p>\n    \n                            </div>\n                        </div>\n\n    \n                        <div class=\"card card-header-divider\">\n                            <div class=\"card-header\">Status</div>\n                            <div class=\"card-content card-content-padding\">      \n\n                                ${publishing ? $h`\n                                    <div class=\"publish-label\">\n                                        Bundling...\n                                    </div>\n    \n                                    ${publishStatus? $h`\n    \n                                        <div class=\"row\">\n                                            <div class=\"margin-top\"><strong>NFT Data</strong></div>\n                                            <div class=\"data-table\">\n                                                <table>\n                                                    <thead>\n                                                    <th class=\"label-cell\">Type</th>\n                                                    <th class=\"numeric-cell\">Saved</th>\n                                                    <th class=\"numeric-cell\">Total</th>\n                                                    </thead>\n                                                    <tbody>\n                                                    <tr class=\"${publishStatus.images.saved == publishStatus.images.total && publishStatus.images.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">Images</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.images.saved}</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.images.total}</td>\n                                                    </tr>\n                                                    <tr class=\"${publishStatus.animations.saved == publishStatus.animations.total && publishStatus.animations.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">Animations</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.animations.saved}</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.animations.total}</td>\n                                                    </tr>\n                                                    <tr class=\"${publishStatus.nftMetadata.saved == publishStatus.nftMetadata.total && publishStatus.nftMetadata.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">NFT Metadata</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.nftMetadata.saved}</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.nftMetadata.total}</td>\n                                                    </tr>\n                                                    \n                                                    </tbody>\n                                                </table>\n    \n                                            </div>\n                                        </div>\n    \n                                        <div class=\"col-100\" style=\"margin-top: 40px;\"><strong>Database Backup</strong></div>\n                                        <div class=\"row\">\n                                            <div class=\"data-table\">\n                                                <table>\n                                                    <thead>\n                                                    <th class=\"label-cell\">Type</th>\n                                                    <th class=\"numeric-cell\">Total</th>\n                                                    </thead>\n                                                    <tbody>\n                                                    <tr class=\"${publishStatus.contractMetadata.saved == publishStatus.contractMetadata.total && publishStatus.contractMetadata.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">Contract Metadata</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.contractMetadata.total}</td>\n                                                    </tr>\n                                                    <tr class=\"${publishStatus.backups.items.saved == publishStatus.backups.items.total && publishStatus.backups.items.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">Items</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.backups.items.total}</td>\n                                                    </tr>\n                                                    <tr class=\"${publishStatus.backups.images.saved == publishStatus.backups.images.total && publishStatus.backups.images.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">Image Metadata</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.backups.images.total}</td>\n                                                    </tr>\n                                                    <tr class=\"${publishStatus.backups.animations.saved == publishStatus.backups.animations.total && publishStatus.backups.animations.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">Animations Metadata</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.backups.animations.total}</td>\n                                                    </tr>\n                                                    <tr class=\"${publishStatus.backups.themes.saved == publishStatus.backups.themes.total && publishStatus.backups.themes.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">Themes</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.backups.themes.total}</td>\n                                                    </tr>\n                                                    <tr class=\"${publishStatus.backups.staticPages.saved == publishStatus.backups.staticPages.total && publishStatus.backups.staticPages.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">Static Pages</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.backups.staticPages.total}</td>\n                                                    </tr>\n                                                    <tr class=\"${publishStatus.backups.channels.saved == publishStatus.backups.channels.total && publishStatus.backups.channels.total > 0 ? 'complete' : ''}\">\n                                                        <td class=\"label-cell\">Channels</td>\n                                                        <td class=\"numeric-cell\">${publishStatus.backups.channels.total}</td>\n                                                    </tr>\n    \n                                                    ${publishStatus.backups.authors.total ? $h`\n    \n                                                        <tr class=\"${publishStatus.backups.authors.saved == publishStatus.backups.authors.total && publishStatus.backups.authors.total > 0 ? 'complete' : ''}\">\n                                                            <td class=\"label-cell\">Authors</td>\n                                                            <td class=\"numeric-cell\">${publishStatus.backups.authors.total}</td>\n                                                        </tr>\n                                                    ` : $h`<span/>`}\n    \n    \n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n    \n                                        <div class=\"publish-status\"></div>\n    \n                                    ` : $h`<span />`}\n    \n                                ` : $h`\n                                    <div class=\"publish-label\" style=\"display:none;\"></div>\n                                `}\n    \n                                ${publishOutput ? $h`\n                                    <div class=\"publish-output\" innerHTML=\"${publishOutput}\" id=\"ipfs-publish-process\" ></div>\n                                ` : $h`\n                                    <div class=\"publish-output\" style=\"display:none;\"></div>\n                                `}\n    \n    \n                                ${channelViewModel.channel.publishReaderIPFSStatus?.cid ? $h`\n    \n                                    <div class=\"pin-status\"> \n\n                                            <strong>IPFS CID:</strong> ${channelViewModel.channel.publishReaderIPFSStatus?.cid}<br />\n                                            <strong>Download Archive:</strong> <a href=\"#\" @click=\"${downloadCAR}\" class=\"link\">export.car</a><br />\n                                            <strong>Date:</strong> ${dayjs(channelViewModel.channel.publishReaderIPFSStatus?.date).format('MMMM DD YYYY, h:mm:ss a')}\n\n                                            <a href=\"#\" class=\"link external\" style=\"display:none;\" id=\"hidden-download\"></a>\n\n\n                                    </div>\n    \n                                ` : $h`<span />`}\n    \n    \n                                ${!publishing ? $h`\n    \n                                    \n                                    ${showRefresh ? $h`\n        \n                                        <button type=\"submit\" class=\"button button-fill button-small color-gray text-color-white deploy-button\">\n                                            <i class=\"material-icons\">refresh</i> Generate Again\n                                        </button>\n    \n    \n                                    ` : $h`\n    \n                                        ${!publishing && !ipfsService.initializing ? $h`\n                                            <button type=\"submit\" class=\"button button-fill button-small deploy-button\" >Generate .CAR bundle</button>\n                                        ` : $h`<span />`}  \n    \n                                    `}\n                                    \n                                ` : $h`\n                                    <p></p>\n                                `}\n                            </div>\n                        </div>\n    \n                    </form>\n    \n                ` : $h`\n    \n                    ${!hasItems ? $h`\n                \n                        <div class=\"card\">\n                        <div class=\"card-content card-content-padding\">\n                            <p>Add NFTs to the collection before publishing.</p>\n                        </div>\n                        </div>\n        \n                    ` : $h` `}\n        \n\n    \n                `}\n\n            </div>\n\n            \n\n        </div>\n\n    </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = 'f058820e72';\nframework7Component.style = `\n    .deploy-button {\n        margin-top: 10px;\n        width: 200px;\n    }\n\n    .publish-label,\n    .ipfs-label,\n    .forking-label {\n        margin-top: 10px;\n        margin-bottom: 10px;\n        font-weight: bold;\n        font-size: 18px;\n    }\n\n    .publish-output {\n        border: 1px solid #cccccc;\n        font-size: 13px;\n        width: 100%;\n        max-width: 100%;\n        padding: 5px;\n        height: 100px;\n        overflow-y: scroll;\n    }\n\n    .publish-status {\n        font-size: 14px;\n        padding: 10px;\n        border: 1px solid #f1f1f1;\n    }\n\n    .publish-status .item label {\n        font-weight: bold;\n        display: inline-block;\n        width: 180px;\n    }\n\n    /* #export-refresh-button {\n        width: 45px;\n        height: 30px;\n        display: inline-block;\n        margin-left: 5px;\n        padding-top: 2.5px;\n    } */\n\n    #export-next-button {\n        width: 200px;\n        float: right;\n    }\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport dayjs from \"dayjs\";\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { GitService } from \"../../../service/core/git-service\";\nimport { QueueService } from \"../../../service/core/queue-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $h,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelService = ContainerService.getInstance(ChannelService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let queueService = ContainerService.getInstance(QueueService);\n  let gitService = ContainerService.getInstance(GitService);\n  let channelViewModel = props.channelViewModel;\n  let settings = props.settings;\n  let pageUnloaded = false;\n  let forking = false;\n  let hasItems = channelViewModel.itemCount > 0;\n  let gitConfigured = channelViewModel?.gitProvider?.personalAccessToken?.length > 0;\n  let showForm = hasItems && gitConfigured;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title,\n    path: `/admin/channel/show/${channelViewModel.channel._id}`\n  }, {\n    text: 'Publish',\n    path: `/admin/publish/${channelViewModel.channel._id}`\n  }, {\n    text: 'Create Git Repository'\n  }];\n  $on('pageInit', async () => {\n    pageUnloaded = false;\n    await $update();\n    await checkPublishRepoStatus();\n  });\n  $on('pageAfterOut', (e, page) => {\n    console.log(\"Unloading page\");\n    pageUnloaded = true;\n  });\n  const createForkSubmit = async e => {\n    e.preventDefault();\n    forking = true;\n    await $update();\n    let elem = document.getElementsByClassName('content-card-padding')[0];\n    $f7.preloader.showIn(elem);\n    let response;\n    try {\n      response = await gitService.createFork(channelViewModel.channel);\n      channelViewModel.channel.publishReaderRepoId = response.id;\n      channelViewModel.channel.publishReaderRepoPath = response.path;\n      channelViewModel.channel.publishReaderRepoBranch = response.branch;\n      channelViewModel.channel.publishReaderRepoStatus = \"pending\";\n      await channelService.put(channelViewModel.channel);\n    } catch (ex) {\n      $f7.preloader.hideIn(elem);\n      console.log(ex);\n      if (ex.toString() == \"Error: Request failed with status code 409\") {\n        $f7.dialog.alert(\"Git repo already exists with that name.\", \"There was an error\");\n      } else {\n        $f7.dialog.alert(ex, \"There was an error\");\n      }\n    }\n    forking = false;\n    await $update();\n    await checkPublishRepoStatus();\n  };\n  const checkPublishRepoStatus = async e => {\n    if (pageUnloaded) return;\n    if (!settings) return;\n    if (channelViewModel.channel.publishReaderRepoStatus == \"complete\" && channelViewModel.channel.publishReaderRepoId > 0) return;\n    if (forking) return;\n    let gitProvider = await channelService.getGitProviderCredentials(channelViewModel.channel, settings);\n    if (!gitProvider || !gitProvider.personalAccessToken || gitProvider.personalAccessToken.length < 1) return;\n    console.log('Checking repo fork status...');\n    try {\n      channelViewModel.channel = await channelService.get(channelViewModel.channel._id);\n      let forkRepoStatus = await gitService.getForkRepoStatus(channelViewModel.channel);\n      if (forkRepoStatus == \"finished\") {\n        //TODO\n\n        //Grab the URL\n        let forkResult = await gitService.getExistingFork(channelViewModel.channel);\n        channelViewModel.channel.publishReaderRepoStatus = \"complete\";\n        channelViewModel.channel.httpUrlToRepo = forkResult.httpUrlToRepo;\n        await channelService.put(channelViewModel.channel);\n        let elem = document.getElementsByClassName('content-card-padding')[0];\n        $f7.preloader.hideIn(elem);\n      }\n    } catch (ex) {\n      console.log(ex);\n    }\n    await $update();\n    if (channelViewModel.channel.publishReaderRepoStatus != \"complete\") {\n      setTimeout(checkPublishRepoStatus, 5000);\n    }\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"page\" data-name=\"publish\">\n\n    <${Navbar} breadcrumbs=${breadcrumbs}  />\n\n    <div class=\"page-content hide-toolbar-on-scroll\">\n\n      <div class=\"fixed-width-content center\">\n\n        ${showForm ? $h`\n\n          <div class=\"block-title\">Create/Connect Git Repository</div>\n          <div class=\"card\">\n  \n            <div class=\"card-content card-content-padding\">\n              <form id=\"fork-reader\" @submit=\"${createForkSubmit}\">\n  \n                ${forking ? $h`\n                  <div class=\"forking-label\">\n                    Forking...\n                  </div>\n  \n                  <div class=\"preloader\"></div>\n  \n                ` : $h`\n  \n  \n                  <div class=\"forking-label\" style=\"display:none;\"></div>\n  \n  \n                  ${channelViewModel.channel.publishReaderRepoId ? $h`\n                    <div class=\"repo-status\">\n  \n                      <p><strong>Current Repo:</strong> ${channelViewModel.channel.httpUrlToRepo ? $h`\n                        <a href=\"${channelViewModel.channel.httpUrlToRepo}\" class=\"link external\" target=\"_blank\">${channelViewModel.channel.httpUrlToRepo}</a>\n                        ` : $h` `}</p>\n  \n                      <p><strong>Configured Provider:</strong> ${channelViewModel?.gitProvider?.name}</p>\n  \n                      <p><strong>Repo ID:</strong> ${channelViewModel.channel.publishReaderRepoId}</p>\n                      <p><strong>Branch:</strong>   ${channelViewModel.channel.publishReaderRepoBranch}</p>\n                      <p><strong>Repo Path:</strong> ${channelViewModel.channel.publishReaderRepoPath}</p>\n                      <p><strong>Job Status:</strong> ${channelViewModel.channel.publishReaderRepoStatus}</p>\n                    </div>\n                  ` : $h`<span />`}\n  \n  \n  \n                  <div class=\"block cancel-save-row\">\n        \n                    <div class=\"large-only\"></div>\n      \n                    <a href=\"/admin/publish/${channelViewModel.channel._id}\" class=\"button button-outline color-gray\" tabindex=\"30\">\n                      Back to menu\n                    </a>\n  \n                    <button type=\"submit\" class=\"button button-fill\" tabindex=\"31\">\n                      Create/Connect Fork\n                    </button>\n      \n                  </div>\n  \n                `}\n  \n              </form>\n            </div>\n  \n          </div>    \n  \n        ` : $h`\n  \n            ${!hasItems ? $h`\n                \n              <div class=\"card\">\n                <div class=\"card-content card-content-padding\">\n                  <p>Add NFTs to the collection before publishing.</p>\n                </div>\n              </div>\n  \n            ` : $h` `}\n  \n            ${!gitConfigured ? $h`\n              \n              <div class=\"card\">\n                <div class=\"card-content card-content-padding\">\n                  <p>Configure a <a href=\"/admin/settings\">git provider</a> to deploy the reader.</p>\n                </div>\n              </div>\n  \n            ` : $h` `}\n\n    \n        `}\n\n      </div>\n\n\n      \n\n    </div>\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '5590006f62';\nframework7Component.style = `\n  .publish-label,\n  .ipfs-label,\n  .forking-label {\n    margin-top: 10px;\n    margin-bottom: 10px;\n    font-weight: bold;\n    font-size: 18px;\n  }\n\n  .publish-output {\n    border: 1px solid #cccccc;\n    font-size: 13px;\n    width: 100%;\n    max-width: 100%;\n    padding: 5px;\n    height: 300px;\n    overflow-y: scroll;\n  }\n\n  #fork-next-button {\n    width: 200px;\n  }\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { PublishService } from \"../../../service/core/publish-service\";\nimport { GitlabService } from \"../../../service/core/gitlab-service\";\nimport { GitService } from \"../../../service/core/git-service\";\nimport { QueueService } from \"../../../service/core/queue-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nimport toBuffer from \"it-to-buffer\";\nfunction framework7Component(props, {\n  $,\n  $h,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelService = ContainerService.getInstance(ChannelService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let queueService = ContainerService.getInstance(QueueService);\n  let gitlabService = ContainerService.getInstance(GitlabService);\n  let gitService = ContainerService.getInstance(GitService);\n  let publishService = ContainerService.getInstance(PublishService);\n  let ipfsReady = ipfsService.ipfs != undefined;\n  let peerCount = ipfsService.peerCount;\n  let channelViewModel = props.channelViewModel;\n  let settings = props.settings;\n  let publishing = false;\n  let publishReaderOutput = \"\";\n  let showPublishReaderStatus = channelViewModel.channel.publishReaderRepoId > 0 && channelViewModel.channel.publishReaderRepoStatus == \"complete\";\n  let showPublishReader = channelViewModel.channel.localCid != undefined;\n  let hasItems = channelViewModel.itemCount > 0;\n  let gitConfigured = channelViewModel?.gitProvider?.personalAccessToken?.length > 0;\n  let gitCorsProxy = settings?.gitCorsProxy?.length > 0;\n  let showForm = hasItems && gitConfigured && gitCorsProxy;\n  let repoURI = channelViewModel.channel.httpUrlToRepo;\n  let gitProvider;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title,\n    path: `/admin/channel/show/${channelViewModel.channel._id}`\n  }, {\n    text: 'Publish',\n    path: `/admin/publish/${channelViewModel.channel._id}`\n  }, {\n    text: 'Publish Collection To Reader'\n  }];\n  $on('pageInit', async () => {\n    //Initialize IPFS\n    await ipfsService.init();\n    ipfsReady = ipfsService.ipfs != undefined;\n    gitProvider = await channelService.getGitProviderCredentials(channelViewModel.channel, settings);\n    await $update();\n  });\n  const publishReaderSubmit = async e => {\n    e.preventDefault();\n    publishing = true;\n    await $update();\n    let elem = document.getElementsByClassName('ipfs-label')[0];\n    $f7.preloader.showIn(elem);\n    try {\n      let ipfsDir = `/export/${channelViewModel.channel._id}`;\n      let contractMetadata = await toBuffer(ipfsService.ipfs.files.read(`${ipfsDir}/contractMetadata.json`));\n      await gitService.deployReaderGit(channelViewModel.channel, contractMetadata);\n    } catch (ex) {\n      console.log(ex);\n      $f7.dialog.alert(ex, \"There was an error\");\n    }\n\n    // console.log('hide')\n    $f7.preloader.hideIn(elem);\n    publishing = false;\n    await $update();\n  };\n  const clearGitClick = async e => {\n    e.preventDefault();\n    let elem = document.getElementsByClassName('ipfs-label')[0];\n    $f7.preloader.showIn(elem);\n    try {\n      await gitService.clearGitRepos();\n    } catch (ex) {\n      $f7.dialog.alert(ex, \"There was an error\");\n    }\n\n    // console.log('hide')\n    $f7.preloader.hideIn(elem);\n    await $update();\n  };\n  $(document).on('publish-reader-progress', async e => {\n    publishReaderOutput = `<p>${e.detail.message}</p>`;\n    $update();\n  });\n  $(document).on('update-peers', async e => {\n    peerCount = e.detail.count;\n    $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"page\" data-name=\"publish\">\n  \n      <${Navbar} breadcrumbs=${breadcrumbs}  />\n  \n      <div class=\"page-content hide-toolbar-on-scroll\">\n\n        ${showForm ? $h`\n              \n          <div class=\"block-title\">Publish Reader</div>\n          <div class=\"card\">\n\n            <div class=\"card-content card-content-padding\">\n\n              ${gitProvider?.personalAccessToken?.length > 0 ? $h`\n\n                ${showPublishReader ? $h`\n                  \n                  <form @submit=\"${publishReaderSubmit}\">\n\n                    ${!ipfsReady ? $h`\n                      <div class=\"ipfs-label\">IPFS Initializing...</div>\n                    ` : $h`\n                        <div class=\"ipfs-label\">\n                            Status: <a href=\"/admin/connect\">IPFS Ready</a>\n                        </div>\n                    `}\n\n\n                    ${channelViewModel.channel.publishReaderRepoId > 0 ? $h`\n                      <div class=\"repo-status\">\n                        <p><strong>Remote Repository:</strong> ${repoURI}</p> <a href=\"#\" class=\"link\" @click=\"${clearGitClick}\">Clear local cache</a>\n                        <!-- <p><strong>Gitlab Repo ID:</strong> ${channelViewModel.channel.publishReaderRepoId}</p>\n                        <p><strong>Gitlab Repo Path:</strong> ${channelViewModel.channel.publishReaderRepoPath}</p>  \n                        <p><strong>Fork Status:</strong> ${channelViewModel.channel.publishReaderRepoStatus}</p>                                                                                                                                                               -->\n                      </div>\n\n                      ${showPublishReaderStatus && ipfsReady ? $h`\n\n                        ${channelViewModel.channel.contractAddress ? $h`\n                          <p>Reader will be configured to connect to: ${channelViewModel.channel.contractAddress}</p>  \n                        ` : $h`\n                          <p>Note: Contract is not deployed. The reader will not attempt to connect to Ethereum.</p>  \n                        `}\n\n                        ${publishReaderOutput ? $h`\n                          <div class=\"publish-output\" innerHTML=\"${publishReaderOutput}\"></div>\n                        ` : $h`\n                          <div class=\"publish-output\" style=\"display:none;\"></div>\n                        `}\n\n\n                        \n                        <div class=\"block cancel-save-row\">\n      \n                          <div class=\"large-only\"></div>\n            \n                          <a href=\"/admin/publish/${channelViewModel.channel._id}\" class=\"button button-outline color-gray\" tabindex=\"30\">\n                            Back to menu\n                          </a>\n        \n                          ${!publishing ? $h`\n                            <button class=\"button button-fill\" type=\"submit\">Publish Reader</button>\n                          ` : $h`\n\n                            <a href=\"#\" class=\"button button-outline\">\n                              Publishing...\n                            </a>\n                          `}\n\n                        </div>\n\n\n                    \n\n\n                      ` : $h`\n                        <p style=\"display:none;\"></p>\n                      `}\n\n                    ` : $h``}\n\n\n\n                  </form>                    \n                ` : $h`\n                  <p>Collection must be deployed to IPFS and you must fork the Large Reader before publishing.</p>  \n                `}\n                \n              ` : $h`\n                <p>Configure a <a href=\"/admin/settings\">git provider</a> to deploy the collection reader.</p>\n              `}\n\n\n            </div>\n\n          </div>\n\n        ` : $h`\n\n            ${!hasItems ? $h`\n                    \n              <div class=\"card\">\n                <div class=\"card-content card-content-padding\">\n                    <p>Add NFTs to the collection before publishing.</p>\n                </div>\n              </div>\n\n          ` : $h` `}\n\n          ${!gitConfigured ? $h`\n              \n              <div class=\"card\">\n                <div class=\"card-content card-content-padding\">\n                    <p>Configure a <a href=\"/admin/settings\">git provider</a> to deploy the reader.</p>\n                </div>\n              </div>\n\n          ` : $h` `}\n\n          ${!gitCorsProxy ? $h`\n              \n              <div class=\"card\">\n                <div class=\"card-content card-content-padding\">\n                    <p>Configure a <a href=\"/admin/settings\">git CORS proxy</a> to deploy the reader.</p>\n                </div>\n              </div>\n\n          ` : $h` `}\n\n\n          \n        `}\n\n      </div>\n  \n    </div>\n  \n  `\n    }\n    ;\n}\nframework7Component.id = '9440700d18';\nframework7Component.style = `\n\n    .publish-label, .ipfs-label, .forking-label {\n      margin-top: 10px;\n      margin-bottom: 10px;\n      font-weight: bold;\n      font-size: 18px;\n    }\n\n    .publish-output {\n      border: 1px solid #cccccc;\n      font-size: 13px;\n      width: 100%;\n      max-width: 100%;\n      padding: 5px;\n      height: 300px;\n      overflow-y : scroll;\n    }\n  `;\nexport default framework7Component;","import { ethers } from \"ethers\"\nimport { inject, injectable } from \"inversify\"\nimport { Channel } from \"../../dto/channel.js\"\nimport { ChannelService } from \"../channel-service.js\"\n\nimport TYPES from \"./types.js\"\nimport { WalletService } from \"./wallet-service.js\"\n\n\n@injectable()\nclass DeployService {\n\n    constructor(\n        private channelService: ChannelService,\n        @inject(TYPES.WalletService) private walletService: WalletService,\n        @inject(\"contracts\") private contracts,\n    ) { }\n\n    async deployContract(channel: Channel) {\n\n        if (!channel.publishReaderIPFSStatus?.cid) {\n            throw new Error(\"Not published to IPFS\")\n        }\n\n        let count = await this.channelService.countItemsByChannel(channel._id)\n\n        if (count <= 0) {\n            throw new Error(\"No NFTs\")\n        }\n\n        //Deploy contract\n        let mintPriceWei = ethers.parseUnits(channel.mintPrice, 'ether')        \n        let receipt = await this.deploy(channel.title, channel.symbol, channel.publishReaderIPFSStatus?.cid, mintPriceWei.toString(), count)\n\n        //Update address locally\n        channel.contractAddress = receipt.contractAddress\n        channel.showActivityPage = true\n        channel.showMintPage = true\n        await this.channelService.put(channel)\n\n    }\n\n    async updateContract(channel: Channel) {\n\n        if (!channel.publishReaderIPFSStatus?.cid) {\n            throw new Error(\"Not published to IPFS\")\n        }\n\n        let count = await this.channelService.countItemsByChannel(channel._id)\n\n        if (count <= 0) {\n            throw new Error(\"No NFTs\")\n        }\n\n        //Deploy contract\n        let mintPriceWei = ethers.parseUnits(channel.mintPrice, 'ether') \n        \n\n        let receipt = await this.update(channel, channel.publishReaderIPFSStatus?.cid, mintPriceWei.toString(), count)\n\n        //Update address locally\n        channel.showActivityPage = true\n        channel.showMintPage = true\n\n        await this.channelService.put(channel)\n\n    }\n\n\n    private async deploy(name: string, symbol: string, ipfsCid: string, mintFee: string, maxTokenId: number) {\n\n        if (!name || !symbol || !mintFee || !maxTokenId || !ipfsCid) throw new Error(\"Missing inputs to deploy\")\n\n        let wallet = this.walletService.wallet\n        if (!wallet) throw new Error(\"No wallet!\")\n\n        const c = this.contracts['Channel']\n\n        const factory = new ethers.ContractFactory(c.abi, c.bytecode, wallet)\n        \n        let contract = await factory.deploy(\n            name, \n            symbol, \n            ipfsCid, \n            BigInt(mintFee.toString()), \n            BigInt(maxTokenId.toString())\n        )\n        \n        return contract.deploymentTransaction().wait()\n    }\n\n    private async update(channel:Channel, ipfsCid: string, mintFee: string, maxTokenId: number) {\n\n        if (!mintFee || !maxTokenId || !ipfsCid) throw new Error(\"Missing inputs to deploy\")\n\n        let wallet = this.walletService.wallet\n        if (!wallet) throw new Error(\"No wallet!\")\n\n        let contract = await this.channelService.getChannelContract(channel)\n\n        let tx = await contract.update(ipfsCid, BigInt(mintFee.toString()), BigInt(maxTokenId.toString()))\n\n\n        console.log(tx)\n\n    }\n\n\n\n}\n\n\n\nexport {\n    DeployService\n}","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport dayjs from \"dayjs\";\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nimport { DeployService } from \"../../../service/core/deploy-service\";\nimport { CarService } from \"../../../service/car-service\";\nimport { GitlabService } from \"../../../service/core/gitlab-service\";\nimport { QueueService } from \"../../../service/core/queue-service\";\nimport { IpfsService } from \"../../../service/core/ipfs-service\";\nimport { PublishService } from \"../../../service/core/publish-service\";\nimport Navbar from \"../../admin/navbar.f7.html\";\nfunction framework7Component(props, {\n  $,\n  $h,\n  $on,\n  $f7,\n  $update\n}) {\n  let channelService = ContainerService.getInstance(ChannelService);\n  let ipfsService = ContainerService.getInstance(IpfsService);\n  let queueService = ContainerService.getInstance(QueueService);\n  let gitlabService = ContainerService.getInstance(GitlabService);\n  let deployService = ContainerService.getInstance(DeployService);\n  let carService = ContainerService.getInstance(CarService);\n  let publishService = ContainerService.getInstance(PublishService);\n  let walletService;\n  let channelViewModel = props.channelViewModel;\n  let channelContract = props.channelContract;\n  let deploying = false;\n  let publishing = false;\n  let showRefresh = false;\n  let publishOutput = \"\";\n  let existingCar;\n  let showDeploy = channelViewModel.channel.publishReaderIPFSStatus?.cid != undefined || channelViewModel.channel.contractAddress;\n  let breadcrumbs = [{\n    text: \"Home\",\n    path: \"/\"\n  }, {\n    text: channelViewModel.channel.title,\n    path: `/admin/channel/show/${channelViewModel.channel._id}`\n  }, {\n    text: 'Publish',\n    path: `/admin/publish/${channelViewModel.channel._id}`\n  }, {\n    text: 'Deploy Contract'\n  }];\n  $on('pageInit', async (e, page) => {\n    walletService = ContainerService.getWalletService();\n    await ipfsService.initLocal();\n    await $update();\n  });\n  const deployContractClick = async e => {\n    deploying = true;\n    await $update();\n    let promiseView = {\n      title: `Deploying contract ${name}. Approve transaction and wait for it to be mined.`,\n      promise: deployService.deployContract(channelViewModel.channel)\n    };\n\n    //Wait for it to be mined\n    await queueService.queuePromiseView(promiseView);\n    deploying = false;\n    await $update();\n  };\n  const updateContract = async e => {\n    deploying = true;\n    await $update();\n    let promiseView = {\n      title: `Updating contract ${name}. Approve transaction and wait for it to be mined.`,\n      promise: deployService.updateContract(channelViewModel.channel)\n    };\n\n    //Wait for it to be mined\n    await queueService.queuePromiseView(promiseView);\n    deploying = false;\n    await $update();\n  };\n  const resetContract = async e => {\n    $f7.dialog.confirm(\"Are you sure you want to clear the contract address? This will not remove the actual contract from the network it will just allow you to redploy a new copy.\", \"Reset Contract\", async () => {\n      channelViewModel.channel.contractAddress = undefined;\n      await channelService.put(channelViewModel.channel);\n      channelViewModel.channel = await channelService.get(channelViewModel.channel._id);\n      const toast = $f7.toast.show({\n        text: 'Contract address cleared.',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n      await $update();\n    });\n  };\n  const downloadCAR = async e => {\n    e.preventDefault();\n    let car = await publishService.publishContract(channelViewModel.channel);\n    $('#hidden-download').attr('href', URL.createObjectURL(new Blob([car.content], {\n      type: \"application/car\"\n    })));\n    $('#hidden-download').click();\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"page\" data-name=\"publish\">\n  \n      <${Navbar} breadcrumbs=${breadcrumbs}  />\n  \n      <div class=\"page-content hide-toolbar-on-scroll\">\n\n        <div class=\"fixed-width-content center\">\n\n          ${channelViewModel.itemCount > 0 ? $h`\n              \n            ${walletService?.address ? $h`\n\n\n              <div class=\"card card-header-divider\">\n                <div class=\"card-header\">Verify Mint Info</div>\n                <div class=\"card-content card-content-padding\">\n\n                  <p>\n                    <strong>Total Items:</strong> ${channelViewModel.itemCount} \n                  </p>\n\n                  ${channelViewModel.channel.mintPrice ? $h`\n\n                    <p>\n                      <strong>Mint Price:</strong> ${channelViewModel.channel.mintPrice} ETH each\n                    </p>\n                    \n                  ` : $h`<span />`}\n\n                </div>\n              </div>\n\n\n              <div class=\"card card-header-divider\">\n                <div class=\"card-header\">Deploy Contract</div>\n                <div class=\"card-content card-content-padding\">\n\n                  ${showDeploy ? $h`\n  \n                    <div class=\"pin-status\">\n                      <p><strong>IPFS Hash:</strong> ${channelViewModel.channel.publishReaderIPFSStatus?.cid}</p>\n                      <p><strong>Date Exported:</strong> ${dayjs(channelViewModel.channel.publishReaderIPFSStatus?.date).format('MMMM DD YYYY, h:mm:ss a')}</p>\n                    </div>\n  \n                    ${channelViewModel.channel.contractAddress ? $h`\n\n                      <p>\n                        <strong>Current Contract Address:</strong> ${channelViewModel.channel.contractAddress} \n                      </p> \n\n                      <br />\n\n                      <div class=\"block cancel-save-row\">\n                        \n\n                        ${channelViewModel.channel?.publishReaderIPFSStatus?.cid && channelViewModel.channel?.mintPrice ? $h`\n                          <a @click=\"${updateContract}\" class=\"button button-fill\" tabindex=\"30\">\n                            Update\n                          </a>\n                        ` : $h` `}\n    \n                        <button @click=\"${resetContract}\" type=\"submit\" class=\"button button-outline color-gray\" tabindex=\"31\">\n                          Reset\n                        </button>\n          \n                      </div>\n\n\n                    ` : $h`<span/>`}\n\n\n                    ${deploying ? $h`\n\n                      <p>Deploying...</p>\n\n                    ` : $h`\n                    \n                      ${!channelViewModel.channel.contractAddress ? $h`\n                        <button class=\"button button-fill button-small deploy-button\" @click=\"${deployContractClick}\">Deploy Contract</button>\n                      ` : $h`<span />`}                        \n                    `}\n                    \n                  ` : $h`\n                    <p>Collection must be deployed to IPFS</p>\n                  `}\n                </div>\n              </div>\n\n\n              <div class=\"card card-header-divider\">\n                <div class=\"card-header\">Reader Contract Bundle</div>\n                <div class=\"card-content card-content-padding\">      \n\n                  <p>Download contract information to export to your deployed collection. Must be exported AFTER deploying or updating a contract. Contract information does NOT change when collection changes are published.</p>\n\n                  ${publishing ? $h`\n                      <div class=\"publish-label\">\n                          Bundling...\n                      </div>\n\n                  ` : $h`\n                      <div class=\"publish-label\" style=\"display:none;\"></div>\n                  `}\n\n                  ${publishOutput ? $h`\n                      <div class=\"publish-output\" innerHTML=\"${publishOutput}\" id=\"contract-publish-process\" ></div>\n                  ` : $h`\n                      <div class=\"publish-output\" style=\"display:none;\"></div>\n                  `}\n\n\n                  ${channelViewModel.channel.contractAddress ? $h`\n\n                      <div class=\"pin-status\"> \n\n                              <strong>Download Archive:</strong> <a href=\"#\" @click=\"${downloadCAR}\" class=\"link\">contract.car</a><br />\n\n                              <a href=\"#\" download=\"contract.car\" class=\"link external\" style=\"display:none;\" id=\"hidden-download\"></a>\n\n                      </div>\n\n                  ` : $h`<span />`}\n                    \n                </div>\n              </div>\n\n\n\n\n              \n            ` : $h`\n              <div class=\"card\">\n                <div class=\"card-content card-content-padding\">\n                  <p>Use a web browser with wallet support to deploy an ERC-721 smart contract.</p>\n                </div>\n              </div>\n            \n            `}\n  \n  \n          ` : $h`\n            <div class=\"card\">\n              <div class=\"card-content card-content-padding\">\n                <p>Add NFTs to the collection before publishing.</p>\n              </div>\n            </div>\n            \n          `}\n\n\n        </div>\n\n        \n\n      </div>\n  \n    </div>\n  \n  `\n    }\n    ;\n}\nframework7Component.id = '0ba4afacff';\nframework7Component.style = `\n\n  `;\nexport default framework7Component;","import { injectable } from \"inversify\";\nimport { ModelView } from \"../util/model-view.js\";\nimport { routeMap } from \"../util/route-map.js\";\nimport { RouteTo } from '../service/core/routing-service.js';\n\nimport AdminPublishIndexComponent from '../components/admin/publish/index.f7.html'\nimport AdminPublishExportComponent from '../components/admin/publish/export.f7.html'\nimport AdminPublishIPFSComponent from '../components/admin/publish/ipfs.f7.html'\n\nimport AdminPublishForkReaderComponent from '../components/admin/publish/fork-reader.f7.html'\nimport AdminPublishPublishReaderComponent from '../components/admin/publish/publish-reader.f7.html'\nimport AdminPublishContractComponent from '../components/admin/publish/contract.f7.html'\n\nimport { ChannelWebService } from \"../service/web/channel-web-service.js\";\n\nimport { SettingsService } from \"../service/core/settings-service.js\";\nimport { SchemaService } from \"../service/core/schema-service.js\";\nimport { GitlabService } from \"../service/core/gitlab-service.js\";\nimport { Settings } from \"../dto/settings.js\";\n\n\n@injectable()\nclass PublishController {\n\n    constructor(\n        private channelWebService:ChannelWebService,\n        private settingsService:SettingsService,\n        private schemaService:SchemaService,\n        private gitlabService:GitlabService\n    ) {}\n\n    @routeMap(\"/admin/publish/:id\")\n    async publish() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n            \n\n            return {\n                channelViewModel: channelViewModel,\n            }\n\n        }, AdminPublishIndexComponent)\n    }\n\n\n    @routeMap(\"/admin/publish/export/:id\")\n    async export() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n            \n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n            \n\n            let settings\n\n            try {\n                settings = await this.settingsService.get()\n            } catch(ex) {}\n\n\n            return {\n                channelViewModel: channelViewModel,\n                settings:settings\n            }\n\n        }, AdminPublishExportComponent)\n    }\n\n\n    @routeMap(\"/admin/publish/ipfs/:id\")\n    async ipfs() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n            \n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n            \n\n            let settings\n\n            try {\n                settings = await this.settingsService.get()\n            } catch(ex) {}\n\n\n            return {\n                channelViewModel: channelViewModel,\n                settings:settings\n            }\n\n        }, AdminPublishIPFSComponent)\n    }\n\n\n\n\n\n    \n    // @routeMap(\"/admin/publish/pinata/:id\")\n    // async pinata() : Promise<ModelView> {\n\n    //     return new ModelView(async (routeTo:RouteTo) => {\n\n    //         let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n            \n    //         return {\n    //             channelViewModel: channelViewModel,\n    //             pinningApis: await this.pinningService.list(1000,0),\n    //             peerCount: this.ipfsService.peerCount,\n    //             ipfsReady: this.ipfsService.ipfs != undefined \n    //         }\n\n    //     }, AdminPublishPinataComponent)\n    // }\n\n\n    // @routeMap(\"/admin/publish/ipfs/:id\")\n    // async ipfs() : Promise<ModelView> {\n\n    //     return new ModelView(async (routeTo:RouteTo) => {\n\n    //         let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n            \n    //         let ipfsHost\n\n    //         try {\n    //             ipfsHost = await this.ipfsHostService.get()\n    //         } catch(ex) {}\n\n    //         return {\n    //             channelViewModel: channelViewModel,\n    //             ipfsHost: ipfsHost\n    //         }\n\n    //     }, AdminPublishIpfsHostComponent)\n    // }\n\n\n\n\n    \n    @routeMap(\"/admin/publish/fork-reader/:id\")\n    async forkReader() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n\n            let settings:Settings\n\n            try {\n                settings = await this.settingsService.get()\n            } catch(ex) {}\n\n            \n            return {\n                channelViewModel: channelViewModel,\n                settings: settings\n            }\n\n        }, AdminPublishForkReaderComponent)\n    }\n\n\n\n    \n    @routeMap(\"/admin/publish/publish-reader/:id\")\n    async publishReader() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n            \n            let settings\n\n            try {\n                settings = await this.settingsService.get()\n            } catch(ex) {}\n\n            return {\n                channelViewModel: channelViewModel,\n                settings: settings\n            }\n\n        }, AdminPublishPublishReaderComponent)\n    }\n\n\n\n    \n    \n    @routeMap(\"/admin/publish/contract/:id\")\n    async contract() : Promise<ModelView> {\n\n        return new ModelView(async (routeTo:RouteTo) => {\n\n            //Load the right channel dbs\n            await this.schemaService.loadChannel(routeTo.params.id)\n\n            let channelViewModel = await this.channelWebService.get(routeTo.params.id)\n            \n            let channelContract = await this.channelWebService.getChannelContract(channelViewModel.channel)\n\n\n            return {\n                channelViewModel: channelViewModel,\n                channelContract: channelContract\n            }\n\n        }, AdminPublishContractComponent)\n    }\n\n\n\n}\n\nexport {\n    PublishController\n}","import { injectable } from \"inversify\";\n\n@injectable()\nclass PagingService {\n    \n    constructor() {}\n\n    /**\n     * This function takes in a limit, offset, and count and generates a model \n     * \n     * @param offset \n     * @param limit \n     * @param count \n     */\n    buildPagingViewModel(offset: number, limit: number, count: number, numberOfPages:number) : PagingViewModel {\n\n        let viewModel = new PagingViewModel()\n\n        viewModel.offset = offset ? offset : 0\n        viewModel.limit = limit\n        viewModel.count = count \n\n        viewModel.start = viewModel.offset + 1\n\n\n        viewModel.end = Math.min(viewModel.offset + limit, count) \n\n        \n        viewModel.previousOffset = Math.max(viewModel.offset-limit, 0);\n\n        if ( (viewModel.offset + limit) < count ) {\n            viewModel.nextOffset = viewModel.offset + limit\n        }\n\n        \n        //Set current page\n        viewModel.page = viewModel.offset/viewModel.limit + 1\n        if (viewModel.page > viewModel.endPage) viewModel.page = viewModel.endPage\n\n        viewModel.endPage = Math.ceil(viewModel.count / viewModel.limit)\n\n\n        viewModel.lastOffset = viewModel.endPage * viewModel.limit - viewModel.limit\n        \n\n        viewModel.showNext = viewModel.endPage > viewModel.page\n        viewModel.showPrevious = viewModel.offset != 0\n\n        viewModel.showFirst = viewModel.page > 2\n        viewModel.showLast = viewModel.page < (viewModel.endPage - 1)\n\n\n        //Number of pages shouldn't be past the end\n        // numberOfPages = Math.min(numberOfPages, viewModel.endPage - viewModel.page)\n\n        // viewModel.pageNumbers = []\n        // for (let i=viewModel.page; i < numberOfPages + viewModel.page; i++) {\n        //     viewModel.pageNumbers.push({\n        //         display: i + 1,\n        //         offset: i * viewModel.limit\n        //     })\n        // }\n\n        return viewModel\n    }\n\n\n\n    calculateEndIndex(limit, offset, currentCount) {\n        let endIndex = offset + limit - 1\n\n        //If it's the last page don't go past the final record\n        return Math.min( currentCount - 1,  endIndex )\n    }\n\n\n    calculateDescendingEndIndex(limit, offset) {\n        let endIndex = offset - (limit - 1)\n\n        //Don't go lower than 0\n        return Math.max( 0,  endIndex )\n    }\n\n    calculateDescendingOffset(offset, currentCount) {\n\n        let calculatedOffset = (currentCount - 1) - offset\n        // console.log(`offset: ${offset}, currentCount: ${currentCount}, calculatedOffset: ${calculatedOffset}`)\n        return Math.max( 0,  calculatedOffset )\n    }\n\n\n}\n\nclass PagingViewModel {\n\n    page:number\n    pageNumbers:PageNumber[]\n    endPage:number\n\n    offset: number\n    limit: number\n    count: number\n\n    start: number\n    end: number \n\n    previousOffset: number \n    nextOffset: number \n    lastOffset:number\n\n    showPrevious:boolean\n    showNext:boolean\n    showFirst:boolean\n    showLast:boolean\n\n}\n\ninterface PageNumber {\n    display:number\n    offset:number\n}\n\nexport {\n    PagingService,\n    PagingViewModel\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport { ContainerService } from \"../../../service/core/container-service\";\nimport { ItemService } from \"../../../service/item-service\";\nimport { ChannelService } from \"../../../service/channel-service\";\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let itemService = ContainerService.getInstance(ItemService);\n  let channelService = ContainerService.getInstance(ChannelService);\n  let walletService = ContainerService.getWalletService();\n  let channelViewModel = props.channel_view_model;\n  let showEdit = true;\n  const truncateEthAddress = address => {\n    return walletService.truncateEthAddress(address);\n  };\n  const deleteCollectionClick = async e => {\n    $f7.dialog.confirm(\"Are you sure you want to delete this collection? This will only remove your local copy of the files.\", async () => {\n      $f7.preloader.show();\n      await channelService.delete(channelViewModel.channel);\n      $f7.preloader.hide();\n      $f7.views.main.router.navigate(`/`);\n      const toast = $f7.toast.show({\n        text: 'Collection deleted',\n        closeTimeout: 2000,\n        closeButton: true,\n        position: 'bottom',\n        horizontalPosition: 'left'\n      });\n    });\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"card card-outline channel-card-show\">\n\n    <div class=\"card-header banner show-channel-banner-${channelViewModel.channel._id}\">\n\n      <div class=\"float-right\">\n        <a class=\"button button-fill button-raised color-blue text-color-white border-white\"\n          href=\"/admin/publish/${channelViewModel.channel._id}\">Publish</a>\n      </div>\n\n\n      ${channelViewModel?.coverImage ? $h`\n      <img src=\"${channelViewModel.coverImage.url}\" class=\"avatar\" alt=\"Channel cover image\" />\n      ` : $h`\n      <i class=\"material-icons avatar\">image</i>\n      `}\n\n    </div>\n\n    <div class=\"card-content\">\n\n      <div class=\"card-content card-content-padding\">\n        \n        <div class=\"float-right\">\n\n          <div class=\"segmented\">\n\n            ${showEdit ? $h`\n              <a class=\"button button-active\" href=\"/admin/channel/edit/${channelViewModel.channel._id}\">Edit</a>\n            ` : $h`<span />`}\n\n            <a class=\"button\" @click=\"${deleteCollectionClick}\">Delete</a>\n          </div>\n\n        </div>\n                        \n        <div class=\"title\">${channelViewModel?.channel?.title}</div>\n\n        ${channelViewModel?.authorDisplayName ? $h`\n        <div class=\"name\">\n          By <a\n            href=\"/admin/${channelViewModel.channel._id}/author/show/${channelViewModel?.author._id}\">${channelViewModel?.authorDisplayName}</a>\n        </div>\n        ` : ``}\n\n        <div class=\"collection-info\">\n            <label>Items:</label><strong>${channelViewModel?.itemCount}</strong>\n            \n            <span class=\"dot\">·</span>\n            <label>Created:</label><strong>${channelViewModel.dateCreated}</strong>\n  \n            <span class=\"dot\">·</span>\n            <label>Forkable:</label><strong>${!channelViewModel.channel.disableForks ? 'Yes' : 'No'}</strong>\n\n            ${channelViewModel.channel.mintPrice ? $h`\n              <span class=\"dot\">·</span>\n              <label>Mint Price:</label><strong>${channelViewModel.channel.mintPrice} ETH</strong>\n            ` : $h``}\n  \n            ${channelViewModel.channel.royaltyPercent ? $h`\n              <span class=\"dot\">·</span>\n              <label>Marketplace Creator Fee:</label><strong>${channelViewModel.channel.royaltyPercent}%</strong>\n            ` : $h``}\n        </div>\n\n\n\n        ${channelViewModel.channel.descriptionHTML ? $h`\n          <div class=\"description\" id=\"channel-show-description-${channelViewModel.channel._id}\"\n            innerHTML=\"${channelViewModel.channel.descriptionHTML}\">\n          </div>\n        ` : $h`<span />`}\n\n            \n\n        ${channelViewModel.channel.contractAddress ? $h`\n          <div class=\"contract-address\">\n            <strong>Contract Address:</strong> ${truncateEthAddress(channelViewModel?.channel.contractAddress)}\n          </div>\n        ` : $h``}\n\n        ${channelViewModel.channel.localCid ? $h`\n          <div class=\"contract-address\">\n            <strong>Last Published IPFS CID:</strong> ${channelViewModel?.channel.localCid}\n          </div>\n        ` : $h``}\n\n        ${channelViewModel.channel.forkedFromCid ? $h`\n          <div class=\"contract-address\">\n            <strong>Forked from IPFS:</strong> ${channelViewModel?.channel.forkedFromCid}\n          </div>\n        ` : $h``}\n\n        ${channelViewModel.channel.forkedFromId ? $h`\n          <div class=\"contract-address\">\n            <strong>Forked from:</strong> ${channelViewModel?.channel.forkedFromId}\n          </div>\n        ` : $h``}\n\n      </div>\n\n    </div>\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '9d2eaf171e';\nframework7Component.style = `    \n`;\nexport default framework7Component;","import AppComponent from './components/admin/app.f7.html'\n\nimport { ethers } from \"ethers\"\n\nimport { createHelia } from 'helia'\nimport { IDBBlockstore } from 'blockstore-idb'\nimport { IDBDatastore } from 'datastore-idb'\n\n\nimport { UiService } from './service/core/ui-service.js';\n\nimport { QueueService } from './service/core/queue-service.js';\n\nimport { QuillService } from \"./service/quill-service.js\";\nimport { QuillEditorService } from \"./service/quill-editor-service.js\";\n\nimport { UploadService } from \"./service/core/upload-service.js\";\n\nimport { WalletService } from \"./service/core/wallet-service.js\"\nimport { WalletServiceImpl } from './service/core/wallet-service-impl.js'\n\nimport { ImageService } from \"./service/image-service.js\"\nimport { AuthorService } from \"./service/author-service.js\"\nimport { ChannelService } from \"./service/channel-service.js\"\nimport { IpfsService } from \"./service/core/ipfs-service.js\"\nimport { Container } from \"inversify\";\nimport { DatabaseService } from './service/core/database-service.js'\nimport { ChannelRepository } from './repository/channel-repository.js'\nimport { ItemRepository } from './repository/item-repository.js'\nimport { ImageRepository } from './repository/image-repository.js'\nimport { AuthorRepository } from './repository/author-repository.js'\nimport { SchemaService } from './service/core/schema-service.js'\n\nimport TYPES from './service/core/types.js'\n\nimport { AttributeCountRepository } from './repository/attribute-count-repository.js'\n\nimport { ItemService } from './service/item-service.js'\nimport { AttributeCountService } from './service/attribute-count-service.js'\n\nimport { ChannelWebService } from './service/web/channel-web-service.js'\nimport { ItemWebService } from './service/web/item-web-service.js'\nimport { AuthorWebService } from './service/web/author-web-service.js'\nimport { GitlabService } from './service/core/gitlab-service.js'\nimport { SettingsRepository } from './repository/settings-repository.js'\nimport { RoutingService } from './service/core/routing-service.js'\nimport { SettingsService } from './service/core/settings-service.js'\n\nimport { ChannelController } from './controller/channel-controller.js'\nimport { ItemController } from './controller/item-controller.js'\nimport { AuthorController } from './controller/author-controller.js';\nimport { SettingsController } from './controller/settings-controller.js';\nimport { ConnectController } from './controller/connect-controller.js';\nimport { PublishController } from './controller/publish-controller.js';\nimport { PagingService } from './service/core/paging-service.js';\n\n\nimport { SvgService } from './service/svg-service.js';\nimport { AnimationService } from './service/animation-service.js';\nimport { AnimationRepository } from './repository/animation-repository.js';\nimport { ImportService } from './service/core/import-service.js';\n\nimport { ERCEventService } from './service/core/erc-event-service.js';\nimport { QueryCacheService } from './service/core/query-cache-service.js';\n\n// import * as IPFS from 'ipfs-core'\nimport { create } from 'ipfs-http-client'\n\n\nimport { ThemeService } from './service/theme-service.js';\nimport { ThemeRepository } from './repository/theme-repository.js';\nimport { StaticPageRepository } from './repository/static-page-repository.js';\nimport { StaticPageService } from './service/static-page-service.js';\nimport { ExportService } from './service/core/export-service.js';\n\n\nimport { TokenMetadataCacheRepository } from './repository/token-metadata-cache-repository.js';\nimport { QueryCacheRepository } from './repository/query-cache-repository.js';\n\nimport ChannelCard from './components/admin/channel/channel-card.f7.html'\n\n\n//Init framework7\nimport Framework7 from 'framework7';\n\n// Import additional components\nimport Dialog from 'framework7/components/dialog';\nimport Toast from 'framework7/components/toast';\nimport Preloader from 'framework7/components/preloader';\nimport VirtualList from 'framework7/components/virtual-list'\nimport ListIndex from 'framework7/components/list-index'\nimport Card from 'framework7/components/card'\nimport Chip from 'framework7/components/chip'\nimport Popup from 'framework7/components/popup'\nimport Accordion from 'framework7/components/accordion'\nimport Popover from 'framework7/components/popover'\n\nimport Form from 'framework7/components/form'\nimport Input from 'framework7/components/input'\nimport Checkbox from 'framework7/components/checkbox'\nimport Radio from 'framework7/components/radio'\nimport Toggle from 'framework7/components/toggle'\nimport Range from 'framework7/components/range'\nimport Stepper from 'framework7/components/stepper'\nimport SmartSelect from 'framework7/components/smart-select'\nimport Grid from 'framework7/components/grid'\nimport InfiniteScroll from 'framework7/components/infinite-scroll'\n// import Swiper from 'framework7/components/swiper'\nimport { GitService } from './service/core/git-service.js';\nimport { GithubService } from './service/core/github-service.js';\n\nimport { HuggingFaceService } from './service/core/hugging-face-service.js';\nimport { DeployService } from './service/core/deploy-service.js';\n\nimport PouchDB from 'pouchdb-browser';\nimport PouchFind from 'pouchdb-find'\nimport { OriginalMetadataService } from './service/original-metadata-service.js';\nimport { OriginalMetadataRepository } from './repository/original-metadata-repository.js';\n\nimport dayjs from \"dayjs\"\nimport relativeTime from 'dayjs/plugin/relativeTime.js'\ndayjs.extend(relativeTime)\n\nimport localizedFormat from 'dayjs/plugin/localizedFormat.js'\nimport { PublishService } from './service/core/publish-service.js'\nimport { PublishIPFSService } from './service/core/publish-ipfs-service.js'\nimport { CarService } from './service/car-service.js'\nimport { CarRepository } from './repository/car-repository.js'\ndayjs.extend(localizedFormat)\n\n\n//Enable find plugin\nPouchDB.plugin(PouchFind)\n\n\n\n\n\n\n// Install F7 Components using .use() method on Framework7 class:\nFramework7.use([Dialog, Toast, Preloader, VirtualList, ListIndex, Card, Chip,\n  Form, Input, Checkbox, Radio, Toggle, Range, Stepper, SmartSelect, Grid, InfiniteScroll, Popup,Accordion,\n  Popover\n])\n\nFramework7.registerComponent(\"channel-card\", ChannelCard)\n\n\n\nlet container: Container\n\n\nfunction getMainContainer(version:string) {\n\n  if (container) return container\n\n  container = new Container()\n\n  function framework7() {\n\n    let app = new Framework7({\n\n      el: '#app', // App root element\n      id: 'large-nft', // App bundle ID\n      name: 'Large NFT', // App name\n      theme: 'auto', // Automatic theme detection\n\n      init: false,\n\n      //@ts-ignore\n      component: AppComponent,\n      navbar: {\n        hideOnPageScroll: true\n      },\n\n\n      darkMode: 'auto'\n\n    })\n    \n\n    return app\n\n  }\n\n  function contracts() {\n    const c = require('../../contracts.json')\n    return c\n  }\n\n  container.bind(\"version\").toConstantValue(version)\n\n  container.bind(\"provider\").toConstantValue(() => {\n\n    if (typeof window !== \"undefined\" && window['ethereum']) {\n\n      //@ts-ignore\n      window.web3Provider = window.ethereum\n\n      //@ts-ignore\n      return new ethers.BrowserProvider(window.ethereum)\n\n    }\n\n  })\n\n  container.bind(\"contracts\").toConstantValue(contracts())\n  container.bind(\"name\").toConstantValue(\"Large\")\n  container.bind(\"framework7\").toConstantValue(framework7())\n  container.bind(\"dayjs\").toConstantValue(dayjs)\n\n\n\n  container.bind(\"PouchDB\").toConstantValue(() => {\n    return PouchDB\n  })\n  \n  container.bind(\"pouch-prefix\").toConstantValue(\"./pouch/\")\n\n  container.bind(\"footer-text\").toConstantValue(globalThis.footerText)\n\n\n  container.bind(\"helia\").toConstantValue( async () => {\n\n    const blockstore = new IDBBlockstore('./blockstore')\n    const datastore = new IDBDatastore('./datastore')\n\n    await datastore.open()\n    await blockstore.open()\n\n\n    \n    const helia = await createHelia({\n      blockstore: blockstore,\n      datastore: datastore,\n      libp2p: {\n        start: false,\n        connectionManager: {\n          minConnections: 0,\n        },\n        services: {},\n        peerDiscovery: [],\n      }\n    })\n\n    //Don't do networking in browser\n    await helia.libp2p.stop()\n\n    \n    return helia\n\n  })\n\n\n\n\n  // let fs\n    \n  // //@ts-ignore\n  // container.bind(\"fs\").toConstantValue(async () => {\n  \n  //   if (fs) return fs\n  \n  //   fs = new FS()\n\n  //   await fs.init(\"large-fs\")\n\n  //   return fs\n  // })\n   \n\n\n  // container.bind(\"git\").toConstantValue(git)\n\n\n\n  container.bind(ChannelController).toSelf().inSingletonScope()\n  container.bind(ItemController).toSelf().inSingletonScope()\n  container.bind(AuthorController).toSelf().inSingletonScope()\n  container.bind(SettingsController).toSelf().inSingletonScope()\n  container.bind(ConnectController).toSelf().inSingletonScope()\n  container.bind(PublishController).toSelf().inSingletonScope()\n\n  container.bind(UiService).toSelf().inSingletonScope()\n  container.bind(QueueService).toSelf().inSingletonScope()\n  container.bind(QuillService).toSelf().inSingletonScope()\n  container.bind(QuillEditorService).toSelf().inSingletonScope()\n  container.bind(DeployService).toSelf().inSingletonScope()\n\n  container.bind(UploadService).toSelf().inSingletonScope()\n  container.bind(IpfsService).toSelf().inSingletonScope()\n  container.bind(DatabaseService).toSelf().inSingletonScope()\n  container.bind(SchemaService).toSelf().inSingletonScope()\n  // container.bind(PinningService).toSelf().inSingletonScope()\n  container.bind(RoutingService).toSelf().inSingletonScope()\n  container.bind(PagingService).toSelf().inSingletonScope()\n\n  container.bind(ERCEventService).toSelf().inSingletonScope()\n  container.bind(ExportService).toSelf().inSingletonScope()\n  container.bind(AttributeCountService).toSelf().inSingletonScope()\n  container.bind(PublishService).toSelf().inSingletonScope()\n  container.bind(PublishIPFSService).toSelf().inSingletonScope()\n  container.bind(CarService).toSelf().inSingletonScope()\n\n\n  container.bind(ChannelWebService).toSelf().inSingletonScope()\n  container.bind(ItemWebService).toSelf().inSingletonScope()\n  container.bind(AuthorWebService).toSelf().inSingletonScope()\n\n  container.bind<WalletService>(TYPES.WalletService).to(WalletServiceImpl).inSingletonScope()\n\n  container.bind(AnimationService).toSelf().inSingletonScope()\n  container.bind(AuthorService).toSelf().inSingletonScope()\n  container.bind(ChannelService).toSelf().inSingletonScope()\n  container.bind(ImageService).toSelf().inSingletonScope()\n  container.bind(ItemService).toSelf().inSingletonScope()\n  container.bind(SvgService).toSelf().inSingletonScope()\n  container.bind(ImportService).toSelf().inSingletonScope()\n  container.bind(ThemeService).toSelf().inSingletonScope()\n  container.bind(StaticPageService).toSelf().inSingletonScope()\n  container.bind(QueryCacheService).toSelf().inSingletonScope()\n  container.bind(SettingsService).toSelf().inSingletonScope()\n\n  container.bind(GitService).toSelf().inSingletonScope()\n  container.bind(GitlabService).toSelf().inSingletonScope()\n  container.bind(GithubService).toSelf().inSingletonScope()\n  container.bind(HuggingFaceService).toSelf().inSingletonScope()\n  container.bind(OriginalMetadataService).toSelf().inSingletonScope()\n\n\n  container.bind(AnimationRepository).toSelf().inSingletonScope()\n  container.bind(ChannelRepository).toSelf().inSingletonScope()\n  container.bind(ItemRepository).toSelf().inSingletonScope()\n  container.bind(ImageRepository).toSelf().inSingletonScope()\n  container.bind(AuthorRepository).toSelf().inSingletonScope()\n  container.bind(SettingsRepository).toSelf().inSingletonScope()\n  container.bind(ThemeRepository).toSelf().inSingletonScope()\n  container.bind(StaticPageRepository).toSelf().inSingletonScope()\n  container.bind(TokenMetadataCacheRepository).toSelf().inSingletonScope()\n\n  container.bind(QueryCacheRepository).toSelf().inSingletonScope()\n  container.bind(AttributeCountRepository).toSelf().inSingletonScope()\n  container.bind(OriginalMetadataRepository).toSelf().inSingletonScope()\n  container.bind(CarRepository).toSelf().inSingletonScope()\n\n\n  container.bind(\"ipfsRemoteInit\").toConstantValue( async (url) => {\n    if (!url) return\n    return create({ url: url })\n  })\n\n\n  //Attach container to window so we can easily access it from the browser console\n  globalThis.container = container\n\n  return container\n}\n\n\n\nexport {\n  getMainContainer, container\n}","import \"regenerator-runtime/runtime\"\nimport \"reflect-metadata\"\n\n\nimport { getMainContainer } from \"./inversify.config.js\"\n\nimport {Workbox} from 'workbox-window'\n\n//Import CSS\nimport 'framework7/css/bundle'\nimport 'framework7-icons/css/framework7-icons.css'\n\nimport './html/css/quill.snow.css'\nimport 'material-icons/iconfont/material-icons.css'\nimport '@yaireo/tagify/dist/tagify.css'\nimport './html/css/app.css'\n\n\n\nimport { RoutingService } from \"./service/core/routing-service.js\"\n\n\nexport default async(version) => {\n    \n    // let pathname = globalThis.location.pathname\n    // let filename = pathname.replace(/^.*[\\\\/]/, '')\n    let rootPath = \"/large\"\n\n    if ('serviceWorker' in navigator) {\n\n        const wb = new Workbox(`${rootPath}/sw-admin-${version}.js`, {\n            scope: `${rootPath}/`\n        })\n\n        startApp(version)\n\n        wb.register()\n\n    }\n\n}\n\n\nconst startApp = (version) => {\n\n    let container = getMainContainer(version)\n\n    let app:any = container.get(\"framework7\")\n    let routingService:RoutingService = container.get(RoutingService)\n\n    //Initialize routing\n    app.routes.push(...routingService.buildRoutesForContainer(container))\n\n    app.init()\n\n}"],"names":["WalletService","Symbol","ContainerService","static","clazz","get","UiService","app","constructor","showExceptionPopup","ex","console","log","this","dialog","alert","message","showPopup","showAlert","spinnerDialog","showSpinner","hideSpinner","preloader","close","progressDialog","showProgress","hideProgress","progress","setProgress","setText","injectable","inject","Animation","_id","_rev","content","cid","dateCreated","Allow","IsNotEmpty","DatabaseService","pouchPrefix","PouchDB","dbCache","async","name","changesets","fullName","auto_compaction","details","info","doc_count","update_seq","localChangesets","ids","changeset","push","id","put","updated","includes","db","latest","results","allDocs","key","include_docs","deleted","rows","length","value","rev","_deleted","AnimationRepository","databaseService","createIndex","index","fields","channelId","getDatabase","getEmptyDatabase","Object","assign","animation","remove","keys","map","d","doc","Author","walletAddress","description","url","coverPhotoId","lastUpdated","AuthorRepository","getLatestRevision","author","Channel","forkedFromCid","forkedFromId","forkedFromFeeRecipient","forkType","disableForks","authorId","title","symbol","link","descriptionHTML","descriptionMarkdown","license","licenseHTML","licenseMarkdown","category","language","coverImageId","coverBannerId","mintPrice","attributeOptions","contractAddress","pinJobId","pinJobStatus","gitProvider","httpUrlToRepo","publishReaderRepoId","publishReaderRepoPath","publishReaderRepoBranch","publishReaderRepoStatus","publishReaderIPFSStatus","pubDate","productionHostname","productionBaseURI","productionBaseLibraryURI","showMintPage","showActivityPage","marketplaces","externalLinks","importSuccess","MinLength","ChannelRepository","channel","limit","skip","find","selector","$exists","sort","docs","Settings","ipfsHost","defaultGitProvider","gitProviders","gitCorsProxy","username","personalAccessToken","alchemyKey","huggingFace","welcomeHide","IsBoolean","SettingsRepository","settings","buffer","svg","generated","ImageRepository","image","Item","tokenId","contentHTML","excerpt","attributeSelections","coverImageGenerated","animationId","themes","coverImageCSS","animationCSS","coverImageAsAnimation","originalJSONMetadataId","imageIds","datePublished","views","attribute_counts","as","emit","traitType","toString","reduce","by_channel_token","by_channel_token_stats","by_image_id","imageId","ItemRepository","filter","row","startsWith","a","b","parseInt","r","result","query","item","items","startkey","endkey","startKey","endKey","group_level","count","$eq","StaticPage","slug","contentMarkdown","locations","StaticPageRepository","staticPage","Theme","ThemeRepository","theme","TokenMetadataCache","tokenMetadata","TokenMetadataCacheRepository","tokenMetadataCache","QueryCache","stale","QueryCacheRepository","queryCache","AttributeCount","AttributeCountRepository","attributeCount","OriginalMetadata","OriginalMetadataRepository","originalMetadata","Car","Uint8Array","CarRepository","car","SchemaService","authorRepository","channelRepository","imageRepository","itemRepository","settingsRepository","animationRepository","themeRepository","staticPageRepository","tokenMetadataCacheRepository","queryCacheRepository","attributeCountRepository","originalMetadataRepository","carRepository","loadedChannelId","load","time","timeEnd","loadEmpty","channelBackup","loadEmptyChannel","staticPages","attributeCounts","authors","prepareRows","bulkDocs","itemDocs","animationsDocs","imagesDocs","themesDocs","staticPagesDocs","attributeCountsDocs","authorDocs","originalMetadataDocs","animations","images","clearDatabase","updatedRows","compact","db_name","framework7Component","props","$on","$f7","$update","version","getInstance","clone","document","getElementById","cloneNode","footerTemplate","serializer","XMLSerializer","serializeToString","$ctx","$","$h","$root","$f7route","$f7router","$theme","$store","style","$f7ready","mainView","baseURI","window","location","pathname","hash","substring","undefined","uiService","walletService","getWalletService","schemaService","displayAddress","provider","initProvider","getAddress","address","wallet","connect","addEventListener","initWallet","connectWallet","create","browserHistory","browserHistoryRoot","reloadCurrent","init","QueueService","promiseView","self","queueItem","Guid","newGuid","icon","Promise","resolve","reject","_beforeSaveAction","before","then","promise","_showSuccess","_showError","toast","text","closeButton","open","error","closeButtonText","closeTimeout","replace","c","Math","random","toDelta","QuillService","suppressSrc","ops","qdc","encodeHtml","renderCustomWith","renderCustom","convert","deltaToMarkdown","customOp","contextOp","insert","type","img","src","width","height","ValidationException","Error","errors","super","SvgService","individualCss","themeCss","fontSize","lineHeight","ThemeService","getIds","Date","toJSON","forbidUnknownValues","whitelist","delete","listByChannel","ImageService","svgService","quillService","themeService","blob","bufferToBlob","blobToDataURL","getSVGURL","svgToDataURL","Blob","dataUrl","fr","FileReader","onload","readAsDataURL","svgStr","translateContentEncodeHtml","allThemeCss","css","getExcerptByFirstParagraph","pruneLength","fromText","options","ellipsis","allowUnsafeSymbols","getByIds","data","Buffer","from","values","TextEncoder","encode","imageData","resolved","rejected","URL","createObjectURL","inputImage","outputImage","createElement","naturalWidth","naturalHeight","ctx","getContext","scale","drawImage","getImageData","binary","i","SettingsService","gitlab","github","HuggingFaceService","settingsService","inference","model","prompt","negativePrompt","inputs","parameters","negative_prompt","textToImage","QuillEditorService","imageService","huggingFaceService","activeEditor","initialized","Inline","BoldBlot","blotName","tagName","ItalicBlot","Block","BlockquoteBlot","HeaderBlot","node","indexOf","BlockEmbed","DividerBlot","IpfsImageBlot","setAttribute","getAttribute","buildQuillPostEditor","toolbarSelector","bounds","modules","imageDropAndPaste","handler","imageDataUrl","imageDropAndPasteHandler","toolbar","blotFormatter","specs","CustomImageSpec","align","icons","left","center","right","svgStyle","handlers","href","quill","format","generateImage","insertBlobInEditor","imageClick","fileElement","insertImage","files","file","insertImageInEditor","imageSelectedEvent","CustomEvent","detail","dispatchEvent","editor","resizedImageBlob","readAndCompressImage","maxWidth","imageArrayBuffer","arrayBuffer","newFromBuffer","getUrl","dimensions","getHeightAndWidthFromDataUrl","range","getSelection","insertText","USER","calculatedDimensions","originalWidth","originalHeight","widthRatio","heightRatio","resizeRatio","min","floor","insertEmbed","setSelection","SILENT","toFile","dataURL","Image","CustomDeleteAction","keyUpListener","onCreate","e","onKeyUp","formatter","root","onDestroy","removeEventListener","currentSpec","keyCode","blot","getTargetElement","deleteAt","hide","getActions","UploadService","buf","reader","readAsArrayBuffer","WalletServiceImpl","contracts","getProvider","ethersContracts","globalThis","ethereum","on","accounts","main","router","refreshPage","send","getSigner","getContract","signer","abi","truncateEthAddress","match","Function","AuthorService","existing","getDisplayName","QueryCacheService","queryName","OriginalMetadataService","ItemService","queryCacheService","originalMetadataService","getByTokenId","getNextTokenId","getByImageId","getByAnimationId","coverImage","JSON","parse","animation_url","attributes","ao","selections","trait_type","newFromItem","tokenIdStats","max","getAttributeCountByChannel","getAttributeInfoBySelections","AttributeCountService","ChannelService","itemService","attributeCountService","translateContent","generateMarkdown","list","dropChannel","ownerAddress","external_link","seller_fee_basis_points","fee_recipient","ac","attributeCountId","IpfsService","ipfsRemoteInit","helia","peerCount","addresses","ipfs","_helia","_mfs","_car","initializing","mfsOptions","cidVersion","rawLeaves","layout","balanced","maxChildrenPerNode","chunker","chunkSize","stop","peers","swarm","updatePeerCountEvent","p","addr","path","rm","fromPath","toPath","cp","read","write","flush","add","ipfsFilename","stat","writeBytes","mkdir","rootCID","writer","export","carReaderIterable","parts","part","forEach","each","Array","prototype","AnimationService","imageSrc","getFullImageTemplate","getAnimationTemplate","StaticPageService","slugify","normalize","toLowerCase","trim","ExportService","authorService","animationService","staticPageService","originalChannel","getExportChannel","getExportAuthor","imageCids","animationCids","getImageCidsByItem","Set","themeIds","staticPageIds","exportBundle","getBackupChannel","channels","getBackupItems","getBackupThemes","getBackupStaticPages","getBackupImages","getBackupAnimations","getBackupOriginalMetadata","itemCount","themeCount","staticPageCount","imageCount","animationCount","op","ipfsimage","getImageCidsByStaticPage","stringify","prepareTheme","prepareStaticPage","prepareItem","exportChannel","themeId","staticPageId","theItems","counter","theItem","clonedImage","animationIds","clonedAnimation","originalMetadataIds","originalMetadatas","originalMetadataId","clonedMetadata","parser","DOMParser","ItemWebService","channelService","exportService","ipfsService","dayjs","getViewModel","getNavigationViewModel","authorPhoto","animationContentHTML","editable","body","parseFromString","getElementsByTagName","slice","aImage","attributeSelection","categoryPercent","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","canDelete","getImagesFromContent","dateDisplay","authorDisplayName","itemViewModel","next","previous","getListViewModel","matches","buildAnimationPage","newFromText","newCoverImage","command","removedImageCids","removedCid","deletePublishedImageByChannel","deletePublishedAnimationByChannel","publish","imageCid","publishImage","publishAnimation","updateQueryCache","deleteJSONForItem","itemCopy","saveGeneratedCoverImage","saveAnimation","getImageContent","filesCp","parents","_safeDelete","filesRm","recursive","ChannelWebService","itemWebService","coverBanner","cImage","cBanner","countItemsByChannel","getGitProviderCredentials","updateGeneratedCoverImage","response","loadChannel","getChannelContract","AuthorWebService","GitlabService","BASE_URL","READER_REPO_ID","existingFork","getExistingFork","branch","axios","post","headers","_createVariable","_getVariables","masked","forks","f","owner","http_url_to_repo","default_branch","import_status","res","job","commit","headSha","actions","action","encoding","total","chunks","chunkIt","chunk","entries","logPublishProgress","headline","commit_message","latestCommit","getMostRecentCommit","linkHeaders","treeLink","resultActions","reverse","file_path","commits","getBranchName","gitActions","perChunk","RoutingService","navigate","navigateParams","routeOptions","viewName","ignoreCache","view","navigateUrl","buildRoutesForContainer","container","routes","mappedRoute","mappedRoutes","controllerBean","controllerClass","resolveRoute","to","routeTo","controller_promise","modelView","modelResult","component","history","ModelView","routeMap","target","propertyKey","descriptor","showConnect","active","readerConfig","reader_config","breadcrumbs","truncateRegex","channelWebService","footerText","channelsShown","pageCounter","hasMoreChannels","loadingInProgress","virtualList","unloadInfiniteScroll","infiniteScroll","destroy","deleteAllItems","appendItems","page","el","renderItem","channelViewModel","getTemplate","setListHeight","emptyTemplate","trigger","fragment","element","innerHTML","links","classList","removeClass","popup","uploadService","setMintPrice","mintPriceWei","wei","mintPriceChange","currentTarget","contractAddressChange","handleCoverImageBrowseClick","click","handleCoverImageChange","imageBuffer","uploadFile","coverImageUpdatedEvent","handleBannerBrowseClick","handleBannerChange","coverBannerUpdatedEvent","disableForksChange","val","showCC0Link","showMintChange","showActivityChange","gitProviderChange","editCategory","preventDefault","form","fillFromData","deleteOptionClick","addCategoryClick","addAttributeSubmit","editExternalLink","externalLink","deleteExternalLink","addExternalLinkClick","addExternalLinkSubmit","editMarketplace","marketplace","deleteMarketplace","m","addMarketplaceClick","addMarketplaceSubmit","convertToData","v","focus","descriptionToolbarId","description_toolbar","descriptionEditorId","description_editor","licenseToolbarId","license_toolbar","licenseEditorId","license_editor","languages","licenseQuillEditor","quillEditorService","configure","formSubmit","reportValidity","scrollIntoView","getContents","sellerFeeBasisPoints","insertIfNew","show","position","horizontalPosition","attr","token_id","goTokenFormSubmit","children","firstPageItems","itemsShown","hasMoreItems","totalItemCount","showEdit","resizeListener","viewPortWidth","getWidth","params","cols","update","documentElement","clientWidth","innerWidth","virtualListParams","createUl","rowItemViewModel","addClass","createVirtualList","itemPage","CHUNK_SIZE","coverImageCSSEditorId","cover_image_css_editor_id","animationCSSEditorId","animation_css_editor_id","editingTheme","themeCoverCssEditor","themeAnimationCssEditor","updateThemeList","addThemePopupOpen","syntax","highlight","hljs","highlightAuto","addThemeFormSubmit","getText","editThemeFormSubmit","deleteTheme","confirm","editTheme","static_page","editorId","static_page_content_editor_id","toolbarId","static_page_content_toolbar_id","imageButtonInputId","image_button_input_id","imageButtonId","image_button_id","staticPageLocation","isLocationSelected","editingStaticPage","staticPageContentEditor","updateStaticPagesList","popupOpenHandler","addFormSubmit","editFormSubmit","deleteClick","editClick","setContents","addImageButtonClick","addImageButtonInputClick","editImageButtonClick","editImageButtonInputClick","off","existingChannel","ERCEventService","contract","startBlock","endBlock","getBlockNumber","events","eventResult","getEvents","tryAgain","queryFilter","startEnd","split","tokens","getMintEventsForContract","Number","BigInt","topics","gatewayTools","ImportService","ercEventService","forkStatus","saved","logForkProgress","_readFile","contractMetadata","mediaDownloader","IPFSDownloader","_importExisting","_importAsFork","_importFromContract","ipfsCid","importBundle","_buildImportBundle","_fetchFile","URLDownloader","_getERC721ABI","tokenIds","getTokensForContract","size","tokenIdStatsQueryCache","existingTokenIdStatsCache","skippedTokens","metadata","_getTokenMetadata","image_url","imageURI","_fetchURI","TextDecoder","decode","newFromSvg","attribute","_addAttributeToChannel","buildAttributeCounts","idMap","Map","oldId","set","getAsString","animationObj","getAsBuffer","imageObj","themeObj","staticPageObj","updatedThemes","itemObj","channelObj","authorObj","matching","cacheId","tokenURI","metadataData","uri","responseType","containResults","containsCID","containsCid","convertToDesiredGateway","cat","filename","bufferedContents","basePath","importService","ipfsReady","forking","forkOutput","formData","importFromIPFS","outputElement","scrollTop","scrollHeight","radioButtonChange","importExistingFromContract","importAsForkFromContract","contractInfo","customName","search","urlParams","URLSearchParams","decodeURIComponent","loadCollection","getChannel","getAuthor","getContractInfo","continueSubmit","collectionTitleChange","importExistingFromReader","importAsForkFromReader","upgradeClick","upgrade","regenerateAnimationsClick","regenerateItemMedia","ChannelController","GithubService","READER_REPO_OWNER","READER_REPO","repoInfo","include_all_branches","html_url","theUrl","secret","publicKey","binkey","ORIGINAL","binsec","encBytes","encryptedValue","key_id","encrypted_value","oid","getMostRecentCommitOid","additions","contents","mutation","variables","GRAPHQL_URL","createCommitOnBranch","commitUrl","pop","workflowRunResults","workflow_runs","currentCommitSha","newTreeSha","createCommitResult","tree","patch","sha","baseTreeSha","newTree","base_tree","deleteDirectory","repository","ref","nodes","directoryPath","currentCommit","treeSha","theDirSha","theTree","mode","createTree","createCommit","CarService","GitService","gitlabService","githubService","carService","fs","repoURI","defaultBranch","contractCar","createVariables","deleteReaderBackup","deleteContractBackup","createFork","getForkRepoStatus","chunkArrayByBytes","chunkSizeBytes","itemSizes","byteLength","currentChunk","currentChunkSize","loadCoverImages","coverImageClick","coverImageClearClick","valueNameChange","themeSelectionChange","titleOnInput","coverImageAsAnimationOnClick","showAnimationCss","prop","generateFormSubmit","generateAIImage","aiPrompt","cancelLink","cancel_link","showHuggingFace","show_hugging_face","setAttributeSelections","attributeSelectionViewModel","coverImageCSSQuillEditor","animationCSSQuillEditor","delta","oldContents","source","getImgUrls","diff","imageSelected","aiPromptEvent","ipfsReadyEvent","huggingFaceReady","cloneClick","current","changed","old","cur","ItemController","getNewViewModel","getNavigation","authorViewModel","handleAuthorPhotoBrowseClick","handleAuthorPhotoChange","AuthorController","authorWebService","formSettings","gitLabUsername","gitLabPersonalAccessToken","gitHubUsername","gitHubPersonalAccessToken","updatedSettings","clearInit","providerChange","SettingsController","addPeerClick","setCustomValidity","peerValue","peer","ConnectController","publishStatus","gitService","publishing","publishOutput","pageUnloaded","showRefresh","status","hasItems","gitConfigured","gitRepo","showForm","elem","getElementsByClassName","showIn","deployReader","hideIn","PublishIPFSService","backup","feeRecipient","ipfsDirectory","getIPFSDirectory","heliaStat","heliaRm","heliaMkDir","force","nftMetadata","backups","_publishImages","_publishAnimations","_publishNFTMetadata","contractMetadataPath","exportContractMetadata","addContractResult","heliaAdd","contractABI","largeConfig","animationCid","metadataNFTMap","exportNFTMetadata","out","createCAR","carBlobPromise","carWriterOutToBlob","exportCAR","PublishService","publishIPFSService","baseDir","prepareExport","getFeeReceipient","createBackup","exportToIPFS","createCarFromCID","contractABIBuffer","productionURIInfo","getProductionURIInfo","hostname","exportContractToIPFS","getGitHubUsername","carBlobURL","publishService","initLocal","date","downloadCAR","checkPublishRepoStatus","createForkSubmit","forkResult","setTimeout","publishReaderOutput","showPublishReaderStatus","showPublishReader","localCid","publishReaderSubmit","ipfsDir","deployReaderGit","clearGitClick","clearGitRepos","DeployService","receipt","deploy","mintFee","maxTokenId","factory","bytecode","deploymentTransaction","wait","tx","queueService","deployService","deploying","channelContract","showDeploy","deployContractClick","deployContract","queuePromiseView","updateContract","resetContract","publishContract","PublishController","PagingService","buildPagingViewModel","offset","numberOfPages","viewModel","PagingViewModel","start","end","previousOffset","nextOffset","endPage","ceil","lastOffset","showNext","showPrevious","showFirst","showLast","calculateEndIndex","currentCount","endIndex","calculateDescendingEndIndex","calculateDescendingOffset","calculatedOffset","pageNumbers","channel_view_model","deleteCollectionClick","royaltyPercent","getMainContainer","bind","toConstantValue","web3Provider","navbar","hideOnPageScroll","darkMode","blockstore","datastore","libp2p","connectionManager","minConnections","services","peerDiscovery","toSelf","inSingletonScope","plugin","use","registerComponent","rootPath","navigator","wb","scope","startApp","register","routingService"],"sourceRoot":""}