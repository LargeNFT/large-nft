<% 

    let channelViewModel = it.baseViewModel.channelViewModel 
    let hostname = it.baseViewModel.hostname
    let baseURL = it.baseViewModel.baseURL
    let marketplaces = it.baseViewModel.marketplaces
    let externalLinks = it.baseViewModel.externalLinks
    let routablePages = it.baseViewModel.routablePages
    let attributeReport = it.baseViewModel.attributeReport
    let base64Version = it.baseViewModel.base64Version
    let channelId = it.baseViewModel.channelId
    let showMintPage = it.baseViewModel.showMintPage
    let showActivityPage = it.baseViewModel.showActivityPage
    let logo = it.baseViewModel.logo

    const link = (href) => {
        return `${baseURL + href}`
    }   


    const absoluteLink = (href) => {
      return `${hostname + baseURL + href}`
    }   

    let coverImageLink = channelViewModel.coverImage ? absoluteLink(`backup/${channelViewModel.coverImage.generated ? 'generated' : 'export'}/images/${channelViewModel.coverImage._id}.${channelViewModel.coverImage.generated ? 'png' : 'jpg'}`)  : ''


%>

<!DOCTYPE html>
<html lang="en">

  <head>

    <%~ include("headStart", {baseURL: baseURL}) %>


    <style>
      html {
        visibility: hidden;
        opacity: 0;
      }
    </style>

    <!-- Required meta tags-->
    <meta charset="utf-8">
    <meta name="viewport"
    content="width=device-width, initial-scale=1, maximum-scale=5, minimum-scale=1, user-scalable=yes, minimal-ui, viewport-fit=cover">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <!-- Color theme for statusbar -->
    <title>
      <%= it.title %>
    </title>

    <%~ 
      include("_meta_tags", {
        title: channelViewModel.channel.title,
        url: 'search.html',
        imageUrl: coverImageLink,
        descriptionHTML: `Search '${channelViewModel.channel.title}' NFTs`,
        hostname: hostname,
        baseURL: baseURL,
        excerptHtml: it.baseViewModel.excerptHtml,
        he: it.baseViewModel.he
      }) 
    %>


    <%~ it.baseViewModel.headEndContents %>

    
  </head>

  <body>

    <div id="app">

      <div class="view view-main">

        <div class="page" data-name="mint">

          <nav-bar
              logo="${logo}"
              library_url="<%=it.baseViewModel.libraryURL ? it.baseViewModel.libraryURL : ''%>"
              large_url="<%=it.baseViewModel.largeURL ? it.baseViewModel.largeURL : ''%>"
              title="Search"
              show_mint_page="<%=showMintPage%>"
              show_activity_page="<%=showActivityPage%>"
              breadcrumbs="${breadcrumbs}"
              base_uri="${baseURI}"
              hostname="${hostname}"
          >
          </nav-bar>

          <div class="page-content">

            <div class="row">

              <div class="col-100 large-66 center">

                <search-list></search-list>

              </div>

              <%~ include("footer", {baseURL: baseURL}) %>

            </div>

          </div>

        </div>

      </div>

    </div>

    <%~ it.baseViewModel.bodyContents %>
    
    <script type="module" id="page-init-scripts">

      const init = (props, { $, $f7, $h, $on, $update }) => {   

        let channelWebService = globalThis.container.get("ChannelWebService")
        let baseURI = globalThis.container.get("baseURI")
        let hostname = globalThis.container.get("hostname")



        let itemWebService = globalThis.container.get("ItemWebService")

        let logo = JSON.parse(`<%~ JSON.stringify(logo ? logo : {})  %>`)

        let searching = false

        let results = []

        let breadcrumbs = [{
                text: JSON.parse(`<%~ JSON.stringify(channelViewModel.channel.symbol)  %>`),
                path: "index.html"
            }, {
                text: "Search"
        }]

        $on('pageInit', async () => {


          await channelWebService.loadChannel(
              "<%= channelViewModel.channel._id %>",
              '<%= baseURL %>',
              '<%= hostname %>'
          )

          await $update()


          // const params = new Proxy(new URLSearchParams(window.location.search), {
          //   get: (searchParams, prop) => searchParams.get(prop),
          // })

          // $f7.preloader.showIn('.cards-list')
          
          // searching = true
          // $update()

          // results = await itemWebService.query(params.query)

          // searching = false
          // $update()

          // $f7.preloader.hideIn('.cards-list')

        })

        $on('pageBeforeOut', async () => {
        })

        const searchbarSubmit = (e) => {
          e.preventDefault()
        }


        <%~ 
          include("_meta_tags_js", {
            title: channelViewModel.channel.title,
            url: 'search.html',
            imageUrl: coverImageLink,
            descriptionHTML: `Search '${channelViewModel.channel.title}' NFTs`,
            hostname: hostname,
            baseURL: baseURL,
            excerptHtml: it.baseViewModel.excerptHtml,
            he: it.baseViewModel.he
          }) 
        %>

        document.querySelector('title').innerHTML = "Search '<%=channelViewModel.channel.title%>' NFTs."

        $f7.preloader.hide()
    

        return $render


      }


    </script>

    <%~ 
      include("_init", {
        hostname: hostname,
        baseURL: baseURL,
        libraryURL: it.baseViewModel.libraryURL,
        routablePages: routablePages,
        base64Version: base64Version
      }) 
    %>

  </body>

</html>