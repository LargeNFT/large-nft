{"version":3,"file":"large/library/browser/js/main.library.js","mappings":"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","sources":["webpack://library/./src/reader/components/reader/navbar.f7.html","webpack://library/./src/reader/components/reader/token-toolbar.f7.html","webpack://library/./src/reader/components/reader/transaction.f7.html","webpack://library/./src/reader/components/reader/channel/attribute-filter.f7.html","webpack://library/./src/reader/components/reader/channel/explore-total-info.f7.html","webpack://library/./src/reader/components/reader/channel/mint-info.f7.html","webpack://library/./src/reader/components/reader/channel/largest-sales.f7.html","webpack://library/./src/reader/components/reader/channel/transaction-row.f7.html","webpack://library/./src/reader/components/reader/channel/leaderboard-rows.f7.html","webpack://library/./src/reader/components/reader/item/search-list.f7.html","webpack://library/./src/reader/components/reader/item/infinite-scroll-content.f7.html","webpack://library/./src/reader/service/core/wallet-service-impl.ts","webpack://library/./src/reader/service/core/database-service.ts","webpack://library/./src/reader/repository/browser/channel-repository-impl.ts","webpack://library/./src/reader/dto/item.ts","webpack://library/./src/reader/repository/browser/item-repository-impl.ts","webpack://library/./src/reader/repository/item-repository.ts","webpack://library/./src/reader/dto/author.ts","webpack://library/./src/reader/repository/browser/author-repository-impl.ts","webpack://library/./src/reader/dto/nft-metadata.ts","webpack://library/./src/reader/repository/browser/metadata-repository-impl.ts","webpack://library/./src/reader/dto/image.ts","webpack://library/./src/reader/repository/browser/image-repository-impl.ts","webpack://library/./src/reader/dto/animation.ts","webpack://library/./src/reader/repository/browser/animation-repository-impl.ts","webpack://library/./src/reader/dto/static-page.ts","webpack://library/./src/reader/repository/browser/static-page-repository-impl.ts","webpack://library/./src/reader/repository/browser/item-page-repository-impl.ts","webpack://library/./src/reader/dto/attribute-total.ts","webpack://library/./src/reader/repository/browser/attribute-total-repository-impl.ts","webpack://library/./src/reader/dto/reader-settings.ts","webpack://library/./src/reader/repository/browser/reader-settings-repository-impl.ts","webpack://library/./src/reader/dto/token.ts","webpack://library/./src/reader/repository/browser/token-repository-impl.ts","webpack://library/./src/reader/service/author-service.ts","webpack://library/./src/reader/service/channel-service.ts","webpack://library/./src/reader/service/core/paging-service.ts","webpack://library/./src/reader/service/core/schema-service.ts","webpack://library/./src/reader/service/image-service.ts","webpack://library/./src/reader/service/static-page-service.ts","webpack://library/./src/reader/service/web/channel-web-service.ts","webpack://library/./src/reader/service/animation-service.ts","webpack://library/./src/reader/service/core/quill-service.ts","webpack://library/./src/reader/service/attribute-total-service.ts","webpack://library/./src/reader/service/item-service.ts","webpack://library/./src/reader/service/item-page-service.ts","webpack://library/./src/reader/service/web/item-web-service.ts","webpack://library/./src/reader/service/web/author-web-service.ts","webpack://library/./src/reader/service/token-contract-service.ts","webpack://library/./src/reader/service/web/mint-web-service.ts","webpack://library/./src/reader/service/core/queue-service.ts","webpack://library/./src/reader/service/core/ui-service.ts","webpack://library/./src/reader/util/validation-exception.ts","webpack://library/./src/reader/service/reader-settings-service.ts","webpack://library/./src/sync/dto/erc-event.ts","webpack://library/./src/reader/service/erc-event-service.ts","webpack://library/./src/reader/service/core/component-state-service.ts","webpack://library/./src/reader/dto/component-state.ts","webpack://library/./src/reader/repository/browser/component-state-repository-impl.ts","webpack://library/./src/reader/service/token-owner-page-service.ts","webpack://library/./src/reader/repository/browser/token-owner-page-repository-impl.ts","webpack://library/./src/reader/service/processed-transaction-service.ts","webpack://library/./src/reader/service/web/transaction-web-service.ts","webpack://library/./src/reader/repository/browser/processed-transaction-repository-impl.ts","webpack://library/./src/reader/dto/token-owner.ts","webpack://library/./src/reader/service/token-owner-service.ts","webpack://library/./src/reader/repository/token-owner-repository.ts","webpack://library/./src/reader/repository/browser/token-owner-repository-impl.ts","webpack://library/./src/reader/service/token-service.ts","webpack://library/./src/reader/repository/browser/row-item-view-model-repository-impl.ts","webpack://library/./src/reader/inversify.config.ts","webpack://library/./src/library/service/web/home-web-service.ts","webpack://library/./src/library/repository/web/home-repository-impl.ts","webpack://library/./src/reader/service/core/routing-service.ts","webpack://library/./src/library/index.ts"],"sourcesContent":["/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nfunction framework7Component(props, {\n  $on,\n  $f7,\n  $update\n}) {\n  let walletService = globalThis.container.get(\"WalletService\");\n  let uiService = globalThis.container.get(\"UiService\");\n  let baseURI = globalThis.container.get(\"baseURI\");\n  let hostname = globalThis.container.get(\"hostname\");\n  let symbol = props.symbol;\n  let logo = props.logo;\n  let title = props.title;\n  let active = props.active;\n  let libraryURL = props.library_url;\n  let largeURL = props.large_url;\n  let showMintPage = props.show_mint_page == \"true\";\n  let showActivityPage = props.show_activity_page == \"true\";\n  let hideMenu = props.hide_menu == \"true\";\n  let breadcrumbs = props.breadcrumbs;\n  let walletAddress;\n  let showConnect = true;\n  const getForkLink = () => {\n    if (largeURL?.length > 0) {\n      return `${largeURL}/index.html#!/admin/channel/fork-reader?path=${encodeURIComponent(`${hostname()}${baseURI()}`)}`;\n    } else {\n      return `${baseURI()}large/index.html#!/admin/channel/fork-reader?path=${encodeURIComponent(`${hostname()}${baseURI()}`)}`;\n    }\n  };\n  const truncateEthAddress = address => {\n    return walletService.truncateEthAddress(address);\n  };\n  const displayAddress = async e => {\n    walletAddress = undefined;\n    if (!walletService.provider) {\n      await walletService.initProvider();\n    }\n    walletAddress = await walletService.getAddress();\n\n    //If no provider still then clear the address so we don't show the button\n    if (!walletService.provider) {\n      showConnect = false;\n    }\n    if (walletAddress) {\n      walletService.address = walletAddress;\n      if (!walletService.wallet) {\n        await walletService.connect();\n      }\n    }\n    $update();\n  };\n  const connectWallet = async e => {\n    await walletService.initWallet();\n\n    //Connect to metamask\n    await walletService.connect();\n    displayAddress();\n  };\n  displayAddress();\n  const showPopoverMenu = async e => {};\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\r\n\r\n    <div class=\"navbar\">\r\n        <div class=\"navbar-bg\"></div>\r\n\r\n        <div class=\"navbar-inner sliding\">\r\n                \r\n          <div class=\"left\">\r\n            <a href=\"${libraryURL?.length > 0 ? libraryURL : baseURI() }\">\r\n              <i class=\"f7-icons\">house</i>\r\n            </a>\r\n          </div>\r\n\r\n\r\n          <div class=\"title\">${title}</div>\r\n          \r\n          <div class=\"right\">\r\n            \r\n            ${!hideMenu ? $h`\r\n              \r\n              <div class=\"small-only\">\r\n\r\n                <a href=\"#\" class=\"link popover-open\" data-popover=\".popover-menu\">\r\n                  <i class=\"f7-icons\">menu</i>\r\n                </a> \r\n  \r\n                <div class=\"popover popover-menu\">\r\n                  <div class=\"popover-angle\"></div>\r\n                  <div class=\"popover-inner\">                    \r\n                    <div class=\"list\">\r\n                      <ul>\r\n  \r\n                        ${showConnect ? $h`\r\n          \r\n                            <li>\r\n                              <div class=\"item-content\">\r\n                                <div class=\"item-inner\">\r\n                                    <div class=\"item-title\">\r\n                                        ${walletAddress != undefined ? $h`\r\n                                          <a href=\"#\">${truncateEthAddress(walletAddress)}</a>\r\n                                      ` : $h`\r\n                                          <button class=\"button button-outline button-fill\" @click=${connectWallet}>\r\n                                            Connect Wallet\r\n                                          </button>\r\n                                      `} \r\n                                    </div>\r\n                                </div>\r\n                              </div>\r\n                            </li>\r\n  \r\n                            ${showMintPage ? $h`\r\n                              <li>\r\n                                <a href=\"${baseURI()}mint.html\" class=\"item-link popover-close\">\r\n                                  <div class=\"item-content\">\r\n                                    <div class=\"item-inner\">\r\n                                        <div class=\"item-title\">\r\n                                            Mint\r\n                                        </div>\r\n                                    </div>\r\n                                  </div>\r\n                                </a>\r\n                              </li>\r\n                            ` : $h`<span />`}\r\n  \r\n                                \r\n                          ` : $h`<span />`}\r\n  \r\n  \r\n  \r\n  \r\n                        <li>\r\n                          <a href=\"${getForkLink()}\" class=\"item-link external popover-close\">\r\n                            <div class=\"item-content\">\r\n                              <div class=\"item-inner\">\r\n                                  <div class=\"item-title\">\r\n                                    Fork\r\n                                  </div>\r\n                              </div>\r\n                            </div>\r\n                          </a>\r\n                        </li>\r\n    \r\n  \r\n  \r\n  \r\n                        <li>\r\n                          <a href=\"${baseURI()}explore.html\" class=\"item-link popover-close\">\r\n                            <div class=\"item-content\">\r\n                              <div class=\"item-inner\">\r\n                                  <div class=\"item-title\">\r\n                                      Explore\r\n                                  </div>\r\n                              </div>\r\n                            </div>\r\n                          </a>\r\n                        </li>\r\n  \r\n  \r\n                        ${showActivityPage ? $h`\r\n                          <li>\r\n                            <a href=\"${baseURI()}activity\" class=\"item-link popover-close\">\r\n                              <div class=\"item-content\">\r\n                                <div class=\"item-inner\">\r\n                                    <div class=\"item-title\">\r\n                                        Activity\r\n                                    </div>\r\n                                </div>\r\n                              </div>\r\n                            </a>\r\n                          </li>\r\n  \r\n                          <li>\r\n                            <a href=\"${baseURI()}leaderboard\" class=\"item-link popover-close\">\r\n                              <div class=\"item-content\">\r\n                                <div class=\"item-inner\">\r\n                                    <div class=\"item-title\">\r\n                                        Leaderboard\r\n                                    </div>\r\n                                </div>\r\n                              </div>\r\n                            </a>\r\n                          </li>\r\n  \r\n  \r\n                        ` : $h`<span />`}\r\n  \r\n                      </ul>\r\n                \r\n                    </div>\r\n        \r\n                  </div>\r\n                </div>\r\n  \r\n              </div>\r\n  \r\n              <div class=\"large-only\">\r\n    \r\n                <a href=\"${getForkLink()}\" class=\"external link\">\r\n                  Fork\r\n                </a>\r\n  \r\n                <a class=\"link ${active == 'Explore' ? $h`link-active` : $h` `}\" href=\"${baseURI()}explore.html\">\r\n                  Explore\r\n                </a>      \r\n  \r\n                ${showActivityPage ? $h`\r\n                  <a class=\"link ${active == 'Activity' ? $h`link-active` : $h` `}\" href=\"${baseURI()}activity\">\r\n                    Activity\r\n                  </a> \r\n  \r\n                  <a class=\"link ${active == 'Leaderboard' ? $h`link-active` : $h` `}\" href=\"${baseURI()}leaderboard\" >\r\n                    Leaderboard\r\n                  </a> \r\n  \r\n                ` : $h`<span />`}\r\n  \r\n                ${showConnect ? $h`\r\n  \r\n                  ${showMintPage ? $h`\r\n                    <a class=\"link ${active == 'Mint' ? $h`link-active` : $h` `}\" href=\"${baseURI()}mint.html\" >\r\n                      Mint\r\n                    </a> \r\n                  ` : $h`<span />`}\r\n  \r\n                  ${walletAddress != undefined ? $h`\r\n                      <a href=\"${baseURI()}u/?address=${walletAddress}\" class=\"link\" >${truncateEthAddress(walletAddress)}</a>\r\n                  ` : $h`\r\n                      <a class=\"link\" @click=\"${connectWallet}\">Connect Wallet</a>\r\n                  `} \r\n       \r\n                ` : $h`<span style=\"display: none;\" />`}\r\n  \r\n              </div>\r\n              \r\n            ` : $h` `}\r\n            \r\n          </div>\r\n\r\n\r\n\r\n          ${breadcrumbs ? $h`\r\n                  \r\n            <div class=\"subnavbar\">\r\n              <div class=\"subnavbar-inner\">\r\n        \r\n                <div class=\"breadcrumbs \">\r\n  \r\n                  ${breadcrumbs.map( b => $h`\r\n                    <div class=\"breadcrumbs-item\">\r\n\r\n                      ${b.path ? $h`\r\n                        <a href=\"${b.path}\" class=\"link\">\r\n                          ${b.text}\r\n                        </a>\r\n                      ` : $h`${b.text}`}\r\n\r\n\r\n                    </div>  \r\n\r\n                    ${b.path ? $h`\r\n                      <div class=\"breadcrumbs-separator\"></div>\r\n                    ` : $h`<span />`}\r\n\r\n                    \r\n                  `)}\r\n\r\n                </div>\r\n        \r\n              </div>\r\n            </div>\r\n\r\n\r\n            ` : $h`<span />`}\r\n\r\n\r\n\r\n          \r\n        </div>\r\n        \r\n    </div>\r\n\r\n`\n    }\n    ;\n}\nframework7Component.id = 'af1a237039';\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nfunction framework7Component(props, {\n  $on,\n  $,\n  $f7,\n  $update\n}) {\n  let baseURI = globalThis.container.get(\"baseURI\");\n  let readerSettingsService = globalThis.container.get(\"ReaderSettingsService\");\n  let tokenId = props.token_id;\n  let itemCount = props.item_count;\n  let currentPage = props.current_page;\n  const link = href => {\n    return baseURI() + href;\n  };\n  const rangeSliderChange = async e => {\n    e.preventDefault();\n    let tokenId = $(e.currentTarget).val();\n    $f7.preloader.show();\n    if (tokenId > 0) {\n      await readerSettingsService.updateCurrentPage(parseInt(tokenId));\n      $f7.views.main.router.navigate(link('t/' + tokenId), {\n        transition: 'f7-flip'\n      });\n    } else {\n      $f7.views.main.router.navigate(link(`index.html`));\n    }\n    $f7.preloader.hide();\n  };\n  const rangeChange = e => {\n    e.preventDefault();\n    const range = $f7.range.get(e.target);\n    tokenId = range.value;\n    $update();\n  };\n  app.on('current-page-updated', function (p) {\n    currentPage = p;\n    $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\r\n\r\n  <div class=\"toolbar toolbar-bottom\">\r\n    <div class=\"toolbar-inner\">\r\n\r\n        <div style=\"width: 100%; margin-bottom: -20px;\">\r\n\r\n            <div style=\"display: flex;\">\r\n            \r\n                ${currentPage && tokenId == 0 ? $h`\r\n                    <a href=\"${link(`t/${currentPage}`)}\" class=\"button button-outline back-to-page\">\r\n                        Back to page ${currentPage}\r\n                    </a>\r\n                ` : $h`<span />`}\r\n    \r\n    \r\n                <div class=\"range-slider range-slider-init\" \r\n                    @range:change=${rangeChange}\r\n                    data-label=\"true\"\r\n                    >\r\n                \r\n                    <!-- range input -->\r\n                    <input type=\"range\" \r\n                        min=\"0\" \r\n                        max=\"${itemCount}\"\r\n                        step=\"1\" \r\n                        value=\"${tokenId}\" \r\n                        @change=\"${rangeSliderChange}\"\r\n                />\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n            <div class=\"page-number\" style=\"width: 100%;\">\r\n                Page <strong>${tokenId}</strong> of ${itemCount}\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  </div>\r\n\r\n`\n    }\n    ;\n}\nframework7Component.id = '93c223f908';\nframework7Component.style = `\n.page-number {\n    width: 100%;\n    text-align: center;\n    font-size: 13px;\n    margin-bottom: 15px;\n}\n\n.range-slider {\n    width: 100%;\n    margin-left: 20px; \n    margin-right: 20px;\n    flex: 1;\n}\n\n.toolbar a.back-to-page {\n    height: 45px;\n    width: 70px;\n    margin-left: 10px;\n    flex: 0 0 70px;\n    font-size: 10px;\n    text-transform: none;\n    white-space: normal;\n    line-height: 13px;\n}\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nfunction framework7Component(props, {\n  $on,\n  $f7,\n  $update\n}) {\n  // let walletService = globalThis.container.get(\"WalletService\")\n\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\r\n\r\n\r\n\r\n\r\n`\n    }\n    ;\n}\nframework7Component.id = 'b6b86fdcb1';\nframework7Component.style = `\n\n\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nlet attributeOptions;\nlet filters = [];\nlet attributeParams = {};\nlet handlerBody;\nlet handler = async e => {\n  return handlerBody(e);\n};\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  filters = [];\n  attributeParams = {};\n  handlerBody = async e => {\n    attributeOptions = e.attributeOptions;\n    if (e.attributeParams) {\n      attributeParams = e.attributeParams;\n      $('#attribute-accordian-item').addClass('accordion-item-opened');\n    }\n    await $update();\n  };\n  document.removeEventListener('attribute-options-loaded', handler);\n  document.addEventListener('attribute-options-loaded', handler);\n  const attributeChange = e => {\n    attributeParams[e.currentTarget.name] = e.currentTarget.value;\n    if (e.currentTarget.value) {\n      attributeParams[e.currentTarget.name] = e.currentTarget.value;\n    } else {\n      delete attributeParams[e.currentTarget.name];\n    }\n\n    //Dispatch event so we can refresh list\n    let ev = new CustomEvent('explore-attribute-filter-changed');\n    ev.attributeParams = attributeParams;\n    document.dispatchEvent(ev);\n  };\n  const deleteChipClick = async e => {\n    let attributeId = $(e.currentTarget).data('id');\n    delete attributeParams[attributeId];\n    await $update();\n\n    //Dispatch event so we can refresh list\n    let ev = new CustomEvent('explore-attribute-filter-changed');\n    ev.attributeParams = attributeParams;\n    document.dispatchEvent(ev);\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div>\n\n    <div class=\"block block-strong row\">\n      \n      <div class=\"col-50\">\n\n        ${Object.keys(attributeParams).map(key => $h`\n          <div class=\"chip\">\n            <div class=\"chip-label\">${key}: ${attributeParams[key]}</div>\n            <a href=\"#\" class=\"chip-delete\" @click=\"${deleteChipClick}\" data-id=\"${key}\"></a>\n          </div>\n        `)}\n\n      </div>\n      <div class=\"col-50 filter-button\">\n        \n        <a href=\"#\" data-popup=\".filter-popup\" class=\"popup-open\">Filters (${Object.keys(attributeParams).length})</a>\n\n        <div class=\"popup filter-popup\">\n          <div class=\"view\">\n            <div class=\"page\">\n              <div class=\"navbar\">\n                <div class=\"navbar-bg\"></div>\n                <div class=\"navbar-inner\">\n                  <div class=\"title\">Filters</div>\n                  <div class=\"right\">\n                    <!-- Link to close popup -->\n                    <a class=\"link popup-close\">Close</a>\n                  </div>\n                </div>\n              </div>\n              <div class=\"page-content\">\n\n                <div class=\"list\">\n                  <ul>\n                    ${attributeOptions?.map( ao => $h`\n                      <li class=\"item-content item-input\">\n                        <div class=\"item-inner\">\n                          <div class=\"item-title item-label\">${ao.traitType}</div>\n                          <div class=\"item-input-wrap input-dropdown-wrap\">\n                            <select name=\"${ao.traitType}\" @change=\"${attributeChange}\">\n                              <option selected ></option>\n                              ${ao.values?.map( v => $h`\n                                ${v.value == attributeParams[ao.traitType] ? $h`\n                                  <option value=\"${v.value}\" selected>${v.value} (${v.count})</option>\n                                ` : $h`\n                                  <option value=\"${v.value}\">${v.value} (${v.count})</option>\n                                `} \n                              `)}\n                            </select>\n                          </div>\n                        </div>\n                      </li>\n                    `)}\n                  </ul>\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n    </div>\n\n\n\n\n  </div>\n\n\n\n\n\n\n`\n    }\n    ;\n}\nframework7Component.id = '5f6eb7afe2';\nframework7Component.style = `\n\n.item-content.attribute-select {\n  width: 175px;\n  display: inline-block;\n}\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let totalItems;\n  let totalMatches;\n  document.addEventListener('explore-total-info-changed', async e => {\n    totalItems = e.totalItems;\n    totalMatches = e.totalMatches;\n    await $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n  <div class=\"block-title block-title-small\">\n\n    ${totalMatches ? $h`\n\n      ${totalMatches != totalItems ? $h`\n        Showing ${totalMatches} results (${totalItems} total)\n      ` : $h`\n        Showing 1 - ${totalItems} results  \n      `}\n\n    ` : $h`<span/>`}\n\n  </div>\n\n`\n    }\n    ;\n}\nframework7Component.id = '93c51ffee1';\nframework7Component.style = `\n\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let hasProvider = false;\n  let mintingViewModel;\n  let baseURL = props.baseurl;\n  const link = href => {\n    return `${baseURL + href}`;\n  };\n  app.on('minting-view-model-updated', function (m) {\n    mintingViewModel = m;\n    $update();\n  });\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\r\n\r\n  <div class=\"card card-header-divider\">\r\n    <div class=\"card-header\">Mint NFTs</div>\r\n    <div class=\"card-content card-content-padding\">\r\n\r\n      ${mintingViewModel ? $h`\r\n        <p>\r\n          <strong>Total Minted:</strong> ${mintingViewModel.totalMinted} of ${mintingViewModel.totalSupply}\r\n        </p>\r\n\r\n        <a href=\"${link('mint.html')}\" class=\"link\">Mint NFTs</a>\r\n\r\n      ` : $h`\r\n        Minting information unavailable. \r\n        <p>Note: Use a web browser with wallet support to see NFT information.</p>\r\n      `}\r\n\r\n\r\n    </div>\r\n  </div>\r\n\r\n`\n    }\n    ;\n}\nframework7Component.id = '244d47ccb2';\nframework7Component.style = `\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let walletService = globalThis.container.get(\"WalletService\");\n  let mintWebService = globalThis.container.get(\"MintWebService\");\n  let transactionWebService = globalThis.container.get(\"TransactionWebService\");\n  let baseURI = globalThis.container.get(\"baseURI\")();\n  const link = href => {\n    return baseURI + href;\n  };\n  let largestSales = props.largest_sales;\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"block block-strong inset largest-sales\">\n                    \n      ${largestSales?.sales?.map( (sale, index) => $h`\n        <div class=\"margin-bottom\">\n\n          <div class=\"rank\">#${index+1}</div>\n\n          <div class=\"square\">\n            <a href=\"${link(`t/${sale.tokenId}`)}\" class=\"item-link\">\n              <img src=\"${link(`backup/export/images/${largestSales.rowItemViewModels[sale.tokenId].coverImageId}.${largestSales.rowItemViewModels[sale.tokenId].coverImageGenerated ? 'svg' : 'jpg'}`)}\" alt=\"${sale.tokenId}\" height=\"125\" width=\"125\"/>\n            </a>\n          </div>\n\n          <div class=\"sale-info margin-top\">\n            <a href=\"${link(`t/${sale.tokenId}`)}\" class=\"item-link\">${largestSales.rowItemViewModels[sale.tokenId].title}</a><br />\n            ${new Intl.NumberFormat('en-US').format(sale.ethValue)} ETH (${transactionWebService.abbreviateDollars(sale.usdValue, 2)})\n            <div class=\"date\">${dayjs(sale.date).format('LL')}</div>\n          </div>\n\n        </div>\n      `)}\n      </div>\n\n  \n`\n    }\n    ;\n}\nframework7Component.id = '46dfde44c8';\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\n// create local component\nconst Transfer = (props, {\n  $h\n}) => {\n  let walletService = globalThis.container.get(\"WalletService\");\n  let transactionWebService = globalThis.container.get(\"TransactionWebService\");\n  const link = href => {\n    return `${baseURI + href}`;\n  };\n  const imageLink = rowItemViewModel => {\n    if (!rowItemViewModel) return;\n    if (rowItemViewModel?.coverImageGenerated) {\n      return link('backup/export/images/' + rowItemViewModel.coverImageId + \".svg\");\n    }\n    return link('backup/generated/images/50x50/' + rowItemViewModel.coverImageId + \".webp\");\n  };\n  let transaction = props.transaction;\n  let event = props.event;\n  let baseURI = props.base_uri;\n  let rowItemViewModels = props.row_item_view_models;\n  let index = props.index;\n  return () => $h`\n    \n        <tr ${index % 2 == 0 ? 'class=\"alt-row\"' : ''}>\n\n          <td class=\"image\">\n            <a href=\"${baseURI}t/${event.tokenId}\">\n              <img src=\"${imageLink(rowItemViewModels[event.tokenId])}\" class=\"latest-img\" alt=\"${rowItemViewModels[event.tokenId]?.title}\" height=\"50\" width=\"50\" alt=\"Item cover image\"/> \n            </a>\n          </td>\n\n          <td class=\"label-cell medium-only\">\n\n            <a href=\"${baseURI}t/${event.tokenId}\" class=\"title\">\n              ${rowItemViewModels[event.tokenId]?.title}            \n            </a>\n\n          </td>\n          <td>\n            ${event.isMint ? $h`\n              <a href=\"https://etherscan.io/tx/${transaction._id}\" class=\"external\" target=\"_blank\">Mint</a>\n            ` : $h`\n\n              ${transaction?.transactionValue?.markets && Object.keys(transaction?.transactionValue?.markets).length > 0 ? $h`\n                <a href=\"https://etherscan.io/tx/${transaction._id}\" class=\"external\" target=\"_blank\">Sold</a> on ${Array.from(Object.keys(transaction.transactionValue?.markets).map(k => k)).join(\", \")} ${transaction.transactionValue?.aggregator ? ' / ' + transaction.transactionValue.aggregator : ''}\n\n              ` : $h`\n                <a href=\"https://etherscan.io/tx/${transaction._id}\" class=\"external\" target=\"_blank\">${event.event}</a>\n              `}\n              \n            `}\n\n            <p class=\"date\">${dayjs(transaction.timestamp * 1000).fromNow()}</p>\n          </td>\n\n          <td class=\"numeric-cell\">\n            \n            <span class=\"eth-value\">${transaction.transactionValue?.tokenPrice[event.tokenId]?.price.toFixed(5)} ${transaction.transactionValue?.tokenPrice[event.tokenId]?.currency}</span>\n            ${transaction.transactionValue?.tokenPrice[event.tokenId]?.usdValue ? $h`\n              <br />\n              <span class=\"dollar-value\">${transactionWebService.abbreviateDollars(transaction.transactionValue?.tokenPrice[event.tokenId]?.usdValue, 2)}</span>\n            ` : $h` `}\n\n           </td>\n          <td class=\"numeric-cell medium-only\">\n            <a href=\"${baseURI}u/?address=${event.fromAddress}\" class=\"${event.fromAddress == transaction.from ? 'is-from' : ''}\">\n                  ${getDisplayAddress(event.fromAddress)}\n            </a> <span class=\"f7-icons\">arrow_right</span>\n\n            <a href=\"${baseURI}u/?address=${event.toAddress}\" class=\"${event.toAddress == transaction.from ? 'is-from' : ''}\">\n              ${getDisplayAddress(event.toAddress)}\n            </a>\n\n          </td>\n        </tr>\n    `;\n};\nconst Approval = (props, {\n  $h\n}) => {\n  let walletService = globalThis.container.get(\"WalletService\");\n  let transactionWebService = globalThis.container.get(\"TransactionWebService\");\n  const link = href => {\n    return `${baseURI + href}`;\n  };\n  const imageLink = rowItemViewModel => {\n    if (rowItemViewModel.coverImageGenerated) {\n      return link('backup/export/images/' + rowItemViewModel.coverImageId + \".svg\");\n    }\n    return link('backup/generated/images/50x50/' + rowItemViewModel.coverImageId + \".webp\");\n  };\n  let transaction = props.transaction;\n  let event = props.event;\n  let baseURI = props.base_uri;\n  let rowItemViewModels = props.row_item_view_models;\n  let index = props.index;\n  let owner = event?.namedArgs?.owner;\n  let approved = event?.namedArgs?.approved;\n  let from = transaction?.from;\n  return () => $h`\n      <tr class=\"${index % 2 == 0 ? \"alt-row\" : ''}\">\n\n          <td class=\"image\">\n            <a href=\"${baseURI}t/${event.tokenId}\">\n              <img src=\"${imageLink(rowItemViewModels[event.tokenId])}\" class=\"latest-img\" alt=\"${rowItemViewModels[event.tokenId].title}\" height=\"40\" width=\"40\" alt=\"Item cover image\" /> \n            </a>\n          </td>\n\n          <td class=\"label-cell medium-only\">\n\n            <a href=\"${baseURI}t/${event.tokenId}\" class=\"title\">\n              ${rowItemViewModels[event.tokenId].title}            \n            </a>\n\n            \n          </td>\n          <td>\n            <a href=\"https://etherscan.io/tx/${transaction._id}\" class=\"external\" target=\"_blank\">${event.event}</a> <br />\n            \n            <p class=\"date\">${dayjs(transaction.timestamp * 1000).fromNow()}</p>\n          </td>\n\n          <td class=\"numeric-cell\"></td>\n          <td class=\"medium-only numeric-cell\">\n            <a href=\"#\">${approved}</a>\n          </td>\n        </tr>\n    `;\n};\nconst ApprovalForAll = (props, {\n  $h\n}) => {\n  let walletService = globalThis.container.get(\"WalletService\");\n  let transactionWebService = globalThis.container.get(\"TransactionWebService\");\n  let transaction = props.transaction;\n  let event = props.event;\n  let baseURI = props.base_uri;\n  let index = props.index;\n  return () => $h`\n        <tr class=\"${index % 2 == 0 ? \"alt-row\" : ''}\">\n\n          <td class=\"image\">\n            ${event.namedArgs.approved ? $h`🟢` : $h`🔴`}\n          </td>\n\n          <td class=\"label-cell medium-only\">\n            \n          </td>\n          <td>\n             <a href=\"https://etherscan.io/tx/${transaction._id}\" class=\"external\" target=\"_blank\">${event.event}</a>  <br />\n\n             <p class=\"date\">${dayjs(transaction.timestamp * 1000).fromNow()}</p>\n          </td>\n\n          <td class=\"numeric-cell\"></td>\n          <td class=\"medium-only numeric-cell\">\n            <a href=\"${baseURI}u/?address=${event.namedArgs.owner}\" class=\"${event.namedArgs.owner == transaction.from ? 'is-from' : ''}\">${getDisplayAddress(event.namedArgs.owner)}</a> \n            <span class=\"f7-icons\">arrow_right</span>\n            <a href=\"${baseURI}u/?address=${event.namedArgs.operator}\" class=\"${event.namedArgs?.operator == transaction.from ? 'is-from' : ''}\">${getDisplayAddress(event.namedArgs.operator)}</a>\n          </td>\n\n        </tr>\n    `;\n};\nconst getDisplayAddress = address => {\n  let walletService = globalThis.container.get(\"WalletService\");\n  if (transactionsViewModel?.ens && transactionsViewModel.ens[address]) return transactionsViewModel.ens[address];\n  return walletService.truncateEthAddress(address);\n};\nlet transactionsViewModel;\nlet handlerBody;\nlet handler = async e => {\n  return handlerBody(e);\n};\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let walletService = globalThis.container.get(\"WalletService\");\n  let baseURI = globalThis.container.get(\"baseURI\")();\n  transactionsViewModel = props.transactions;\n  let rowItemViewModels = props.items;\n  let tokenId = props.token;\n  handlerBody = async e => {\n    transactionsViewModel = e.transactionsViewModel;\n    await $update();\n  };\n\n  // handle event\n  document.removeEventListener('transactions-updated', handler);\n  document.addEventListener('transactions-updated', handler);\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\r\n  \r\n  <div class=\"card data-table\">\r\n\r\n    <slot></slot>\r\n\r\n    <div class=\"card-content\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th class=\"medium-only\" colspan=\"2\" style=\"width:175px;\">Item</th>\r\n            <th>Event</th>\r\n            <th class=\"numeric-cell\">Price</th>\r\n            <th class=\"numeric-cell medium-only\">From/To</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          ${transactionsViewModel?.transactions.map( (transaction, index) => $h`\r\n  \r\n            ${transaction.events?.map(processedEvent => $h`\r\n  \r\n              ${processedEvent.event == \"Approval\" && (!tokenId || processedEvent?.tokenId == tokenId) ? $h`\r\n                <${Approval} transaction=${transaction.transaction} event=${processedEvent} base_uri=${baseURI} row_item_view_models=${rowItemViewModels} index=\"${index}\" />\r\n              ` : $h` `}\r\n          \r\n              ${processedEvent.event == \"Transfer\" && (!tokenId || processedEvent?.tokenId == tokenId) ? $h`\r\n                <${Transfer} transaction=${transaction.transaction} event=${processedEvent} base_uri=${baseURI} row_item_view_models=${rowItemViewModels} index=\"${index}\"/>\r\n              ` : $h` `}\r\n          \r\n              ${processedEvent.event == \"ApprovalForAll\" && (!tokenId || processedEvent?.tokenId == tokenId) ? $h`\r\n                <${ApprovalForAll} transaction=${transaction.transaction} event=${processedEvent} base_uri=${baseURI} index=\"${index}\"/>\r\n              ` : $h` `}\r\n          \r\n            `)}\r\n  \r\n  \r\n          `)}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n  </div>\r\n\r\n`\n    }\n    ;\n}\nframework7Component.id = '92c93c6ed1';\nframework7Component.style = `\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let transactionWebService = globalThis.container.get(\"TransactionWebService\");\n  let walletService = globalThis.container.get(\"WalletService\");\n  let baseURI = globalThis.container.get(\"baseURI\")();\n  let tokenOwners = props.token_owners;\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\r\n  \r\n  <tbody>\r\n                                    \r\n    ${tokenOwners?.map(u => $h`\r\n        <tr>\r\n            <td class=\"label-cell\">\r\n                ${u.rank}\r\n            </td>\r\n\r\n            <td class=\"address-cell\">\r\n\r\n                ${u.ensName ? $h`\r\n                    <a href=\"${baseURI}u/?address=${u._id}\">${u.ensName}</a>\r\n                ` : $h`\r\n                    <a href=\"${baseURI}u/?address=${u._id}\">${u._id ? walletService.truncateEthAddress(u._id) : ' '}</a>\r\n                `} \r\n\r\n            </td>\r\n\r\n\r\n            <td class=\"numeric-cell\">\r\n                ${u.count}\r\n            </td>\r\n\r\n            <td class=\"numeric-cell\">\r\n                <span class=\"eth-value\">${new Intl.NumberFormat('en-US').format(u.salesReport?.buys?.ethValue ? u.salesReport?.buys?.ethValue : 0)} ETH</span> <br />\r\n                <span class=\"dollar-value\">${transactionWebService.abbreviateDollars(u.salesReport?.buys?.usdValue ? u.salesReport?.buys?.usdValue : 0, 2)}</span>\r\n            </td>\r\n\r\n            <td class=\"numeric-cell\">\r\n                <span class=\"eth-value\">${new Intl.NumberFormat('en-US').format(u.salesReport?.sales?.ethValue ? u.salesReport?.sales?.ethValue : 0)} ETH</span> <br />\r\n                <span class=\"dollar-value\">${transactionWebService.abbreviateDollars(u.salesReport?.sales?.usdValue ? u.salesReport?.sales?.usdValue : 0, 2)}</span>\r\n            </td>\r\n\r\n            <td class=\"text-cell\">\r\n                ${u.lastActive ? dayjs(u.lastActive).fromNow() : \"\"}\r\n            </td>\r\n\r\n\r\n        </tr>\r\n    \r\n    `)}\r\n    </tbody>\r\n\r\n`\n    }\n    ;\n}\nframework7Component.id = '51e7e9cf92';\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let itemWebService = globalThis.container.get(\"ItemWebService\");\n  let baseURI = globalThis.container.get(\"baseURI\")();\n  const link = href => {\n    return baseURI + href;\n  };\n  let results;\n  let searching = false;\n  const searchbarSubmit = async e => {\n    e.preventDefault();\n    $('.searchbar input').blur();\n    $f7.preloader.showIn('.cards-list');\n    searching = true;\n    $update();\n    results = await itemWebService.query($('.searchbar input').val());\n    searching = false;\n    $update();\n    $f7.preloader.hideIn('.cards-list');\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\r\n\r\n  <div class=\"margin-top\">\r\n\r\n\r\n\r\n    <div class=\"block block-strong block-search\">\r\n\r\n      <form class=\"searchbar\" @submit=\"${searchbarSubmit}\">\r\n        <div class=\"searchbar-inner\">\r\n          <div class=\"searchbar-input-wrap\">\r\n            <input type=\"search\" placeholder=\"Enter a search term\" />\r\n            <i class=\"searchbar-icon\"></i>\r\n            <span class=\"input-clear-button\"></span>\r\n          </div>\r\n          <span class=\"searchbar-disable-button\">Cancel</span>\r\n        </div>\r\n      </form>\r\n\r\n      Note: All searches are local. The first search will take longer because it has to build a local search index.\r\n    </div>\r\n\r\n\r\n    <div class=\"list cards-list\">\r\n  \r\n      <ul>\r\n\r\n        ${results ? $h`\r\n          \r\n          ${ results?.length > 0 ? $h`\r\n          \r\n            ${results?.map( (itemViewModel) => $h`\r\n              <li class=\"card item-card\">\r\n                <div class=\"card-content card-content-padding\">\r\n                  ${itemViewModel.item.excerpt ? $h`\r\n                  \r\n                    <div class=\"item-preview\">\r\n    \r\n                      <div class=\"left\">\r\n                        \r\n                          <a class=\"title\" href=\"${link(`token-${itemViewModel.item.tokenId}.html`)}\">\r\n                              ${itemViewModel.item.title}\r\n                              <span class=\"channel-show-token-id\">#${itemViewModel.item.tokenId}</span>\r\n                          </a>\r\n    \r\n                          <p innerHTML=\"${itemViewModel.item.excerpt}\">\r\n                              \r\n                          </p>\r\n    \r\n                      </div>\r\n    \r\n                      ${itemViewModel.coverImage ? $h`\r\n                        <div class=\"right\">\r\n                          <a class=\"title\" href=\"${link(`token-${itemViewModel.item.tokenId}.html`)}\">\r\n                            <img src=\"backup/export/images/${itemViewModel.coverImage._id}.${itemViewModel.coverImage.generated ? 'svg' : 'jpg'}\" alt=\"Item cover image\" />\r\n                          </a>\r\n                        </div>\r\n                      ` : $h`<span />`}\r\n    \r\n                    </div>\r\n    \r\n    \r\n                  ` : $h`\r\n                  \r\n                    <div class=\"item-preview\">\r\n                      <div class=\"left\">\r\n    \r\n                          <a class=\"title\" href=\"${link(`t/${itemViewModel.item.tokenId}`)}\">\r\n                            ${itemViewModel.item.title} <span class=\"channel-show-token-id\">#${itemViewModel.item.tokenId}</span>\r\n                          </a>\r\n    \r\n                          <div class=\"content\" innerHTML=\"${itemViewModel.item.contentHTML}\"></div>\r\n    \r\n                      </div>\r\n                    </div>\r\n                  \r\n                  `}\r\n    \r\n                </div>\r\n              </li>                        \r\n            `)}\r\n    \r\n          ` : $h`\r\n              <li class=\"card item-card\">\r\n                <div class=\"card-content card-content-padding\">\r\n                  No results found\r\n                </div>\r\n              </li>\r\n          `}\r\n          \r\n          \r\n        ` :$h`<span />`}\r\n  \r\n\r\n  \r\n      </ul>\r\n  \r\n    </div>\r\n\r\n  </div>\r\n\r\n`\n    }\n    ;\n}\nframework7Component.id = 'fa3bf52a89';\nframework7Component.style = `\n\n.block-search {\n  background: #f1f1f1;\n  font-size: 14px;\n}\n\n`;\nexport default framework7Component;","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nfunction framework7Component(props, {\n  $,\n  $on,\n  $f7,\n  $update\n}) {\n  let baseURL = props.baseurl;\n  let items = props.items;\n  const link = href => {\n    return `${baseURL + href}`;\n  };\n  return function ($ctx) {\n      var $ = $ctx.$;\n      var $h = $ctx.$h;\n      var $root = $ctx.$root;\n      var $f7 = $ctx.$f7;\n      var $f7route = $ctx.$f7route;\n      var $f7router = $ctx.$f7router;\n      var $theme = $ctx.$theme;\n      var $update = $ctx.$update;\n      var $store = $ctx.$store;\n\n      return $h`\n\n    <div class=\"row\" id=\"item-list\">\n                            \n        ${items?.length > 0 ? $h`\n                                    \n            ${items.map(itemViewModel => $h`\n                <div class=\"card col-100 large-25\">\n                    <div class=\"card-content\">\n                        <div class=\"card-content card-content-padding\">\n                            <div class=\"square\">\n                                <a href=\"${link(`token-${itemViewModel.item.tokenId}.html`)}\">\n                                    <img src=\"${link(`backup/export/images/${itemViewModel.coverImage._id}`)}.${itemViewModel.coverImage.generated ? 'svg' : 'jpg'}\" alt=\"Item cover image\" />\n                                </a>\n                            </div>\n\n                            <div class=\"preview-info\">\n                                <a href=\"\">${itemViewModel.item.title ? itemViewModel.item.title + ' ' : ''} #${itemViewModel.item.tokenId}</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `)}\n\n\n        ` : $h`<span />`}             \n                                            \n    </div>  \n  \n`\n    }\n    ;\n}\nframework7Component.id = 'eb57b74331';\nframework7Component.style = `\n`;\nexport default framework7Component;","import { inject, injectable } from \"inversify\"\r\nimport { WalletService } from \"./wallet-service.js\"\r\nimport { getAddress, Contract } from \"ethers\"\r\n\r\n\r\n@injectable()\r\nclass WalletServiceImpl implements WalletService {\r\n\r\n  public wallet: any\r\n  public address: any\r\n  public ethersContracts:any = {}\r\n\r\n  public provider \r\n\r\n  constructor(\r\n    @inject(\"contracts\") private contracts:Function,\r\n    @inject(\"provider\") private getProvider:Function,\r\n    @inject(\"framework7\") private $f7\r\n  ) {}\r\n\r\n  async initProvider() {\r\n\r\n    this.provider = await this.getProvider()\r\n\r\n    globalThis.ethereum?.on('accountsChanged', async (accounts) => {\r\n          \r\n      delete this.address\r\n\r\n      if (accounts?.length > 0) {\r\n        await this.initWallet()\r\n      }\r\n\r\n      this.$f7.views.main.router.refreshPage()\r\n\r\n    })\r\n\r\n    globalThis.ethereum?.on('networkChanged', async (networkId) => {\r\n      this.ethersContracts = {}\r\n      this.provider = await this.getProvider()\r\n\r\n      await this.initWallet()\r\n\r\n    })\r\n\r\n\r\n  }\r\n\r\n  async initWallet() {\r\n\r\n    console.log('Init wallet')\r\n\r\n    delete this.address\r\n\r\n    if (!this.provider) {\r\n      await this.initProvider()\r\n    }\r\n    \r\n    //@ts-ignore\r\n    let accounts = await this.provider.send(\"eth_accounts\", [])\r\n\r\n    if (accounts?.length > 0) {\r\n      // this.address = accounts[0]\r\n      return this.connect()\r\n    }\r\n    \r\n    console.log(\"Init wallet complete\") \r\n\r\n  }\r\n\r\n  async connect() {\r\n    \r\n    console.log(\"Connect wallet\")\r\n\r\n    await this.provider.send(\"eth_requestAccounts\", []);\r\n\r\n    this.wallet = await this.provider.getSigner()\r\n    this.address = await this.getAddress()\r\n    \r\n    console.log(`Wallet ${this.address} connected`) \r\n\r\n  }\r\n\r\n  async getAddress() {\r\n\r\n      if (!this.provider) return\r\n\r\n      let accounts = await this.provider.send(\"eth_accounts\", []);\r\n\r\n      if (accounts?.length > 0) {\r\n        return getAddress(accounts[0]) \r\n      }\r\n\r\n  }\r\n\r\n  async getWallet() {\r\n    return this.provider.getSigner()\r\n  }\r\n\r\n  async getContract(name:string)  {\r\n\r\n    let contracts = await this.contracts()\r\n\r\n    //Initialize and return\r\n    let c = contracts[name]\r\n    this.ethersContracts[name] = new Contract(c.address, c.abi, this.wallet ? this.wallet : this.provider)\r\n\r\n    // console.log(`Getting contract ${name}`)\r\n\r\n    return this.ethersContracts[name]\r\n  }\r\n\r\n  truncateEthAddress(address) : string {\r\n    if (!address) return\r\n    // Captures 0x + 4 characters, then the last 4 characters.\r\n    const truncateRegex = /^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/\r\n    const match = address.match(truncateRegex)\r\n    if (!match) return address\r\n    return `${match[1]}…${match[2]}`\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n    WalletServiceImpl\r\n}\r\n\r\n","\r\nimport { inject, injectable } from 'inversify';\r\n\r\n\r\n@injectable()\r\nclass DatabaseService {\r\n\r\n    dbCache = {}\r\n\r\n    constructor(\r\n        @inject('baseURI') private baseURI:Function,\r\n        @inject('hostname') private hostname:Function,\r\n        @inject('PouchDB') private PouchDB,\r\n        @inject('channelId') private channelId:Function,\r\n\r\n    ) {}\r\n\r\n    async getDatabase(config:DatabaseConfig) {\r\n\r\n        let PouchDB = await this.PouchDB()\r\n\r\n\r\n        const fullName = `./pouch/${this.channelId()}/${config.name}`\r\n\r\n        if (this.dbCache[fullName]) return this.dbCache[fullName]\r\n\r\n        //Create or open database\r\n        this.dbCache[fullName] = new PouchDB(fullName)\r\n\r\n        const details = await this.dbCache[fullName].info()\r\n\r\n        //If it's empty build the indexes\r\n        if (details.doc_count == 0 && details.update_seq == 0) {\r\n\r\n            //Create indexes\r\n            if (config.changesets) {\r\n\r\n                console.log(`Creating indexes for ${fullName}`)\r\n\r\n                let localChangesets:LocalChangeset = { \r\n                    _id: \"_local/changesets\",\r\n                    ids: [] \r\n                }\r\n\r\n                for (let changeset of config.changesets) {\r\n                    await changeset.changeset(this.dbCache[fullName])\r\n                    localChangesets.ids.push(changeset.id)\r\n                    console.log(`New changeset detected...${changeset.id}`)\r\n                }\r\n\r\n                //Mark changesets as run\r\n                await this.dbCache[fullName].put(localChangesets)\r\n\r\n                \r\n            }\r\n\r\n            //Load initial records\r\n            if (config.initialRecords) {\r\n                await this.loadInitialRecords(config, fullName)\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            //Otherwise check if each changeset has been applied and if not then apply it.\r\n            if (config.changesets) {\r\n\r\n                let localChangesets:LocalChangeset \r\n\r\n                try {\r\n                    localChangesets = await this.dbCache[fullName].get(\"_local/changesets\")\r\n                } catch(ex) {}\r\n\r\n                if (!localChangesets) {\r\n                    localChangesets = { \r\n                        _id: \"_local/changesets\",\r\n                        ids: [] \r\n                    }\r\n                }\r\n\r\n\r\n                let updated = false\r\n\r\n                for (let changeset of config.changesets) {\r\n                    \r\n                    //If it hasn't been run then run it.\r\n                    if (!localChangesets.ids.includes(changeset.id)) {\r\n\r\n                        try {\r\n                            //Execute the changes. This could fail if the changes have actually been applied but it wasn't marked. \r\n                            //But in that scenario we just accept the failure and mark it applied. \r\n                            await changeset.changeset(this.dbCache[fullName])\r\n                        } catch(ex) { }\r\n                        \r\n                        \r\n                        localChangesets.ids.push(changeset.id)\r\n                        \r\n                        updated = true\r\n                        \r\n                        console.log(`New changeset detected...${changeset.id}`)\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                if (updated) {\r\n                    console.log(`Saving changeset log...`, localChangesets)\r\n                    await this.dbCache[fullName].put(localChangesets)\r\n                }\r\n\r\n                \r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        return this.dbCache[fullName]\r\n\r\n    }\r\n\r\n    private async loadInitialRecords(config: DatabaseConfig, fullName: string) {\r\n\r\n        let response\r\n\r\n        if (config.initialRecordsPath) {\r\n            response = await fetch(`${this.hostname()}${this.baseURI()}${config.initialRecordsPath}`)\r\n        } else {\r\n            response = await fetch(`${this.hostname()}${this.baseURI()}backup/export/backup/${config.name}.json`)\r\n        }\r\n\r\n        let initialRecords = await response.json()\r\n\r\n\r\n        if (initialRecords?.length > 0) {\r\n            console.log(`Loading ${initialRecords?.length} initial records for ${fullName}`);\r\n            await this.dbCache[fullName].bulkDocs(initialRecords);\r\n        }\r\n\r\n    }\r\n}\r\n\r\ninterface DatabaseConfig {\r\n    name:string\r\n    changesets?:Changeset[]\r\n    initialRecords?:boolean\r\n    initialRecordsPath?:string\r\n}\r\n\r\ninterface Changeset {\r\n    id:string\r\n    changeset(db): Promise<void>\r\n}\r\n\r\ninterface LocalChangeset {\r\n    _id:string\r\n    ids:string[]\r\n}\r\n\r\nexport {\r\n    DatabaseService, Changeset\r\n}\r\n","import axios from \"axios\"\r\nimport {  inject, injectable } from \"inversify\"\r\nimport { Channel } from \"../../dto/channel.js\"\r\nimport { Changeset, DatabaseService } from \"../../service/core/database-service.js\"\r\nimport { ChannelRepository } from \"../channel-repository.js\"\r\n\r\n@injectable()\r\nclass ChannelRepositoryBrowserImpl implements ChannelRepository {\r\n    \r\n    changesets:Changeset[] = [{\r\n        id: '0',\r\n        changeset: async (db) => {\r\n            //Create indexes\r\n            await db.createIndex({ index: { fields: ['dateCreated'] } })\r\n            await db.createIndex({ index: { fields: ['lastUpdated'] } })\r\n            \r\n        }\r\n    }]\r\n\r\n\r\n    db:any\r\n    dbName:string = \"channels\"\r\n\r\n    @inject('DatabaseService')\r\n    private databaseService: DatabaseService\r\n\r\n    constructor(\r\n        @inject(\"baseURI\") private baseURI:Function,\r\n        @inject(\"hostname\") private hostname:Function\r\n    ) {}\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            changesets: this.changesets,\r\n            initialRecords: true\r\n        })\r\n    }\r\n\r\n\r\n    async get(): Promise<Channel> {        \r\n        \r\n        let channels = await this.db.allDocs({\r\n            include_docs: true\r\n        })\r\n\r\n        let channel:Channel \r\n\r\n        //Find the first actual channel (skip design)\r\n        for (let c of channels.rows) {\r\n            if (c.doc.dateCreated) channel = c.doc\r\n        }\r\n\r\n        // console.log(channels)\r\n\r\n        // let channel:Channel = channels.rows[0].doc\r\n        // console.log(channel)\r\n\r\n        const contractResponse = await axios.get(`${this.hostname()}${this.baseURI()}backup/contract/contract.json`)\r\n        // console.log(contractResponse)\r\n\r\n        if (contractResponse?.data) {\r\n            channel.contractAddress = contractResponse.data.contractAddress\r\n        }\r\n\r\n        return channel\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    ChannelRepositoryBrowserImpl\r\n}","import { AttributeOptions, AttributeSelection } from \"./attribute.js\"\n\n\nclass Item {    \n    _id?:string\n    _rev?:string\n    channelId?:string\n    tokenId?:number\n    title?:string \n    link?:string \n    description?:string\n    content?:any\n    contentHTML?:string\n    excerpt?:string\n    authorId?:string\n    category?:string[]\n    attributeSelections?: AttributeSelection[] \n    coverImageId?:string\n    coverImageAsAnimation?:string \n    originalJSONMetadataId?:any\n    animationId?:string\n    datePublished?:string\n    dateCreated?:string\n    lastUpdated?:string\n}\n\n\nexport { Item }","import { inject, injectable } from \"inversify\"\r\nimport { Item } from \"../../dto/item.js\"\r\nimport { ItemRepository, CHUNK_SIZE } from \"./../item-repository.js\"\r\nimport { Changeset, DatabaseService } from \"../../service/core/database-service.js\"\r\nimport axios from \"axios\"\r\nimport { ItemPage, RowItemViewModel } from \"../../dto/item-page.js\"\r\n\r\n\r\n\r\n\r\n@injectable()\r\nclass ItemRepositoryBrowserImpl implements ItemRepository {\r\n\r\n    static CHUNK_SIZE = CHUNK_SIZE\r\n\r\n    changesets:Changeset[] = [\r\n        {\r\n            id: '0',\r\n            changeset: async (db) => {\r\n\r\n                await db.createIndex({\r\n                    index: {\r\n                        fields: ['tokenId']\r\n                    }\r\n                })\r\n        \r\n        \r\n                // await db.search({\r\n                //     build: true,\r\n                //     fields: ['contentHTML', 'title', 'tokenId']\r\n                // })\r\n        \r\n                \r\n            }\r\n        }\r\n    ]\r\n\r\n    db:any\r\n    dbName:string = \"items\"\r\n    \r\n    @inject('DatabaseService')\r\n    private databaseService: DatabaseService\r\n    \r\n    constructor(\r\n        @inject(\"baseURI\") private baseURI:Function,\r\n        @inject(\"hostname\") private hostname:Function\r\n    ) {}\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            changesets: this.changesets,\r\n            initialRecords: true\r\n        })\r\n    }\r\n\r\n\r\n    async get(_id: string): Promise<Item> {\r\n        return Object.assign(new Item(), await this.db.get(_id))\r\n    }\r\n    \r\n\r\n\r\n    async put(item: Item) {\r\n        await this.db.put(item)\r\n    }\r\n\r\n    async list(skip: number, limit:number=CHUNK_SIZE): Promise<Item[]> {\r\n\r\n        let response = await this.db.find({\r\n            selector: {\r\n                tokenId: { $exists: true }\r\n            },\r\n            sort: [{ 'tokenId': 'asc' }],\r\n            limit: limit,\r\n            skip: skip\r\n        })\r\n\r\n        return response.docs\r\n\r\n    }\r\n\r\n    async getByTokenId(tokenId:number) : Promise<Item> {\r\n\r\n        let response = await this.db.find({\r\n            selector: {\r\n                tokenId: { $eq: tokenId },\r\n            },\r\n            limit: 1\r\n        })\r\n\r\n        if (response.docs?.length > 0) {\r\n            return response.docs[0]\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    async getByTokenIds(ids:number[]) : Promise<Item[]> {\r\n\r\n        let response = await this.db.find({\r\n            selector: {\r\n                tokenId: { $in: ids },\r\n            }\r\n        })\r\n\r\n        if (response.docs?.length > 0) {\r\n            return response.docs\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n\r\n    async getRowItemViewModelsByAttribute(traitType:string, value:string, pageNumber:number) : Promise<ItemPage> {\r\n\r\n        const escape = (s) => {\r\n            return s.replace(/[^a-z0-9]/gi, '_').toLowerCase()\r\n        }\r\n\r\n        let itemPage:ItemPage\r\n\r\n        const response = await axios.get(`${this.hostname()}${this.baseURI()}attributes/items/${escape(traitType)}/${escape(value)}/${pageNumber}.json`)\r\n        \r\n        itemPage = response.data\r\n\r\n        return itemPage\r\n    }\r\n\r\n    async getRowItemViewModelsByOwner(address:string, pageNumber:number) : Promise<ItemPage> {\r\n\r\n        let itemPage:ItemPage\r\n\r\n        const response = await axios.get(`${this.hostname()}${this.baseURI()}sync/tokenOwner/${address}/tokens/${pageNumber}.json`)\r\n        \r\n        itemPage = response.data\r\n\r\n        return itemPage\r\n    }\r\n\r\n    async getRowItemViewModelsByTokenIds(tokenIds:number[]) : Promise<RowItemViewModel[]> {\r\n\r\n        let items:RowItemViewModel[] = []\r\n\r\n        for (let tokenId of tokenIds) {\r\n            const response = await axios.get(`${this.hostname()}${this.baseURI()}t/${tokenId}/rowItemViewModel.json`)\r\n            items.push(response.data)\r\n        }\r\n\r\n        return items\r\n    }\r\n\r\n    async getRowItemViewModelsByTokenId(tokenId:number) : Promise<RowItemViewModel> {\r\n\r\n        const response = await axios.get(`${this.hostname()}${this.baseURI()}t/${tokenId}/rowItemViewModel.json`)\r\n        return response.data\r\n\r\n    }\r\n\r\n\r\n    \r\n    async listByTokenId(startTokenId:number, limit:number) : Promise<Item[]> {\r\n\r\n        let response = await this.db.find({\r\n            selector: {\r\n                tokenId: { $eq: startTokenId },\r\n            },\r\n            sort: [{ 'tokenId': 'desc' }],\r\n            limit: limit\r\n        })\r\n\r\n        return response.docs\r\n\r\n    }\r\n\r\n    async query(query:string) : Promise<Item[]> {\r\n\r\n        let response = await this.db.search({\r\n            query: query,\r\n            fields: ['contentHTML', 'title', 'tokenId'],\r\n            include_docs: true,\r\n            highlighting: true, \r\n            limit: CHUNK_SIZE\r\n        })\r\n\r\n\r\n        let rows = response.rows.map( row => {\r\n\r\n            if (row.highlighting.contentHTML) {\r\n                row.doc.contentHTML = row.highlighting.contentHTML\r\n            } \r\n\r\n            //Remove image tags\r\n            row.doc.contentHTML = row.doc.contentHTML.replace(/<img .*?>/g,\"\"); \r\n\r\n\r\n            return row.doc\r\n        })\r\n\r\n\r\n        return rows\r\n\r\n    }\r\n\r\n\r\n\r\n    async all(): Promise<Item[]> {\r\n        let response = await this.db.find({\r\n            selector: {\r\n                tokenId: { $exists: true }\r\n            },\r\n            sort: [{ 'tokenId': 'asc' }],\r\n            limit: 100000,\r\n            skip: 0\r\n        })\r\n\r\n        return response.docs\r\n    }\r\n\r\n\r\n    \r\n}\r\n\r\nexport {\r\n    ItemRepositoryBrowserImpl\r\n}\r\n\r\n\r\n","import { Item } from \"../dto/item.js\"\nimport { ItemPage, RowItemViewModel } from \"../dto/item-page.js\"\n\nlet CHUNK_SIZE = 10\n\ninterface ItemRepository {\n    get(_id:string): Promise<Item>\n    list(skip:number, limit?:number): Promise<Item[]>\n    getByTokenId(tokenId:number) : Promise<Item>\n    getByTokenIds(tokenIds:number[]) : Promise<Item[]>\n    getRowItemViewModelsByAttribute(traitType:string, value:string, pageNumber:number) : Promise<ItemPage>\n    getRowItemViewModelsByTokenIds(tokenIds:number[]) : Promise<RowItemViewModel[]>\n    getRowItemViewModelsByTokenId(tokenId:number) : Promise<RowItemViewModel>\n    query(query:string) : Promise<Item[]>\n    all() : Promise<Item[]>\n    listByTokenId(startTokenId:number, limit:number) : Promise<Item[]> \n    getRowItemViewModelsByOwner(address:string, pageNumber:number) : Promise<ItemPage> \n\n}\n\nexport {\n    ItemRepository, CHUNK_SIZE\n}\n","\nclass Author {\n\n  _id?: string\n  _rev?:string\n  walletAddress?: string\n  name?: string\n  description?: string\n  url?:string \n  coverPhotoId?: string\n  dateCreated?:string\n  lastUpdated?:string\n\n}\n\nexport {\n  Author\n}","import {  inject, injectable } from \"inversify\"\r\nimport { Author } from \"../../dto/author.js\"\r\nimport { DatabaseService } from \"../../service/core/database-service.js\"\r\nimport { AuthorRepository } from \"../author-repository.js\"\r\n\r\n@injectable()\r\nclass AuthorRepositoryBrowserImpl implements AuthorRepository {\r\n\r\n    db:any\r\n    dbName:string = \"authors\"\r\n\r\n    @inject('DatabaseService')\r\n    private databaseService: DatabaseService\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            initialRecords: true\r\n        })\r\n    }\r\n\r\n    constructor(\r\n    ) {}\r\n\r\n\r\n    async get(_id:string): Promise<Author> {        \r\n        return Object.assign(new Author(), await this.db.get(_id))\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    AuthorRepositoryBrowserImpl\r\n}","import { AttributeSelection } from \"./attribute.js\";\n\nclass NFTMetadata {\n\n    tokenId:string\n\n    name?:string\n    description?:string\n\n    image?:string\n    image_data?:string\n\n    external_url?:string \n    \n    attributes?:AttributeSelection[]\n\n    background_color?:string \n    animation_url?:string\n} \n\nexport {\n    NFTMetadata\n}","import axios from \"axios\"\nimport { inject, injectable } from \"inversify\"\nimport { NFTMetadata } from \"../../dto/nft-metadata.js\"\nimport { MetadataRepository } from \"../metadata-repository.js\"\n\n@injectable()\nclass MetadataRepositoryBrowserImpl implements MetadataRepository {\n\n    static CHUNK_SIZE = 10\n\n    constructor(\n        @inject('baseURI') private baseURI:Function,\n        @inject('hostname') private hostname:Function\n    ) {}\n\n    async get(tokenId: string): Promise<NFTMetadata> {\n        const response = await axios.get(`${this.hostname()}${this.baseURI()}backup/metadata/${tokenId}.json`)\n        return Object.assign(new NFTMetadata(), response.data)\n    }\n\n}\n\nexport {\n    MetadataRepositoryBrowserImpl\n}\n\n\n","class Image {\n    _id?:string\n    data?:any\n    cid?:string\n    buffer?:any\n    svg?:string \n    generated?:boolean\n}\n\nexport {\n    Image\n}","import {  inject, injectable } from \"inversify\"\r\nimport { Image } from \"../../dto/image.js\"\r\nimport { DatabaseService } from \"../../service/core/database-service.js\"\r\nimport { ImageRepository } from \"../image-repository.js\"\r\n\r\n@injectable()\r\nclass ImageRepositoryBrowserImpl implements ImageRepository {\r\n\r\n    db:any\r\n    dbName:string = \"images\"\r\n\r\n    @inject('DatabaseService')\r\n    private databaseService: DatabaseService\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            initialRecords: true\r\n        })\r\n    }\r\n\r\n    constructor(\r\n    ) {}\r\n\r\n\r\n    async get(_id:string): Promise<Image> {        \r\n        return Object.assign(new Image(), await this.db.get(_id))\r\n    }\r\n\r\n    async list() : Promise<Image[]> {\r\n        return //unimplemented\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport {\r\n    ImageRepositoryBrowserImpl\r\n}","\nclass Animation {\n    \n    _id?:string\n    _rev?:string \n    content?:string\n    cid?:string \n    dateCreated?:string\n}\n\nexport {\n    Animation\n}","import {  inject, injectable } from \"inversify\"\r\nimport { Animation } from \"../../dto/animation.js\"\r\nimport { DatabaseService } from \"../../service/core/database-service.js\"\r\nimport { AnimationRepository } from \"../animation-repository.js\"\r\n\r\n@injectable()\r\nclass AnimationRepositoryBrowserImpl implements AnimationRepository {\r\n\r\n    db:any\r\n    dbName:string = \"animations\"\r\n\r\n    @inject('DatabaseService')\r\n    private databaseService: DatabaseService\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            initialRecords: true\r\n        })\r\n    }\r\n\r\n    constructor(\r\n    ) {}\r\n\r\n\r\n    async get(_id:string): Promise<Animation> {        \r\n        return Object.assign(new Animation(), await this.db.get(_id))\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport {\r\n    AnimationRepositoryBrowserImpl\r\n}","\nclass StaticPage {\n  _id?: string\n  _rev?:string\n  channelId?:string\n  name?: string\n  slug?:string\n  content?:any\n  contentHTML?:string\n  contentMarkdown?:string\n  locations?:string[] \n  dateCreated?:string\n  lastUpdated?:string\n}\n\n\nexport {\n  StaticPage\n}","import { inject, injectable } from \"inversify\"\r\nimport { Changeset, DatabaseService } from \"../../service/core/database-service.js\"\r\n\r\nimport { StaticPageRepository } from \"../static-page-repository.js\"\r\nimport { StaticPage } from \"../../dto/static-page.js\"\r\n\r\n\r\n@injectable()\r\nclass StaticPageRepositoryBrowserImpl implements StaticPageRepository {\r\n\r\n    changesets:Changeset[] = [{\r\n        id: '0',\r\n        changeset: async (db) => {\r\n            //Create indexes\r\n            await db.createIndex({\r\n                index: {\r\n                    fields: ['channelId']\r\n                }\r\n            })\r\n            await db.createIndex({\r\n                index: {\r\n                    fields: ['dateCreated']\r\n                }\r\n            })\r\n            \r\n        }\r\n    }]\r\n\r\n\r\n\r\n    db:any\r\n    dbName:string = \"static-pages\"\r\n    \r\n    @inject('DatabaseService')\r\n    private databaseService: DatabaseService\r\n    \r\n    constructor() {}\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            changesets: this.changesets,\r\n            initialRecords: true\r\n        })\r\n    }\r\n\r\n\r\n    async get(_id: string): Promise<StaticPage> {\r\n        return Object.assign(new StaticPage(), await this.db.get(_id))\r\n    }\r\n\r\n    async listByLocation(location:string, skip:number): Promise<StaticPage[]> {\r\n\r\n        let response = await this.db.find({\r\n            selector: {\r\n                locations: { $all: [location] },\r\n                dateCreated: { $exists: true }\r\n            },\r\n            sort: [{ 'dateCreated': 'asc' }],\r\n            skip: skip\r\n        })\r\n\r\n        return response.docs\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    StaticPageRepositoryBrowserImpl\r\n}\r\n\r\n\r\n","import axios from \"axios\"\nimport { inject, injectable } from \"inversify\"\nimport { ItemPage } from \"../../dto/item-page.js\"\nimport { ItemPageRepository } from \"../item-page-repository.js\"\n\n@injectable()\nclass ItemPageRepositoryBrowserImpl implements ItemPageRepository {\n\n    constructor(\n        @inject(\"baseURI\") private baseURI:Function,\n        @inject(\"hostname\") private hostname:Function\n    ) {}\n\n    async get(pageNumber: number): Promise<ItemPage> {   \n\n        const response = await axios.get(`${this.hostname()}${this.baseURI()}itemPages/${pageNumber}.json`)\n            \n        return response.data\n    }\n\n}\n\nexport {\n    ItemPageRepositoryBrowserImpl\n}\n\n\n","class AttributeTotal {\n    _id?:string\n    traitType?:string\n    value?:string \n    count?:number \n    categoryPercent?:string\n    tokenIds?:number[]\n}\n\nexport { AttributeTotal }","import { inject, injectable } from \"inversify\"\nimport { AttributeTotal } from \"../../dto/attribute-total.js\"\nimport { DatabaseService } from \"../../service/core/database-service.js\"\nimport { AttributeTotalRepository } from \"../attribute-total-repository.js\"\n\n@injectable()\nclass AttributeTotalRepositoryBrowserImpl implements AttributeTotalRepository {\n\n    db:any\n    dbName:string = \"attribute-totals\"\n\n    @inject('DatabaseService')\n    private databaseService: DatabaseService\n\n    async load() {\n        this.db = await this.databaseService.getDatabase({\n            name: this.dbName,\n            initialRecords: true,\n            initialRecordsPath: 'attributeTotals.json'\n        })\n    }\n\n    constructor(\n    ) {}\n\n\n    async get(_id:string): Promise<AttributeTotal> {        \n        return Object.assign(new AttributeTotal(), await this.db.get(_id))\n    }\n\n    async getByIds(ids:string[]) : Promise<AttributeTotal[]> {\n\n        let results = await this.db.allDocs({\n            keys: ids,\n            include_docs: true\n        })\n\n        return results.rows?.map( d => d.doc)\n\n    }\n\n\n    async put(attributeTotal:AttributeTotal) : Promise<void> {\n        await this.db.put(attributeTotal)\n    }\n\n    async list(limit?:number, skip?:number) : Promise<AttributeTotal[]> {\n        \n        let response = await this.db.find({\n            selector: {\n                count: { $exists: true }\n            },\n            limit: limit,\n            skip: skip\n        })\n\n        return response.docs\n\n    }\n\n}\n\nexport {\n    AttributeTotalRepositoryBrowserImpl\n}\n\n\n","import { MinLength, ArrayNotEmpty, ArrayMinSize ,IsNotEmpty, Allow } from 'class-validator'\r\n\r\n\r\nclass ReaderSettings {\r\n\r\n    @Allow()\r\n    _id?:string\r\n    \r\n    @Allow()\r\n    _rev?:string\r\n\r\n    @Allow()\r\n    currentPage?:number\r\n    \r\n    @Allow()\r\n    lastPageJump?:number\r\n    \r\n    @Allow()\r\n    dateCreated?:string\r\n    \r\n    @Allow()\r\n    lastUpdated?:string\r\n  \r\n  }\r\n  \r\n  export {\r\n    ReaderSettings\r\n  }","import {  inject, injectable } from \"inversify\"\r\nimport { ReaderSettings } from \"../../dto/reader-settings.js\"\r\nimport { DatabaseService } from \"../../service/core/database-service.js\"\r\nimport { ReaderSettingsRepository } from \"../reader-settings-repository.js\"\r\n\r\n@injectable()\r\nclass ReaderSettingsRepositoryBrowserImpl implements ReaderSettingsRepository {\r\n\r\n    db:any\r\n    dbName:string = \"reader-settings\"\r\n\r\n    @inject('DatabaseService')\r\n    private databaseService: DatabaseService\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            initialRecords: false\r\n        })\r\n    }\r\n\r\n    constructor(\r\n    ) {}\r\n\r\n    async put(readerSettings:ReaderSettings): Promise<void> {     \r\n        \r\n        //Just gonna have one record\r\n        readerSettings._id = \"reader-settings\"\r\n        \r\n        await this.db.put(readerSettings)\r\n    }\r\n\r\n\r\n    async get(): Promise<ReaderSettings> {     \r\n        \r\n        let result\r\n\r\n        try {\r\n            result = await this.db.get(\"reader-settings\")\r\n        } catch(ex) {}\r\n\r\n        if (!result) {\r\n            result = new ReaderSettings()\r\n            result._id = \"reader-settings\"\r\n        }\r\n\r\n\r\n        return Object.assign(new ReaderSettings(), result )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport {\r\n    ReaderSettingsRepositoryBrowserImpl\r\n}","\r\nclass Token {\r\n    \r\n    declare _id?:string\r\n\r\n    declare _rev?:string \r\n\r\n    declare tokenId?:number\r\n\r\n    declare attributeSelections?:[{\r\n        traitType: string\r\n        value: string\r\n    }]\r\n\r\n    declare currentOwnerId?:string \r\n\r\n    declare ownershipHistory?:OwnershipHistory[]\r\n\r\n    declare latestTransactionId?:string\r\n\r\n    declare lastUpdated?:Date \r\n\r\n    declare dateCreated?:Date\r\n\r\n}\r\n\r\ninterface OwnershipHistory {\r\n    owner:string,\r\n    blockNumber:number\r\n    transactionIndex:number\r\n    transactionHash:string\r\n    timestamp:number\r\n}\r\n\r\nexport {\r\n    Token\r\n}","import axios from \"axios\"\r\nimport {  inject, injectable } from \"inversify\"\r\nimport { Token } from \"../../dto/token.js\"\r\n\r\nimport { TokenRepository } from \"../token-repository.js\"\r\n\r\n\r\n@injectable()\r\nclass TokenRepositoryBrowserImpl implements TokenRepository {\r\n  \r\n\r\n    @inject('baseURI') \r\n    private baseURI:Function\r\n\r\n\r\n    constructor() {}\r\n\r\n\r\n\r\n    async get(_id:string): Promise<Token> {    \r\n        \r\n        try {\r\n            //Download it.\r\n            let result = await axios.get(`${this.baseURI()}sync/tokens/${_id}/token.json`)\r\n            return Object.assign(new Token(), result.data)\r\n        } catch(ex) {\r\n            // console.log(ex)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n    TokenRepositoryBrowserImpl\r\n}","import { Author } from \"../dto/author.js\";\nimport { inject, injectable } from \"inversify\";\nimport { AuthorRepository } from \"../repository/author-repository.js\";\nimport { WalletService } from \"./core/wallet-service.js\";\n\n\n@injectable()\nclass AuthorService {\n\n  @inject(\"AuthorRepository\")\n  private authorRepository:AuthorRepository\n\n  @inject(\"WalletService\")\n  private walletService:WalletService\n\n  constructor() { }\n\n  async get(_id: string): Promise<Author> {\n    return this.authorRepository.get(_id)\n  }\n\n  getDisplayName(author: Author): string {\n    if (!author) return\n    if (author.name) return author.name\n    return this.walletService.truncateEthAddress(author._id)\n  }\n\n\n}\n\n\nexport { AuthorService }\n\n","import { inject, injectable } from \"inversify\"\r\n\r\nimport { Channel } from \"../dto/channel.js\"\r\nimport { ChannelRepository } from \"../repository/channel-repository.js\"\r\n\r\n@injectable()\r\nclass ChannelService {\r\n\r\n  @inject(\"ChannelRepository\")\r\n  private channelRepository:ChannelRepository\r\n\r\n  constructor() { }\r\n\r\n  async get(): Promise<Channel> {\r\n    return this.channelRepository.get()\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport {\r\n  ChannelService\r\n}\r\n","import { injectable } from \"inversify\";\n\n@injectable()\nclass PagingService {\n    \n    constructor() {}\n\n    /**\n     * This function takes in a limit, offset, and count and generates a model \n     * \n     * @param offset \n     * @param limit \n     * @param count \n     */\n    buildPagingViewModel(offset: number, limit: number, count: number, numberOfPages:number) : PagingViewModel {\n\n        let viewModel = new PagingViewModel()\n\n        viewModel.offset = offset ? offset : 0\n        viewModel.limit = limit\n        viewModel.count = count \n\n        viewModel.start = viewModel.offset + 1\n\n\n        viewModel.end = Math.min(viewModel.offset + limit, count) \n\n        \n        viewModel.previousOffset = Math.max(viewModel.offset-limit, 0);\n\n        if ( (viewModel.offset + limit) < count ) {\n            viewModel.nextOffset = viewModel.offset + limit\n        }\n\n        \n        //Set current page\n        viewModel.page = viewModel.offset/viewModel.limit + 1\n        if (viewModel.page > viewModel.endPage) viewModel.page = viewModel.endPage\n\n        viewModel.endPage = Math.ceil(viewModel.count / viewModel.limit)\n\n\n        viewModel.lastOffset = viewModel.endPage * viewModel.limit - viewModel.limit\n        \n\n        viewModel.showNext = viewModel.endPage > viewModel.page\n        viewModel.showPrevious = viewModel.offset != 0\n\n        viewModel.showFirst = viewModel.page > 2\n        viewModel.showLast = viewModel.page < (viewModel.endPage - 1)\n\n\n        //Number of pages shouldn't be past the end\n        // numberOfPages = Math.min(numberOfPages, viewModel.endPage - viewModel.page)\n\n        // viewModel.pageNumbers = []\n        // for (let i=viewModel.page; i < numberOfPages + viewModel.page; i++) {\n        //     viewModel.pageNumbers.push({\n        //         display: i + 1,\n        //         offset: i * viewModel.limit\n        //     })\n        // }\n\n        return viewModel\n    }\n\n\n\n    calculateEndIndex(limit, offset, currentCount) {\n        let endIndex = offset + limit - 1\n\n        //If it's the last page don't go past the final record\n        return Math.min( currentCount - 1,  endIndex )\n    }\n\n\n    calculateDescendingEndIndex(limit, offset) {\n        let endIndex = offset - (limit - 1)\n\n        //Don't go lower than 0\n        return Math.max( 0,  endIndex )\n    }\n\n    calculateDescendingOffset(offset, currentCount) {\n\n        let calculatedOffset = (currentCount - 1) - offset\n        // console.log(`offset: ${offset}, currentCount: ${currentCount}, calculatedOffset: ${calculatedOffset}`)\n        return Math.max( 0,  calculatedOffset )\n    }\n\n\n}\n\nclass PagingViewModel {\n\n    page:number\n    pageNumbers:PageNumber[]\n    endPage:number\n\n    offset: number\n    limit: number\n    count: number\n\n    start: number\n    end: number \n\n    previousOffset: number \n    nextOffset: number \n    lastOffset:number\n\n    showPrevious:boolean\n    showNext:boolean\n    showFirst:boolean\n    showLast:boolean\n\n}\n\ninterface PageNumber {\n    display:number\n    offset:number\n}\n\nexport {\n    PagingService,\n    PagingViewModel\n}\n","import { inject, injectable } from \"inversify\"\r\n\r\nimport { AnimationRepository } from \"../../repository/animation-repository.js\"\r\nimport { AttributeTotalRepository } from \"../../repository/attribute-total-repository.js\"\r\nimport { AuthorRepository } from \"../../repository/author-repository.js\"\r\nimport { ChannelRepository } from \"../../repository/channel-repository.js\"\r\nimport { ComponentStateRepository } from \"../../repository/component-state-repository.js\"\r\n\r\nimport { ImageRepository } from \"../../repository/image-repository.js\"\r\nimport { ItemRepository } from \"../../repository/item-repository.js\"\r\nimport { ReaderSettingsRepository } from \"../../repository/reader-settings-repository.js\"\r\nimport { RowItemViewModelRepository } from \"../../repository/row-item-view-model-repository.js\"\r\nimport { StaticPageRepository } from \"../../repository/static-page-repository.js\"\r\n\r\n\r\n@injectable()\r\nclass SchemaService {\r\n\r\n    @inject(\"ItemRepository\")\r\n    private itemRepository:ItemRepository \r\n\r\n    @inject(\"ChannelRepository\")\r\n    private channelRepository:ChannelRepository\r\n\r\n    @inject(\"AuthorRepository\")\r\n    private authorRepository:AuthorRepository\r\n\r\n    @inject(\"ImageRepository\")\r\n    private imageRepository:ImageRepository\r\n    \r\n    @inject(\"AnimationRepository\")\r\n    private animationRepository:AnimationRepository\r\n\r\n    @inject(\"StaticPageRepository\")\r\n    private staticPageRepository:StaticPageRepository\r\n\r\n    @inject(\"ReaderSettingsRepository\")\r\n    private readerSettingsRepository:ReaderSettingsRepository\r\n\r\n    @inject(\"RowItemViewModelRepository\")\r\n    private rowItemViewModelRepository:RowItemViewModelRepository\r\n\r\n    @inject(\"AttributeTotalRepository\")\r\n    private attributeTotalRepository:AttributeTotalRepository\r\n\r\n    @inject(\"ComponentStateRepository\")\r\n    private componentStateRepository:ComponentStateRepository\r\n\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    async load(dbs:string[]) {\r\n\r\n        const repositories = this.getRepositories()\r\n\r\n        for (let db of dbs) {\r\n            let repo = repositories.filter( r => r.dbName == db)[0]\r\n            await repo?.load()\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async reloadAll() {\r\n\r\n        const repositories = this.getRepositories()\r\n\r\n        for (let repo of repositories) {\r\n            await repo.load()\r\n        }\r\n\r\n    }\r\n\r\n    getRepositories() {\r\n\r\n        const repositories = []\r\n\r\n        repositories.push(this.itemRepository)\r\n        repositories.push(this.channelRepository)\r\n        repositories.push(this.authorRepository)\r\n        repositories.push(this.imageRepository)\r\n        repositories.push(this.animationRepository)\r\n        repositories.push(this.staticPageRepository)\r\n        repositories.push(this.readerSettingsRepository)\r\n\r\n        repositories.push(this.staticPageRepository)\r\n        repositories.push(this.readerSettingsRepository)\r\n\r\n        repositories.push(this.attributeTotalRepository)\r\n        repositories.push(this.componentStateRepository)\r\n        repositories.push(this.rowItemViewModelRepository)\r\n\r\n        return repositories\r\n\r\n    }\r\n\r\n\r\n    async loadWallet(walletAddress:string) {\r\n        console.log(`Loading wallet: ${walletAddress}`)\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport {\r\n    SchemaService\r\n}","import { inject, injectable } from \"inversify\";\nimport svgToMiniDataURI from 'mini-svg-data-uri'\n\n\nimport { ImageRepository } from \"../repository/image-repository.js\";\nimport { Image } from \"../dto/image.js\";\n\n\n@injectable()\nclass ImageService {\n\n  @inject(\"ImageRepository\")\n  private imageRepository:ImageRepository\n\n  constructor() { }\n\n  async get(_id: string): Promise<Image> {\n    return this.imageRepository.get(_id)\n  }\n\n  async list() : Promise<Image[]> {\n    return this.imageRepository.list()\n  }\n\n  async getUrl(image: Image) {\n\n    if (!image.buffer && !image.svg) return \"\"\n\n    //If we have a buffer return it as a URL\n    if (image.buffer) {\n      return this.bufferToDataURL(\"image/jpg\", image.buffer)\n    } \n\n    if (image.svg) {\n      return this.getSVGURL(image)\n    }\n    \n\n  }\n\n\n  async getSVGURL(image: Image) {\n\n    if (!image.svg) return \"\"\n    return this.svgToDataURL(image.svg)\n\n  }\n\n\n  public svgToDataURL(svgStr) {  \n    return svgToMiniDataURI(svgStr)\n\n    // return \"data:image/svg+xml;base64,\" + Buffer.from(svgStr).toString(\"base64\")\n  }\n\n  public bufferToDataURL (mimeType, buffer) {\n    return `data:${mimeType};base64,${buffer.toString(\"base64\")}`\n  }\n\n}\n\n\nexport { ImageService }\n\n","import { inject, injectable } from \"inversify\";\nimport { StaticPageRepository } from \"../repository/static-page-repository.js\";\nimport { StaticPage } from \"../dto/static-page.js\";\n\n\n@injectable()\nclass StaticPageService {\n\n  @inject(\"StaticPageRepository\")\n  private staticPageRepository:StaticPageRepository\n\n\n  constructor() { }\n\n  async get(_id: string): Promise<StaticPage> {\n    return this.staticPageRepository.get(_id)\n  }\n\n  async listByLocation(location:string, skip:number): Promise<StaticPage[]> {\n    return this.staticPageRepository.listByLocation(location, skip)\n  }\n\n  async listRoutablePages(): Promise<StaticPage[]> {\n\n    let results = []\n\n    // if (additionalStaticPages?.length > 0) {\n    //   results.push(...additionalStaticPages)\n    // }\n    \n    results = results.concat(await this.staticPageRepository.listByLocation(\"navbar\", 0))\n    results = results.concat(await this.staticPageRepository.listByLocation(\"links\", 0))\n\n    //Clone these so we don't change the underlying objects\n    results = JSON.parse(JSON.stringify(results))\n\n    //Strip the content.\n    if (results?.length > 0) {\n      for (let staticPage of results) {\n        delete staticPage?.content\n        delete staticPage?.contentHTML\n        delete staticPage?.contentMarkdown\n      }\n    }\n\n    \n    return results \n  }\n}\n\n\nexport { StaticPageService }\n\n","import { inject, injectable } from \"inversify\";\nimport { Author } from \"../../dto/author.js\";\nimport { Channel } from \"../../dto/channel.js\";\nimport { Image } from \"../../dto/image.js\";\nimport { StaticPage } from \"../../dto/static-page.js\";\n\n\nimport { ChannelViewModel } from \"../../dto/viewmodel/channel-view-model.js\";\nimport { CHUNK_SIZE } from \"../../repository/item-repository.js\";\nimport { AuthorService } from \"../author-service.js\";\nimport { ChannelService } from \"../channel-service.js\";\nimport { PagingService } from \"../core/paging-service.js\";\nimport { SchemaService } from \"../core/schema-service.js\";\nimport { WalletService } from \"../core/wallet-service.js\";\nimport { ImageService } from \"../image-service.js\";\nimport { StaticPageService } from \"../static-page-service.js\";\n\n@injectable()\nclass ChannelWebService {\n\n    @inject(\"ChannelService\")\n    private channelService:ChannelService\n\n    @inject(\"AuthorService\")\n    private authorService:AuthorService\n\n    @inject(\"ImageService\")\n    private imageService:ImageService\n\n    @inject(\"PagingService\")\n    private pagingService:PagingService\n\n    @inject(\"SchemaService\")\n    private schemaService:SchemaService\n\n    @inject(\"WalletService\")\n    private walletService:WalletService\n\n    @inject(\"StaticPageService\")\n    private staticPageService:StaticPageService\n\n    private loadedChannelData\n\n    constructor() {}\n\n    async get(offset:number) : Promise<ChannelViewModel> {\n        return this.getViewModel(await this.channelService.get(), offset)\n    }\n\n    async getViewModel(channel:Channel, offset:number) : Promise<ChannelViewModel> {\n \n        let author:Author\n        let coverImage:Image\n\n        if (channel.authorId) {            \n            author = await this.authorService.get(channel.authorId)\n        }\n\n        let itemCount = channel.itemCount\n\n        let pagingViewModel = this.pagingService.buildPagingViewModel(offset, CHUNK_SIZE, itemCount, 5)\n\n        // let items = await this.itemWebService.list(offset)\n\n        \n        let locations = [\"navbar\", \"links\", \"index\", \"none\"]\n\n        let staticPagesViewModel = {}\n\n        for (let location of locations) {\n            staticPagesViewModel[location] = await this.staticPageService.listByLocation(location, 0)\n        }\n\n\n        // if (additionalStaticPages?.length > 0) {\n        //     for (let staticPage of additionalStaticPages) {\n        //         for (let location of staticPage?.locations) {\n        //             staticPagesViewModel[location].push(staticPage)\n        //         }\n        //     }\n        // }\n\n\n        if (channel.coverImageId) {\n            coverImage = await this.imageService.get(channel.coverImageId)\n        }\n\n\n        return {\n            channelContractAbbrev: channel.contractAddress ? this.walletService.truncateEthAddress(channel.contractAddress) : undefined,\n            channel: channel,\n            staticPagesViewModel: staticPagesViewModel,\n            author: author,\n            authorDisplayName: this.authorService.getDisplayName(author),\n            itemCount: itemCount,\n            pagingViewModel: pagingViewModel,\n            coverImage: coverImage\n        }\n\n    }\n\n    \n\n    async loadChannel(channelId, baseURI, hostname) {\n\n        globalThis.channelId = channelId\n        globalThis.baseURI = baseURI\n        globalThis.hostname = hostname     \n\n\n    }\n\n    async loadChannelData(channelId) {\n\n        if (channelId && this.loadedChannelData != channelId) {\n            await this.schemaService.reloadAll()\n            await this.schemaService.load(['component-state'])\n        }\n\n        this.loadedChannelData = channelId\n\n    }\n\n\n\n}\n\nexport {\n    ChannelWebService\n}","import { inject, injectable } from \"inversify\";\nimport { AnimationRepository } from \"../repository/animation-repository.js\";\nimport { Animation } from \"../dto/animation.js\";\nimport { ItemService } from \"./item-service.js\";\n\n\n@injectable()\nclass AnimationService {\n\n  @inject(\"AnimationRepository\")\n  private animationRepository:AnimationRepository\n\n  constructor() { }\n\n  async get(_id: string): Promise<Animation> {\n    return this.animationRepository.get(_id)\n  }\n\n}\n\n\nexport { AnimationService }\n\n","import { QuillDeltaToHtmlConverter } from \"quill-delta-to-html\"\nimport { deltaToMarkdown } from 'quill-delta-to-markdown'\n\nimport { injectable } from 'inversify';\n\n\n@injectable()\nclass QuillService {\n\n  constructor() {}\n\n  async translateContent(content: any): Promise<string> {\n\n    if (!content?.ops) return \"\"\n\n    // console.log(content.ops)\n\n    const qdc = new QuillDeltaToHtmlConverter(content.ops, { })\n\n    //Render dividers into HTML\n    qdc.renderCustomWith(function (customOp, contextOp) {\n\n      if (customOp.insert.type === 'divider') {\n        return \"<hr />\"\n      }\n\n      if (customOp.insert.type === 'ipfsimage') {\n        \n        let img = `<img src=\"${customOp.insert.value.src}\" `\n\n        if (customOp.insert.value.width) {\n          img += `width=\"${customOp.insert.value.width}\" `\n        }\n\n        if (customOp.insert.value.height) {\n          img += `height=\"${customOp.insert.value.height}\" `\n        }\n\n        if (customOp.insert.value.style) {\n          img += `style=\"${customOp.insert.value.style}\"`\n        }\n\n        img += \"/>\"\n\n        return img\n      }\n\n    })\n\n    return qdc.convert()\n  }\n\n\n  async generateMarkdown(content: any) : Promise<string> {\n    return deltaToMarkdown(content)\n  }\n\n\n}\n\n\n\nexport { QuillService }\n\n","import { inject, injectable } from \"inversify\";\r\nimport { AttributeTotal } from \"../dto/attribute-total.js\";\r\nimport { Channel } from \"../dto/channel.js\";\r\nimport { Item } from \"../dto/item.js\";\r\nimport { AttributeTotalRepository } from \"../repository/attribute-total-repository.js\";\r\n\r\n@injectable()\r\nclass AttributeTotalService {\r\n\r\n    @inject(\"AttributeTotalRepository\")\r\n    private attributeTotalRepository:AttributeTotalRepository\r\n\r\n    constructor() {}\r\n\r\n    async get(_id:string): Promise<AttributeTotal> {      \r\n        return this.attributeTotalRepository.get(_id)\r\n    }\r\n\r\n    async put(attributeTotal:AttributeTotal) : Promise<void> {\r\n        return this.attributeTotalRepository.put(attributeTotal)\r\n    }\r\n\r\n    async getByIds(ids:string[]) : Promise<AttributeTotal[]> {\r\n        return this.attributeTotalRepository.getByIds(ids)\r\n    }\r\n\r\n    async list() : Promise<AttributeTotal[]> {\r\n        return this.attributeTotalRepository.list()\r\n    }\r\n\r\n    async buildAttributeTotals(channel:Channel, items:Item[]) : Promise<AttributeTotal[]> {\r\n\r\n        let totals:AttributeTotal[] = []\r\n        \r\n        //Build starting total objects.\r\n        let totalKeys = new Set(items.map( item => item.attributeSelections.map( as => `${as.traitType}:::${as.value}`) ).flat())\r\n\r\n\r\n        for (let totalKey of totalKeys) {\r\n\r\n            let attributeTotal:AttributeTotal = {\r\n                _id: totalKey,\r\n                traitType: totalKey.substring(0, totalKey.indexOf(\":::\")),\r\n                value: totalKey.substring(totalKey.indexOf(\":::\") + 3, totalKey.length ),\r\n                count: 0,\r\n                tokenIds: []\r\n            }\r\n\r\n            totals.push(attributeTotal)\r\n\r\n        }\r\n\r\n\r\n\r\n        //Loop through the items\r\n        for (let item of items) {\r\n\r\n            for (let as of item.attributeSelections) {\r\n                \r\n                //Find the matching AttributeTotal\r\n                let total:AttributeTotal = totals.filter( at => at.traitType == as.traitType && at.value == as.value)[0]\r\n\r\n                // console.log(as.traitType, as.value, totals.filter( at => at.traitType == as.traitType))\r\n\r\n                //Add one to the report total\r\n                total.tokenIds.push(item.tokenId)\r\n                total.count++\r\n            }\r\n\r\n        }\r\n\r\n        //Loop through keys and calculate totals for each one.\r\n        for (let total of totals) {\r\n            total.categoryPercent = new Intl.NumberFormat('default', {\r\n                style: 'percent',\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2,\r\n              }).format((total.count / channel.itemCount))\r\n        }\r\n\r\n\r\n\r\n        //Sort totals by count\r\n        totals.sort((a,b) => b.count - a.count)\r\n\r\n\r\n        return totals\r\n    }\r\n\r\n\r\n}\r\n\r\nexport {\r\n    AttributeTotalService\r\n}","import { inject, injectable } from \"inversify\";\nimport { Item } from \"../dto/item.js\";\nimport { ItemPage, RowItemViewModel } from \"../dto/item-page.js\";\nimport { ItemRepository } from \"../repository/item-repository.js\";\nimport { AttributeTotal } from \"../dto/attribute-total.js\";\nimport { AttributeTotalService } from \"./attribute-total-service.js\";\nimport { Channel } from \"../dto/channel.js\";\nimport { RowItemViewModelRepository } from \"../repository/row-item-view-model-repository.js\";\n\n@injectable()\nclass ItemService {\n\n    @inject(\"ItemRepository\")\n    private itemRepository:ItemRepository\n\n    @inject(\"RowItemViewModelRepository\")\n    private rowItemViewModelRepository:RowItemViewModelRepository\n    \n    \n    @inject(\"AttributeTotalService\")\n    private attributeTotalService:AttributeTotalService\n\n    constructor(\n    ) { }\n\n    async get(_id: string): Promise<Item> {\n        return this.itemRepository.get(_id)\n    }\n    \n    async list(skip: number, limit?:number): Promise<Item[]> {\n        return this.itemRepository.list(skip, limit)\n    }\n\n    async query(query:string) {\n        return this.itemRepository.query(query)\n    }\n    \n    async all() {\n        return this.itemRepository.all()\n    }\n    \n    async getByTokenId(tokenId:number) : Promise<Item> {\n        return this.itemRepository.getByTokenId(tokenId)\n    }\n\n    async getByTokenIds(tokenIds:number[]) : Promise<Item[]> {\n        return this.itemRepository.getByTokenIds(tokenIds)\n    }\n\n    async getRowItemViewModelsByAttribute(traitType:string, value:string, pageNumber:number) : Promise<ItemPage> {\n        return this.itemRepository.getRowItemViewModelsByAttribute(traitType, value, pageNumber)\n    }\n\n    async getRowItemViewModelsByOwner(address:string, pageNumber:number) : Promise<ItemPage> {\n        return this.itemRepository.getRowItemViewModelsByOwner(address, pageNumber)\n    }\n\n    async getRowItemViewModelsByTokenIds(tokenIds:number[]) : Promise<RowItemViewModel[]> {\n        return this.itemRepository.getRowItemViewModelsByTokenIds(tokenIds)    \n    }\n\n    async getRowItemViewModelsByTokenId(tokenId:number) : Promise<RowItemViewModel> {\n        return this.itemRepository.getRowItemViewModelsByTokenId(tokenId)    \n    }\n\n\n    async listByTokenId(startTokenId:number, limit:number=10) {\n        return this.itemRepository.listByTokenId(startTokenId, limit)\n    }\n\n\n    async buildAttributeTotals(channel:Channel) : Promise<AttributeTotal[]> {\n\n        let items:Item[] = await this.all()\n\n        return this.attributeTotalService.buildAttributeTotals(channel, items)\n    }\n\n\n    async searchTokenIds(tokenIds:number[]) {\n        return this.rowItemViewModelRepository.getByTokenIds(tokenIds)\n    } \n\n\n}\n\nexport {\n    ItemService\n}","import { inject, injectable } from \"inversify\";\n\nimport { ItemPage } from \"../dto/item-page.js\";\nimport { ItemPageRepository } from \"../repository/item-page-repository.js\";\n\n@injectable()\nclass ItemPageService {\n\n    @inject(\"ItemPageRepository\")\n    private itemPageRepository:ItemPageRepository\n  \n    constructor(\n    ) { }\n\n    async get(pageNumber: number): Promise<ItemPage> {\n        return this.itemPageRepository.get(pageNumber)\n    }\n    \n}\n\nexport {\n    ItemPageService\n}","import { inject, injectable } from \"inversify\";\r\nimport { Author } from \"../../dto/author.js\";\r\nimport { Channel } from \"../../dto/channel.js\";\r\nimport { Image } from \"../../dto/image.js\";\r\nimport { Item } from \"../../dto/item.js\";\r\nimport { Animation } from \"../../dto/animation.js\";\r\n\r\nimport { AttributeSelectionViewModel } from \"../../dto/viewmodel/attribute-selection-view-model.js\";\r\n\r\n\r\nimport { ItemViewModel } from \"../../dto/viewmodel/item-view-model.js\";\r\nimport { AnimationService } from \"../animation-service.js\";\r\nimport { AuthorService } from \"../author-service.js\";\r\nimport { ChannelService } from \"../channel-service.js\";\r\nimport { QuillService } from \"../core/quill-service.js\";\r\nimport { SchemaService } from \"../core/schema-service.js\";\r\nimport { ImageService } from \"../image-service.js\";\r\nimport { ItemService } from \"../item-service.js\";\r\n\r\nimport { ItemPage, ItemResults, RowItemViewModel } from \"../../dto/item-page.js\";\r\nimport { ItemPageService } from \"../item-page-service.js\";\r\nimport { AttributeTotal } from \"../../dto/attribute-total.js\";\r\nimport { AttributeTotalService } from \"../attribute-total-service.js\";\r\nimport { AttributeOptions, AttributeOptionsViewModel } from \"../../dto/attribute.js\";\r\n\r\nimport he from \"he\"\r\nimport { DOMParser, XMLSerializer } from '@xmldom/xmldom'\r\n\r\nconst parser = new DOMParser()\r\n\r\n@injectable()\r\nclass ItemWebService {\r\n\r\n    @inject(\"ItemService\")\r\n    private itemService: ItemService\r\n\r\n    @inject(\"ChannelService\")\r\n    private channelService: ChannelService\r\n\r\n    @inject(\"AuthorService\")\r\n    private authorService: AuthorService\r\n\r\n    @inject(\"ImageService\")\r\n    private imageService: ImageService\r\n\r\n    @inject(\"SchemaService\")\r\n    private schemaService: SchemaService\r\n\r\n    @inject(\"QuillService\")\r\n    private quillService: QuillService\r\n\r\n    @inject(\"AnimationService\")\r\n    private animationService: AnimationService\r\n\r\n    @inject(\"ItemPageService\")\r\n    private itemPageService: ItemPageService\r\n\r\n    @inject(\"AttributeTotalService\")\r\n    private attributeTotalService: AttributeTotalService\r\n\r\n\r\n\r\n    private allTokensCache:number[]\r\n\r\n    constructor() {}\r\n\r\n    async get(_id: string): Promise<ItemViewModel> {\r\n\r\n        let item:Item = await this.itemService.get(_id)\r\n\r\n        //Get channel\r\n        const channel = await this.channelService.get()\r\n\r\n        //Get attribute report\r\n        const attributeReport:AttributeTotal[] = await this.attributeTotalService.list()\r\n\r\n        return this.getViewModel(item, channel, attributeReport)\r\n    }\r\n\r\n    async getByTokenId(tokenId:number) : Promise<Item> {\r\n\r\n        return this.itemService.getByTokenId(tokenId)\r\n\r\n    }\r\n\r\n    async getViewModel(item: Item, channel:Channel, attributeReport:AttributeTotal[]): Promise<ItemViewModel> {\r\n\r\n        let attributeSelections:AttributeSelectionViewModel[] = []\r\n\r\n        let author: Author\r\n        let coverImage:Image\r\n        let animation:Animation\r\n\r\n        let animationContentHTML\r\n\r\n        //Get author\r\n        if (channel.authorId) {\r\n            author = await this.authorService.get(channel.authorId)\r\n        }\r\n\r\n        //Only show attributes that are valid at the category level. \r\n        if (channel.attributeOptions.length > 0) {\r\n\r\n            for (let ao of channel.attributeOptions) {\r\n\r\n                //find the one selected by this item\r\n                let selections = item?.attributeSelections?.filter( as => ao?.traitType == as?.traitType)\r\n\r\n                let selection = selections?.length > 0 ? selections[0].value : undefined\r\n\r\n\r\n                let attributeTotals:AttributeTotal[] = attributeReport.filter( at => at.traitType == ao.traitType)\r\n\r\n                let matches = attributeTotals?.filter( at => at.value == selection)\r\n\r\n\r\n                attributeSelections.push({\r\n                    id: ao.id,\r\n                    traitType: ao.traitType,\r\n                    values: ao.values,\r\n                    value: selection,\r\n                    attributeTotal: matches?.length > 0 ? matches[0] : undefined\r\n                })\r\n\r\n            }\r\n\r\n        }\r\n\r\n        //Get image\r\n        if (item.coverImageId) {\r\n            coverImage = await this.imageService.get(item.coverImageId)\r\n        }\r\n\r\n        //Get animation if we are displaying it.\r\n        if (item.animationId && !item.coverImageAsAnimation) {\r\n\r\n            animation = await this.animationService.get(item.animationId)\r\n\r\n            let page = parser.parseFromString(animation.content, 'text/html')\r\n\r\n            let body = page.getElementsByTagName('body')[0]\r\n            \r\n            animationContentHTML = he.unescape(new XMLSerializer().serializeToString(body))\r\n\r\n            //Swap body tag to a div\r\n            animationContentHTML = \"<div\" + animationContentHTML.slice(5)\r\n            animationContentHTML = animationContentHTML.substring(0, animationContentHTML.length - 7) + \"</div>\"\r\n\r\n                \r\n        }\r\n\r\n\r\n        //Get image data and re-insert it into the content ops\r\n        if (item.content?.ops?.length > 0) {\r\n\r\n            let ops = []\r\n\r\n            for (let op of item.content.ops) {\r\n\r\n                if (op.insert && op.insert.ipfsimage) {\r\n\r\n                    let image:Image = await this.imageService.get(op.insert.ipfsimage.cid)\r\n            \r\n                    op.insert.ipfsimage.src = await this.imageService.getUrl(image)\r\n\r\n                    // console.log(op.src)\r\n                }\r\n\r\n                ops.push(op)\r\n            }\r\n\r\n            item.content.ops = ops\r\n\r\n        }\r\n\r\n\r\n        //Load previous and nex\r\n\r\n\r\n        return {\r\n            item: item,\r\n            animation:animation,\r\n            animationContentHTML: animationContentHTML,\r\n            contentHTML: await this.quillService.translateContent(item.content),\r\n            channel: channel,\r\n            author: author,\r\n            authorDisplayName: this.authorService.getDisplayName(author),\r\n            attributeSelections: attributeSelections,\r\n            coverImage: coverImage\r\n        }\r\n\r\n    }\r\n\r\n    async getMintViewModel(item: Item, channel:Channel): Promise<ItemViewModel> {\r\n\r\n        let attributeSelections:AttributeSelectionViewModel[] = []\r\n\r\n        let author: Author\r\n        let coverImage:Image\r\n        let animation:Animation\r\n\r\n        //Get image\r\n        if (item.coverImageId) {\r\n            coverImage = await this.imageService.get(item.coverImageId)\r\n        }\r\n\r\n        return {\r\n            item: item,\r\n            animation:animation,\r\n            channel: channel,\r\n            author: author,\r\n            attributeSelections: attributeSelections,\r\n            coverImage: coverImage\r\n        }\r\n\r\n    }\r\n\r\n    async getSearchViewModel(item: Item, channel:Channel): Promise<ItemViewModel> {\r\n\r\n        let attributeSelections:AttributeSelectionViewModel[] = []\r\n\r\n        let author: Author\r\n        let coverImage:Image\r\n        let animation:Animation\r\n\r\n        //Get image\r\n        // if (item.coverImageId) {\r\n        //     coverImage = await this.imageService.get(item.coverImageId)\r\n        // }\r\n\r\n        return {\r\n            item: item,\r\n            animation:animation,\r\n            channel: channel,\r\n            author: author,\r\n            attributeSelections: attributeSelections,\r\n            // coverImage: coverImage\r\n        }\r\n\r\n    }\r\n\r\n    async getExploreAttributeOptions(params:any) : Promise<AttributeOptionsViewModel[]> {\r\n\r\n        await this.schemaService.load([\"channels\", \"authors\", \"attribute-totals\"])\r\n\r\n        //Get channel\r\n        const channel = await this.channelService.get()\r\n\r\n\r\n        let attributeTotals:AttributeTotal[] = await this.attributeTotalService.list()\r\n\r\n\r\n        //Get a list of the token IDs that we're already filtered to so we can adjust the counts.\r\n        // let filteredIds = await this._paramsToFilteredIds(params, attributeTotals)\r\n\r\n        let attributeOptions:AttributeOptions[] = channel.attributeOptions\r\n\r\n        let results:AttributeOptionsViewModel[] = []\r\n\r\n        for (let ao of attributeOptions) {\r\n\r\n            let values = []\r\n\r\n            for (let v of ao.values.sort()) {\r\n\r\n                let clonedParams = JSON.parse(JSON.stringify(params))\r\n                delete clonedParams[ao.traitType]\r\n\r\n                //Unapply the selection for this filter so the counts are like this one isn't already applied. \r\n                let parentFilteredIds = await this._paramsToFilteredIds(clonedParams, attributeTotals)\r\n\r\n                let at = attributeTotals.filter( at => at.traitType ==  ao.traitType && at.value == v)[0]\r\n\r\n                if (at) {\r\n\r\n                    values.push({\r\n                        value: v,\r\n                        count: at.tokenIds.filter(x => parentFilteredIds.includes(x)).length \r\n                    })\r\n\r\n                } \r\n\r\n            }\r\n            \r\n            //Sort by count\r\n            values.sort((a,b) => b.count - a.count)\r\n\r\n\r\n            let aovm:AttributeOptionsViewModel = {\r\n                id: ao.id,\r\n                traitType: ao.traitType,\r\n                values: values\r\n            }\r\n\r\n            results.push(aovm)\r\n\r\n        }\r\n\r\n\r\n        return results\r\n\r\n    }\r\n\r\n    async exploreList(params:any, skip: number, limit?:number): Promise<ItemResults> {\r\n\r\n        await this.schemaService.load([\"channels\", \"authors\", \"attribute-totals\", \"row-item-view-models\"])\r\n        \r\n\r\n        if (params && Object.keys(params)?.length > 0) {\r\n\r\n            return this.exploreQuery(params, skip, limit)\r\n\r\n        } else {\r\n\r\n            //Figure out which page this is and return it.\r\n            let pageNumber = skip / limit \r\n\r\n            let itemPage:ItemPage = await this.itemPageService.get(pageNumber)\r\n            let channel:Channel = await this.channelService.get()\r\n\r\n\r\n            return {\r\n                items: itemPage.items,\r\n                totalMatches: channel.itemCount,\r\n                limit: limit,\r\n                skip: skip\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    async exploreQuery(params:any,  skip: number, limit?:number): Promise<ItemResults> {\r\n\r\n        await this.schemaService.load([ \"channels\", \"authors\", \"attribute-totals\", \"row-item-view-models\"])\r\n        \r\n        let attributeTotals:AttributeTotal[] = await this.attributeTotalService.list()\r\n\r\n        let filteredIds = await this._paramsToFilteredIds(params, attributeTotals)\r\n        \r\n        //Paging\r\n        let totalMatches = filteredIds.length\r\n        filteredIds = filteredIds.slice(skip, skip + limit)\r\n\r\n        let viewModels:RowItemViewModel[] = await this.itemService.searchTokenIds(filteredIds)\r\n\r\n        return {\r\n            items: viewModels,\r\n            totalMatches: totalMatches,\r\n            limit: limit,\r\n            skip: skip\r\n        }\r\n    \r\n    }\r\n\r\n    async _paramsToFilteredIds(params, allAttributeTotals:AttributeTotal[]) : Promise<number[]> {\r\n\r\n        let attributeTotalIds = []\r\n\r\n        for (let key of Object.keys(params)) {\r\n            attributeTotalIds.push(`${key}:::${params[key]}`)\r\n        }\r\n\r\n        let attributeTotals:AttributeTotal[] = allAttributeTotals?.filter( at => attributeTotalIds?.includes(at._id))  \r\n\r\n        if (attributeTotals?.length > 0) {\r\n            return attributeTotals.map( at => at.tokenIds).reduce((p,c) => p.filter(e => c.includes(e)))\r\n        } else {\r\n\r\n            //No filter selected so return every token ID\r\n            if (!this.allTokensCache) {\r\n                this.allTokensCache = Array.from(new Set(allAttributeTotals.map( at => at.tokenIds).flat()))\r\n            }\r\n\r\n            return this.allTokensCache\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    async list(skip: number, limit?:number): Promise<ItemViewModel[]> {\r\n\r\n        let result: ItemViewModel[] = []\r\n\r\n        //Get channel\r\n        const channel = await this.channelService.get()\r\n\r\n        //Get attribute report\r\n        const attributeReport:AttributeTotal[] = await this.itemService.buildAttributeTotals(channel)\r\n        \r\n        let items: Item[] = await this.itemService.list(skip, limit)\r\n\r\n        for (let item of items) {\r\n            result.push(await this.getViewModel(item, channel, attributeReport))\r\n        }\r\n\r\n        return result\r\n\r\n    }\r\n\r\n    async mintList(skip: number, limit?:number): Promise<ItemViewModel[]> {\r\n\r\n        let result: ItemViewModel[] = []\r\n\r\n        //Get channel\r\n        const channel = await this.channelService.get()\r\n        \r\n        let items: Item[] = await this.itemService.list(skip, limit)\r\n\r\n        for (let item of items) {\r\n            result.push(await this.getMintViewModel(item, channel))\r\n        }\r\n\r\n        return result\r\n\r\n    }\r\n\r\n\r\n\r\n    async itemPage(pageNumber:number) : Promise<ItemPage> {\r\n        return this.itemPageService.get(pageNumber)\r\n    }\r\n\r\n    async attributeItemPage(traitType:string, value: string, pageNumber:number) : Promise<ItemPage> {\r\n        return this.itemService.getRowItemViewModelsByAttribute(traitType, value, pageNumber)\r\n    }\r\n\r\n    async ownerItemPage(address:string, pageNumber:number) : Promise<ItemPage> {\r\n        return this.itemService.getRowItemViewModelsByOwner(address, pageNumber)\r\n    }\r\n\r\n    async query(query:string) : Promise<Item[]> {\r\n\r\n        await this.schemaService.load([\"items\", \"channels\"])\r\n\r\n        let results = await this.itemService.query(query)\r\n\r\n\r\n        //Get channel\r\n        const channel = await this.channelService.get()\r\n\r\n        let viewModels: ItemViewModel[] = []\r\n\r\n        for (let item of results) {\r\n            viewModels.push(await this.getSearchViewModel(item, channel))\r\n        }\r\n\r\n\r\n        return viewModels\r\n    }\r\n\r\n    async buildItemPages(itemViewModels:ItemViewModel[], perPage:number) : Promise<ItemPage[]> {\r\n\r\n        // await this.schemaService.load([\"images\"])\r\n\r\n        let result: ItemPage[] = []\r\n\r\n\r\n        let viewModels:RowItemViewModel[] = [] \r\n\r\n        //Create view models\r\n        for (let itemViewModel of itemViewModels) {\r\n\r\n            let item:Item = itemViewModel.item\r\n\r\n            viewModels.push({\r\n                _id: item._id,\r\n                coverImageGenerated: itemViewModel.coverImage.generated ? true : false,\r\n                coverImageId: itemViewModel.coverImage._id,\r\n                title: `${item.title ? item.title : `#${item.tokenId}` }`,\r\n                tokenId: item.tokenId\r\n            })\r\n\r\n        }\r\n\r\n        //Break into rows\r\n        for (let i = 0; i < viewModels.length; i += perPage) {\r\n            result.push({\r\n                items: viewModels.slice(i, i + perPage)\r\n            })\r\n        }\r\n\r\n\r\n        return result\r\n\r\n    }\r\n    \r\n    async buildAttributeTotals(channel:Channel) : Promise<AttributeTotal[]> {\r\n        return this.itemService.buildAttributeTotals(channel)\r\n    }\r\n\r\n    async getRowItemViewModelsByTokenIds(filteredIds) : Promise<RowItemViewModel[]> {\r\n        return this.itemService.getRowItemViewModelsByTokenIds(filteredIds)\r\n    }\r\n\r\n    translateRowItemViewModel(item:Item, coverImage:Image) : RowItemViewModel {\r\n\r\n        let viewModel:RowItemViewModel = {\r\n            _id: item._id,\r\n            coverImageGenerated: coverImage.generated ? true : false,\r\n            coverImageId: coverImage._id,\r\n            title: `${item.title ? item.title : `#${item.tokenId}`}`,\r\n            tokenId: item.tokenId\r\n        }\r\n        \r\n        return viewModel\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport {\r\n    ItemWebService\r\n}","import { inject, injectable } from \"inversify\";\nimport { Author } from \"../../dto/author.js\";\nimport { AuthorViewModel } from \"../../dto/viewmodel/author-view-model.js\";\nimport { ImageViewModel } from \"../../dto/viewmodel/image-view-model.js\";\nimport { AuthorService } from \"../author-service.js\";\n\n@injectable()\nclass AuthorWebService {\n\n    @inject(\"AuthorService\")\n    private authorService:AuthorService\n\n    constructor(\n    ) {}\n\n    async get(_id: string): Promise<AuthorViewModel> {\n        return this.getViewModel(await this.authorService.get(_id))\n    }\n\n    async getViewModel(author: Author): Promise<AuthorViewModel> {\n\n        let authorPhoto:ImageViewModel\n\n        return {\n            author: author,\n            authorDisplayName: this.authorService.getDisplayName(author)\n        }\n\n    }\n\n\n\n}\n\nexport {\n    AuthorWebService\n}","import { inject, injectable } from \"inversify\";\nimport { MetadataRepository } from \"../repository/metadata-repository.js\";\nimport { WalletService } from \"./core/wallet-service.js\";\nimport { id } from \"ethers\"\n\n\n@injectable()\nclass TokenContractService {\n\n    @inject(\"MetadataRepository\")\n    private metadataRepository:MetadataRepository\n\n    @inject(\"WalletService\")\n    private walletService:WalletService\n\n    private mintEventListenerAdded=false\n\n    constructor(\n    ) {}\n\n    private lastMintedTokenId=0\n\n\n    async getBalance(address) : Promise<number> {\n        if (!address) return 0\n\n        let channelContract = await this.getChannelContract()\n\n        return parseInt(await channelContract.balanceOf(address))\n    }\n\n    async getMetadata(tokenId) : Promise<any> {\n        return this.metadataRepository.get(tokenId)      \n    }\n\n    async mint(quantity:number, totalMintCost:string) {\n        let channelContract = await this.getChannelContract()\n        let tx = await channelContract.mint(quantity, { value: totalMintCost })\n        return tx.wait()\n    }\n\n    async mintFromStartOrFail(quantity:number, start:number, totalMintCost:string) {\n        let channelContract = await this.getChannelContract()\n        let tx = await channelContract.mintFromStartOrFail(quantity, start, { value: totalMintCost })\n        return tx.wait()\n    }\n\n    \n    async mintAsOwner(quantity:number) {\n        let channelContract = await this.getChannelContract()\n        let tx = await channelContract.mint(quantity, {})\n        return tx.wait()\n    }\n\n    async ownerOf(tokenId:number)  {\n        let channelContract = await this.getChannelContract()\n        return channelContract.ownerOf(tokenId)\n    }\n\n    async getTotalMinted() {\n        let channelContract = await this.getChannelContract()\n        return channelContract.totalMinted()\n    }\n\n    async getTotalSupply() {\n        let channelContract = await this.getChannelContract()\n        return channelContract.totalSupply()\n    }\n\n    async owner() {\n        let channelContract = await this.getChannelContract()\n        return channelContract.owner()\n    }\n\n    async getChannelContract() : Promise<ChannelContract> {\n\n        let contract:ChannelContract = await this.walletService.getContract(\"Channel\")\n        return contract\n    }\n\n\n\n}\n\ninterface ChannelContract {\n    mint(quantity:number, options:any)\n    mintFromStartOrFail(quantity:number, start:number,options:any)\n    ownerOf(tokenId:number) : string\n    tokenURI(tokenId:number) : string\n    balanceOf(address) : string\n    totalMinted() : BigInt\n    totalSupply() : BigInt\n    owner() : string\n    update(): void\n    address:string\n    on(filter, listener)\n    queryFilter(event, fromBlock, toBlock)\n}\n\n\n\nexport {\n    TokenContractService\n}","import { inject, injectable } from \"inversify\";\nimport { Channel } from \"../../dto/channel.js\";\nimport { MintingViewModel } from \"../../dto/viewmodel/minting-view-model.js\";\nimport { ChannelService } from \"../channel-service.js\";\nimport { SchemaService } from \"../core/schema-service.js\";\nimport { WalletService } from \"../core/wallet-service.js\";\nimport { ItemService } from \"../item-service.js\";\nimport { TokenContractService } from \"../token-contract-service.js\";\nimport { parseUnits, formatUnits } from \"ethers\";\n\n@injectable()\nclass MintWebService {\n\n    @inject(\"TokenContractService\")\n    private tokenContractService:TokenContractService\n\n    @inject(\"ChannelService\")\n    private channelService:ChannelService\n\n    @inject(\"ItemService\")\n    private itemService:ItemService\n\n    @inject(\"SchemaService\")\n    private schemaService:SchemaService\n    \n    @inject(\"WalletService\")\n    private walletService:WalletService\n\n    constructor(\n    ) {}\n\n    async getMintingViewModel() : Promise<MintingViewModel> {\n\n        await this.schemaService.load([\"channels\", \"items\"])\n\n        let channel:Channel = await this.channelService.get()\n\n        if (channel.contractAddress) {\n\n            let totalMinted:BigInt = await this.tokenContractService.getTotalMinted()       \n\n            let lastMinted = []\n\n            if (Number(totalMinted) > 0 ) {\n\n                let items = await this.itemService.listByTokenId(Number(totalMinted))\n\n                for (let item of items) {\n\n                    try {\n\n                        //@ts-ignore\n                        let owner = await this.tokenContractService.ownerOf(item.tokenId)\n\n                        lastMinted.push({\n                            owner: await this.walletService.truncateEthAddress(owner),\n                            item: item\n                        })\n\n                    } catch(ex) {}\n\n                    \n                }\n\n            }            \n\n\n            return {\n                totalMinted: Number(totalMinted),\n                totalSupply: channel.itemCount,\n                mintPrice: channel.mintPrice,\n                lastMinted: lastMinted,\n                minting: Number(totalMinted) < channel.itemCount\n            }\n            \n        }\n\n    }\n\n    async getHomeMintingViewModel() : Promise<MintingViewModel> {\n\n        await this.schemaService.load([\"channels\"])\n\n        let channel:Channel = await this.channelService.get()\n\n        if (channel.contractAddress) {\n\n            let totalMinted:BigInt = await this.tokenContractService.getTotalMinted()       \n\n            return {\n                totalMinted: Number(totalMinted),\n                totalSupply: channel.itemCount,\n                mintPrice: channel.mintPrice\n            }\n            \n        }\n    }\n\n    async mint(quantity:number) {\n\n        await this.schemaService.load([\"channels\"])\n        let channel:Channel = await this.channelService.get()\n        let totalWei = await this.calculateTotalMint(channel, quantity)\n\n        let owner = await this.tokenContractService.owner()\n\n        // console.log(owner.toLowerCase(), this.walletService.address.toLowerCase())\n\n        if (this.walletService.address.toLowerCase() == owner.toLowerCase()) {\n            console.log('Minting as owner')\n            return this.tokenContractService.mintAsOwner(quantity)\n        } else {\n            return this.tokenContractService.mint(quantity, totalWei)\n        }\n\n        \n    }\n\n    async mintFromStartOrFail(quantity:number, start:number) {\n\n        await this.schemaService.load([\"channels\"])\n        let channel:Channel = await this.channelService.get()\n        \n        let totalWei = await this.calculateTotalMint(channel, quantity)\n\n        return this.tokenContractService.mintFromStartOrFail(quantity, start, totalWei)\n    }\n\n    async calculateTotalMint(channel, quantity) {\n\n        let mintPriceWei = parseUnits(channel.mintPrice, 'ether')\n\n        let total = Number(mintPriceWei) * quantity\n\n        return total.toString()\n \n    }\n\n    async updateTotal(mintPriceWei:BigInt, quantity:number) : Promise<string>{\n        return formatUnits(Number(mintPriceWei) * quantity)\n    }\n\n    async parseUnits(mintPrice:string) : Promise<BigInt> {\n       return parseUnits(mintPrice, 'ether')\n\n    }\n\n}\n\nexport {\n    MintWebService\n}","\nimport { inject, injectable } from \"inversify\";\n\n@injectable()\nclass QueueService {\n\n    constructor(\n      @inject(\"framework7\") private app,\n    ) {}\n\n    async queuePromiseView(promiseView) : Promise<any> {\n\n      const self = this\n\n      let queueItem: QueueItem = {\n        id: Guid.newGuid(),\n        icon: promiseView.icon,\n        title: promiseView.title,\n      }\n\n      let before = async function () {\n        return new Promise<void>((resolve, reject) => {\n          self._beforeSaveAction(queueItem)\n          resolve()\n        })\n      }\n\n      let after = async function() {\n\n        let result = await promiseView.promise\n\n        try {\n          // console.log(\"Transaction hash is \", result)\n          self._showSuccess(result, queueItem)\n        } catch(ex) {\n          self._showError(ex, queueItem)\n        }\n\n        return result\n\n      }\n\n      return before()\n              .then(after)\n    }\n\n    private _beforeSaveAction(queueItem: QueueItem) : void {     \n\n      // Create toast with close button\n      queueItem.toast = this.app.toast.create({\n        text: queueItem.title,\n        closeButton: true\n      })\n\n      queueItem.toast.open()\n\n    }\n\n    private _showError(error, queueItem:QueueItem) {\n\n      queueItem.toast.close()\n\n      console.log(error)\n\n      let toast = {\n        text: error.message,\n        closeButton: true,\n        closeButtonText: \"Close\",\n        closeTimeout: 5000\n      }\n\n      this.app.toast.create(toast).open()\n\n    }\n\n    private _showSuccess(result, queueItem:QueueItem): void {\n\n      const self = this\n\n      queueItem.toast.close()\n\n      let toast = {\n        text: \"Transaction Submitted\",\n        closeButton: true,\n        closeTimeout: 5000\n      }\n\n      this.app.toast.create(toast).open()\n    }\n\n}\n\ninterface QueueItem {\n  toast?: any\n\n  id: string,\n  icon: string,\n  title: string,\n}\n\n//from https://stackoverflow.com/questions/26501688/a-typescript-guid-class\nclass Guid {\n  static newGuid() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n          var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n          return v.toString(16);\n      });\n  }\n}\n\nexport { QueueService, QueueItem }\n","import { injectable, inject } from \"inversify\";\n\n\n\n@injectable()\nclass UiService {\n\n    constructor(@inject(\"framework7\") public app) {\n    }\n\n    showExceptionPopup(ex) {\n        console.log(ex)\n        this.app.dialog.alert(ex.message, \"There was an error\")\n    }\n\n    showPopup(message) {\n        this.app.dialog.alert(message)\n    }\n\n\n\n    showAlert(message) {\n        this.app.dialog.alert(message)\n    }\n\n\n    /**\n     * Spinner\n     */\n\n    spinnerDialog: any\n\n    showSpinner(message?:string) {\n\n        if (this.spinnerDialog) this.hideSpinner()\n\n        this.spinnerDialog = this.app.dialog.preloader(message ? message : \"Loading\")\n\n    }\n\n\n    hideSpinner() {\n        if (this.spinnerDialog) {\n            this.spinnerDialog.close()\n            this.spinnerDialog = null \n        }\n    }\n\n\n    progressDialog:any\n\n    showProgress(message:string) {\n\n        if (this.progressDialog) this.hideProgress()\n\n        var progress = 0\n\n        this.progressDialog = this.app.dialog.progress(message ? message : \"Loading\", progress)\n\n    }\n\n    setProgress(progress:number, message:string) {\n        if (this.progressDialog) {\n            this.progressDialog.setProgress(progress)\n            this.progressDialog.setText(message)\n        }\n    }\n\n    hideProgress() {\n        if (this.progressDialog) {\n            this.progressDialog.close()\n            this.progressDialog = null \n        }\n    }\n\n\n}\n\nexport {\n    UiService\n}","import { validate, ValidationError } from 'class-validator';\r\n\r\n\r\nclass ValidationException extends Error {\r\n\r\n    constructor(\r\n        public errors:ValidationError[]\r\n    ) {\r\n        super()\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    ValidationException\r\n}","import { inject, injectable } from \"inversify\";\r\nimport { ReaderSettings } from \"../dto/reader-settings.js\";\r\nimport { ValidationException } from \"../util/validation-exception.js\";\r\n\r\nimport { ReaderSettingsRepository } from \"../repository/reader-settings-repository.js\";\r\nimport { validate, ValidationError } from 'class-validator';\r\nimport { SchemaService } from \"./core/schema-service.js\";\r\n\r\n\r\n@injectable()\r\nclass ReaderSettingsService {\r\n\r\n  @inject(\"ReaderSettingsRepository\")\r\n  private readerSettingsRepository:ReaderSettingsRepository\r\n\r\n  @inject(\"SchemaService\")\r\n  private schemaService: SchemaService\r\n\r\n\r\n  constructor() { \r\n  }\r\n\r\n  async get(): Promise<ReaderSettings> {\r\n\r\n    await this.schemaService.load([\"reader-settings\"])\r\n\r\n    return this.readerSettingsRepository.get()\r\n  }\r\n\r\n  async put(readerSettings:ReaderSettings): Promise<void> {     \r\n\r\n    readerSettings.lastUpdated = new Date().toJSON()\r\n\r\n\r\n    //Validate\r\n    let errors: ValidationError[] = await validate(readerSettings, {\r\n        forbidUnknownValues: true,\r\n        whitelist: true\r\n    })\r\n\r\n    if (errors.length > 0) {\r\n        throw new ValidationException(errors)\r\n    }\r\n\r\n\r\n    await this.readerSettingsRepository.put(readerSettings)     \r\n  }\r\n\r\n\r\n  async updateCurrentPage(tokenId:number) {\r\n\r\n    let readerSettings = await this.get()\r\n\r\n    readerSettings.currentPage = tokenId\r\n    await this.put(readerSettings)\r\n\r\n  }\r\n}\r\n\r\n\r\nexport { ReaderSettingsService }\r\n\r\n","\r\nclass ERCEvent {\r\n    \r\n    _id?:string\r\n    _rev?:string \r\n    removed?:boolean \r\n    address?:string \r\n    data?:string \r\n    topics?:string[] \r\n    logIndex?:number \r\n    args:any[]\r\n    event?:string \r\n    eventSignature?:string\r\n    isTransfer:boolean\r\n    isMint:boolean\r\n    isBurn:boolean\r\n    namedArgs:any  \r\n    lastUpdated?:string \r\n    dateCreated?:string\r\n\r\n}\r\n\r\nexport {\r\n    ERCEvent\r\n}","import { inject, injectable } from \"inversify\"\r\n\r\nimport { ERCEvent } from \"../../sync/dto/erc-event.js\"\r\n\r\n\r\n@injectable()\r\nclass ERCEventService {\r\n\r\n    constructor() {}\r\n\r\n    async translateEventToERCEvent(event: any) : Promise<ERCEvent> {\r\n\r\n        let ercEvent = new ERCEvent()\r\n    \r\n        ercEvent.removed = event.removed\r\n        ercEvent.address = event.address\r\n        ercEvent.data = event.data\r\n        ercEvent.topics = event.topics\r\n        ercEvent.logIndex = event.index\r\n        ercEvent.event = event.fragment?.name\r\n        ercEvent.eventSignature = event.eventSignature\r\n        ercEvent.dateCreated = new Date().toJSON()\r\n    \r\n        //Convert BigInt args to strings    \r\n        ercEvent.args = event.args?.map(a => a.toString())\r\n\r\n        ercEvent.namedArgs = {}\r\n\r\n        //Check wether it's a transfer and if it's newer than the most recently recorded transfer\r\n        switch(ercEvent.event) {\r\n                                       \r\n            case \"Transfer\":\r\n                ercEvent.isTransfer = true\r\n                ercEvent.namedArgs.fromAddress = ercEvent.args[0]\r\n                ercEvent.namedArgs.toAddress = ercEvent.args[1]\r\n                ercEvent.namedArgs.tokenId = ercEvent.args[2]\r\n                break\r\n            case \"Approval\":\r\n                ercEvent.namedArgs.owner = ercEvent.args[0]\r\n                ercEvent.namedArgs.approved = ercEvent.args[1]\r\n                ercEvent.namedArgs.tokenId = ercEvent.args[2]\r\n                break\r\n            case \"ApprovalForAll\":\r\n                ercEvent.namedArgs.owner = ercEvent.args[0]\r\n                ercEvent.namedArgs.operator = ercEvent.args[1]\r\n                ercEvent.namedArgs.approved = ercEvent.args[2]\r\n                break\r\n        }\r\n    \r\n\r\n        if (ercEvent.isTransfer && ercEvent.namedArgs?.fromAddress == \"0x0000000000000000000000000000000000000000\") {\r\n            ercEvent.isMint = true\r\n        }\r\n\r\n        if (ercEvent.isTransfer && ercEvent.namedArgs?.toAddress == \"0x0000000000000000000000000000000000000000\") {\r\n            ercEvent.isBurn = true\r\n        }\r\n\r\n    \r\n        // ercEvent._id = `${ercEvent.blockHash}-${ercEvent.transactionHash}-${ercEvent.logIndex}`\r\n\r\n        return ercEvent\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport {\r\n    ERCEventService\r\n}\r\n\r\n","import { validate, ValidationError } from \"class-validator\";\r\nimport { inject, injectable } from \"inversify\";\r\nimport { ComponentState } from \"../../dto/component-state.js\";\r\nimport { ComponentStateRepository } from \"../../repository/component-state-repository.js\";\r\nimport { ValidationException } from \"../../util/validation-exception.js\";\r\n\r\n@injectable()\r\nclass ComponentStateService {\r\n\r\n    @inject(\"ComponentStateRepository\")\r\n    private componentStateRepository:ComponentStateRepository\r\n\r\n    constructor(\r\n    ) {}\r\n\r\n    async get(_id:string) {\r\n        return this.componentStateRepository.get(_id)\r\n    }\r\n\r\n\r\n    async put(componentState:ComponentState) {\r\n\r\n        if (!componentState.dateCreated) {\r\n            componentState.dateCreated = new Date().toJSON()\r\n        }\r\n\r\n        componentState.lastUpdated = new Date().toJSON()\r\n\r\n        //Validate\r\n        let errors: ValidationError[] = await validate(componentState, {\r\n            forbidUnknownValues: true,\r\n            whitelist: true\r\n        })\r\n\r\n        if (errors.length > 0) {\r\n            throw new ValidationException(errors)\r\n        }\r\n\r\n        return this.componentStateRepository.put(componentState)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport {\r\n    ComponentStateService\r\n}","import { Allow } from \"class-validator\"\r\n\r\nclass ComponentState {\r\n\r\n    @Allow()\r\n    _id?:string\r\n\r\n    @Allow()\r\n    _rev?:string \r\n    \r\n    @Allow()\r\n    data:any\r\n\r\n    @Allow()\r\n    dateCreated?:string\r\n\r\n    @Allow()\r\n    lastUpdated?:string\r\n}\r\n\r\nexport {\r\n    ComponentState\r\n}\r\n","import {  inject, injectable } from \"inversify\"\r\nimport { ComponentState } from \"../../dto/component-state.js\"\r\nimport {  DatabaseService } from \"../../service/core/database-service.js\"\r\nimport { ComponentStateRepository } from \"../component-state-repository.js\"\r\n\r\n\r\n@injectable()\r\nclass ComponentStateRepositoryBrowserImpl implements ComponentStateRepository {\r\n\r\n    db:any\r\n    dbName:string = \"component-state\"\r\n\r\n    @inject('DatabaseService')\r\n    private databaseService: DatabaseService\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            initialRecords: false,\r\n        })\r\n    }\r\n\r\n    constructor() {}\r\n\r\n\r\n    async get(_id:string): Promise<ComponentState> {        \r\n        return Object.assign(new ComponentState(), await this.db.get(_id))\r\n    }\r\n\r\n    async put(componentState:ComponentState) {\r\n        await this.db.put(componentState)\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport {\r\n    ComponentStateRepositoryBrowserImpl\r\n}","import { inject, injectable } from \"inversify\";\nimport { LeaderboardRowViewModel, TokenOwnerPage, TokenOwnerPageTotals } from \"../dto/token-owner-page.js\";\nimport { TokenOwnerPageRepository } from \"../repository/token-owner-page-repository.js\";\n\n\n\n@injectable()\nclass TokenOwnerPageService {\n\n    @inject(\"TokenOwnerPageRepository\")\n    private tokenOwnerPageRepository:TokenOwnerPageRepository\n\n    constructor(\n    ) { }\n\n    async getHome(): Promise<TokenOwnerPage> {\n        return this.tokenOwnerPageRepository.getHome()\n    }\n\n    async get(pageNumber: number): Promise<TokenOwnerPage> {\n        return this.tokenOwnerPageRepository.get(pageNumber)\n    }\n\n    async getTotals(): Promise<TokenOwnerPageTotals> {\n        return this.tokenOwnerPageRepository.getTotals()\n    }\n\n}\n\nexport {\n    TokenOwnerPageService\n}","import axios from \"axios\"\nimport { inject, injectable } from \"inversify\"\nimport { TokenOwnerPageRepository } from \"../../../reader/repository/token-owner-page-repository.js\"\nimport { TokenOwnerPage, TokenOwnerPageTotals } from \"../../dto/token-owner-page.js\"\n\n@injectable()\nclass TokenOwnerPageRepositoryBrowserImpl implements TokenOwnerPageRepository {\n\n    constructor(\n        @inject(\"baseURI\") private baseURI:Function,\n        @inject(\"hostname\") private hostname:Function\n    ) {}\n\n    async getHome(): Promise<TokenOwnerPage> {\n        const response = await axios.get(`${this.hostname()}${this.baseURI()}sync/tokenOwner/pages/home.json`)    \n        return response.data\n    }\n\n    async getTotals(): Promise<TokenOwnerPageTotals> {\n        const response = await axios.get(`${this.hostname()}${this.baseURI()}sync/tokenOwner/pages/total.json`)    \n        return response.data\n    }\n\n    async get(pageNumber: number): Promise<TokenOwnerPage> {   \n\n        const response = await axios.get(`${this.hostname()}${this.baseURI()}sync/tokenOwner/pages/${pageNumber}.json`)\n            \n        return response.data\n    }\n\n}\n\nexport {\n    TokenOwnerPageRepositoryBrowserImpl\n}\n\n\n","import { inject, injectable } from \"inversify\"\r\n\r\n\r\nimport { ItemService } from \"../../reader/service/item-service.js\"\r\nimport { ProcessedEvent, ProcessedTransaction, Sale, SalesReport, AttributeSaleReport, AttributeOverallSales } from \"../dto/processed-transaction.js\"\r\nimport { ProcessedTransactionRepository } from \"../repository/processed-transaction-repository.js\"\r\nimport { RowItemViewModel } from \"../dto/item-page.js\"\r\n\r\n\r\n@injectable()\r\nclass ProcessedTransactionService {\r\n\r\n    @inject(\"ProcessedTransactionRepository\")\r\n    private processedTransactionRepository:ProcessedTransactionRepository\r\n\r\n    @inject(\"ItemService\")\r\n    private itemService:ItemService\r\n\r\n    constructor() {}\r\n\r\n    async get(_id:string) : Promise<TransactionViewModel> {\r\n        return this.processedTransactionRepository.get(_id)\r\n    }\r\n\r\n\r\n    async getRowItemViewModels(processedEvents) {\r\n\r\n        let result = {}\r\n\r\n        let tokenIds = new Set<number>()\r\n\r\n\r\n        for (let processedEvent of processedEvents) {\r\n\r\n            if (!processedEvent.tokenId) continue\r\n            tokenIds.add(processedEvent.tokenId)\r\n        }\r\n\r\n        let rowItemViewModels = await this.itemService.getRowItemViewModelsByTokenIds(Array.from(tokenIds))\r\n\r\n\r\n        for (let rivm of rowItemViewModels) {\r\n            result[rivm.tokenId] = rivm\r\n        }\r\n\r\n        return result\r\n\r\n    }\r\n\r\n    async translateSalesToViewModels(sales:Sale[]) : Promise<SaleViewModel[]> {\r\n\r\n        let viewModels:SaleViewModel[] = []\r\n\r\n        for (let sale of sales) {\r\n            viewModels.push({\r\n                sale: sale,\r\n                item: await this.itemService.getRowItemViewModelsByTokenId(sale.tokenId)\r\n            })\r\n        }\r\n\r\n        return viewModels\r\n    }\r\n\r\n    async getSalesReport(): Promise<SalesReport> {\r\n        return this.processedTransactionRepository.getSalesReport()\r\n    }\r\n\r\n    async getAttributeSalesReport(traitType:string, value:string): Promise<AttributeSaleReport> {\r\n        return this.processedTransactionRepository.getAttributeSalesReport(traitType, value)\r\n    }\r\n    \r\n    async getAttributesOverall(): Promise<AttributeOverallSales> {\r\n        return this.processedTransactionRepository.getAttributesOverall()\r\n    }\r\n    \r\n    async getLargestSales(limit:number) : Promise<Sale[]> {\r\n        return this.processedTransactionRepository.getLargestSales(limit)\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ninterface TransactionsViewModel {\r\n    lastUpdated?:string\r\n    transactions?:TransactionViewModel[],\r\n    rowItemViewModels?:{}\r\n}\r\n\r\ninterface TransactionValue {\r\n    totalPrice?: number\r\n    usdValue?:number\r\n    currency?: string\r\n    tokenPrice?: any,\r\n    markets?: any\r\n    aggregator?:string\r\n    tokenIds?: number[]\r\n}\r\n\r\n\r\ninterface ProcessedTransactionViewModel {\r\n    _id?:string\r\n    _rev?:string \r\n    blockNumber?:number\r\n    transactionIndex?:number\r\n    transactionFrom?:string\r\n    tokenTraders?:string[]\r\n    timestamp?:number\r\n    tokenIds?:number[]\r\n    transactionValue?:TransactionValue\r\n    previousId?:string\r\n}\r\n\r\ninterface ProcessedEventViewModel {\r\n    isMint: boolean\r\n    isBurn: boolean\r\n    namedArgs: any\r\n    tokenId: number\r\n    fromAddress: string\r\n    toAddress: string\r\n    price: number\r\n    currency: string\r\n    usdValue: number\r\n    event: string\r\n}\r\n\r\ninterface TransactionViewModel {\r\n    transaction?:ProcessedTransactionViewModel\r\n    events?:ProcessedEventViewModel[]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface SaleViewModel {\r\n    sale:Sale\r\n    item:RowItemViewModel\r\n}\r\n\r\n\r\nexport {\r\n    ProcessedTransactionService, TransactionsViewModel, SaleViewModel, TransactionViewModel\r\n}\r\n\r\n","import axios from \"axios\";\nimport { inject, injectable } from \"inversify\";\nimport { AttributeOverallSales, AttributeSaleReport, SalesReport } from \"../../dto/processed-transaction.js\";\n\n\nimport { ProcessedTransactionService, SaleViewModel, TransactionsViewModel } from \"../processed-transaction-service.js\";\n\n\n@injectable()\nclass TransactionWebService {\n\n    \n    @inject(\"ProcessedTransactionService\")\n    private processedTransactionService:ProcessedTransactionService\n\n\n    constructor(\n        @inject(\"baseURI\") private baseURI:Function\n    ) {}\n\n    async getHomeViewModel() {\n\n        let result = await axios.get(`${this.baseURI()}sync/home.json`, {\n            // query URL without using browser cache\n            headers: {\n              'Cache-Control': 'no-cache',\n              'Pragma': 'no-cache',\n              'Expires': '0',\n            },\n        })\n\n        return result.data\n    }\n\n\n    async list(page?:number) : Promise<TransactionsViewModel> {\n\n        let latest = await this.getLatest()\n\n\n        let result = await axios.get(`${this.baseURI()}sync/transactions/activity/${page}.json`)\n\n        let transactionsViewModel = result.data\n\n        transactionsViewModel.lastUpdated = latest.lastUpdated\n\n        return transactionsViewModel\n\n    }\n\n\n    async listByAddress(address:string, page:number) : Promise<TransactionsViewModel> {\n        \n        let result = await axios.get(`${this.baseURI()}sync/tokenOwner/${address}/activity/${page}.json`)\n\n        let transactionsViewModel = result.data\n\n        let latest = await this.getLatest()\n        transactionsViewModel.lastUpdated = latest.lastUpdated\n\n        return transactionsViewModel\n\n    }\n\n\n    async getLatest() {\n        let result = await axios.get(`${this.baseURI()}sync/transactions/latest.json`, {\n            // query URL without using browser cache\n            headers: {\n              'Cache-Control': 'no-cache',\n              'Pragma': 'no-cache',\n              'Expires': '0',\n            },\n          })\n        return result.data\n    }\n\n    async getRecentActivity() : Promise<TransactionsViewModel> {\n\n        let result = await axios.get(`${this.baseURI()}sync/transactions/recentActivity.json`, {\n            // query URL without using browser cache\n            headers: {\n              'Cache-Control': 'no-cache',\n              'Pragma': 'no-cache',\n              'Expires': '0',\n            },\n          })\n\n        let transactionsViewModel:TransactionsViewModel = result.data\n\n\n        return transactionsViewModel\n\n    }\n\n\n    async getSalesReport(): Promise<SalesReport> {\n        return this.processedTransactionService.getSalesReport()\n    }\n\n    async getAttributeSalesReport(traitType:string, value:string): Promise<AttributeSaleReport> {\n        return this.processedTransactionService.getAttributeSalesReport(traitType, value)\n    }\n\n    async getAttributesOverall(): Promise<AttributeOverallSales> {\n        return this.processedTransactionService.getAttributesOverall()\n    }\n\n\n    async getLargestSales(limit:number) {\n\n        let sales = await  this.processedTransactionService.getLargestSales(limit)\n\n        return sales\n\n    }\n\n    abbreviateDollars(number, digits) {\n\n        if (!number) return \"$0\"\n\n        var SI_SYMBOL = [\"\", \"\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n\n\n        // what tier? (determines SI symbol)\n        var tier = Math.log10(Math.abs(number)) / 3 | 0\n\n        // if zero or thousands, we don't need a suffix\n        if(tier == 0 || tier == 1) {\n          let result = new Intl.NumberFormat('en-US', { currency: \"USD\", style:\"currency\" }).format(number)\n          return result\n        }\n\n        // get suffix and determine scale\n        var suffix = SI_SYMBOL[tier]\n        var scale = Math.pow(10, tier * 3)\n\n        // scale the number\n        var scaled = number / scale\n\n        // format number and add suffix\n        return new Intl.NumberFormat('en-US', { currency: \"USD\", style:\"currency\" }).format(scaled) + suffix\n    }\n\n\n}\n\ninterface LatestTransactionInfo {\n    _id: string\n    lastUpdated:string\n}\n\n\n\nexport {\n    TransactionWebService\n}","import axios from \"axios\"\r\nimport {  inject, injectable } from \"inversify\"\r\nimport { AttributeOverallSales, AttributeSaleReport, ProcessedTransaction, Sale, SalesReport } from \"../../dto/processed-transaction.js\"\r\nimport { TransactionsViewModel, TransactionViewModel } from \"../../service/processed-transaction-service.js\"\r\nimport { ProcessedTransactionRepository } from \"../processed-transaction-repository.js\"\r\n\r\n\r\n\r\n@injectable()\r\nclass ProcessedTransactionRepositoryBrowserImpl implements ProcessedTransactionRepository {\r\n\r\n\r\n\r\n    @inject('baseURI') \r\n    private baseURI:Function\r\n\r\n    async get(_id: string): Promise<TransactionViewModel> {\r\n\r\n        let processedTransaction\r\n    \r\n\r\n        try {\r\n            //Download it.\r\n            let result = await axios.get(`${this.baseURI()}sync/transactions/${_id}.json`)\r\n            processedTransaction = result.data\r\n\r\n        } catch(ex) {\r\n            console.log(ex)\r\n        }\r\n\r\n        return processedTransaction\r\n\r\n\r\n    }\r\n\r\n    async getSalesReport(): Promise<SalesReport> {\r\n\r\n        let salesReport\r\n    \r\n        try {\r\n            //Download it.\r\n            let result = await axios.get(`${this.baseURI()}sync/sales/overall.json`)\r\n            salesReport = result.data\r\n\r\n        } catch(ex) {\r\n            console.log(ex)\r\n        }\r\n\r\n        return salesReport\r\n\r\n    }\r\n\r\n    async getAttributeSalesReport(traitType:string, value:string): Promise<AttributeSaleReport> {\r\n\r\n        let attributeSalesReport\r\n    \r\n        try {\r\n            //Download it.\r\n            let result = await axios.get(`${this.baseURI()}sync/attributes/${this.attributeKeyToInteger(`${traitType}::::${value}`)}/attribute.json`)\r\n            attributeSalesReport = result.data\r\n\r\n        } catch(ex) {\r\n            console.log(ex)\r\n        }\r\n\r\n        return attributeSalesReport\r\n    }\r\n\r\n    async getAttributesOverall(): Promise<AttributeOverallSales> {\r\n\r\n        let attributeOverallSales\r\n    \r\n        try {\r\n            //Download it.\r\n            let result = await axios.get(`${this.baseURI()}sync/attributes/totals.json`)\r\n            attributeOverallSales = result.data\r\n\r\n        } catch(ex) {\r\n            console.log(ex)\r\n        }\r\n\r\n        return attributeOverallSales\r\n\r\n    }\r\n\r\n    private attributeKeyToInteger(key:string) {\r\n\r\n        let hash = 0, i, chr\r\n  \r\n        if (key.length === 0) return hash\r\n  \r\n        for (i = 0; i < key.length; i++) {\r\n  \r\n          chr = key.charCodeAt(i)\r\n          hash = ((hash << 5) - hash) + chr\r\n          hash |= 0 // Convert to 32bit integer\r\n        }\r\n        \r\n        return hash\r\n    }\r\n\r\n    async getLargestSales(limit:number): Promise<Sale[]> {\r\n\r\n        let largestSales\r\n    \r\n        try {\r\n            //Download it.\r\n            let result = await axios.get(`${this.baseURI()}sync/sales/largest-${limit}.json`)\r\n            largestSales = result.data\r\n\r\n        } catch(ex) {\r\n            console.log(ex)\r\n        }\r\n\r\n        return largestSales\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n    ProcessedTransactionRepositoryBrowserImpl\r\n}","\r\nclass TokenOwner {\r\n    \r\n    declare _id?:string\r\n    declare _rev?:string \r\n    declare count?:number\r\n    declare rank?:number\r\n    declare overallRank?:number\r\n    declare tokenIds?:number[]\r\n    declare latestTransactionInitiatorId?:string\r\n    declare latestTransactionId?:string\r\n    declare ensName?:string\r\n    declare lastActive?:string \r\n    declare lastUpdated?:string \r\n    declare dateCreated?:string\r\n\r\n}\r\n\r\nexport {\r\n    TokenOwner\r\n}","import { inject, injectable } from \"inversify\"\r\n\r\nimport { WalletService } from \"../../reader/service/core/wallet-service.js\"\r\nimport { TokenOwner } from \"../dto/token-owner.js\"\r\nimport { TokenOwnerRepository } from \"../repository/token-owner-repository.js\"\r\n\r\n@injectable()\r\nclass TokenOwnerService {\r\n\r\n    @inject(\"WalletService\")\r\n    private walletService:WalletService\r\n\r\n    @inject(\"TokenOwnerRepository\")\r\n    private tokenOwnerRepository:TokenOwnerRepository\r\n\r\n    constructor() {}\r\n\r\n\r\n    async get(_id:string): Promise<TokenOwner> {        \r\n        return this.tokenOwnerRepository.get(_id)\r\n    }\r\n\r\n    async getDisplayName(_id:string) : Promise<string> {\r\n\r\n        if (!_id) return\r\n\r\n        let ens = await this.tokenOwnerRepository.getENS(_id)\r\n\r\n        if (ens) return ens\r\n        return this.walletService.truncateEthAddress(_id)\r\n\r\n    }\r\n\r\n    async getOrCreate(address:string) {\r\n\r\n        let tokenOwner: TokenOwner \r\n\r\n        if (!tokenOwner) {\r\n            try {\r\n                tokenOwner = await this.get(address)\r\n            } catch (ex) { }\r\n        }\r\n\r\n        if (!tokenOwner) {\r\n            tokenOwner = new TokenOwner()\r\n            tokenOwner._id = address\r\n            tokenOwner.tokenIds = []\r\n            tokenOwner.count = 0\r\n        }\r\n\r\n        return tokenOwner\r\n\r\n    }\r\n\r\n\r\n    async put(tokenOwner:TokenOwner) {\r\n        return this.tokenOwnerRepository.put(tokenOwner)\r\n    }\r\n\r\n    /**\r\n     * No validation for speeeeeeeeed\r\n     * @param tokenOwners \r\n     * @returns \r\n     */\r\n     async putAll(tokenOwners:TokenOwner[]) {\r\n\r\n        //Update lastUpdated\r\n        tokenOwners.forEach(tokenOwner => {\r\n\r\n            if (!tokenOwner._id) {\r\n                tokenOwner.dateCreated = new Date().toJSON()\r\n            } \r\n    \r\n\r\n            tokenOwner.lastUpdated = new Date().toJSON()\r\n        })\r\n\r\n        return this.tokenOwnerRepository.putAll(tokenOwners)\r\n    }\r\n\r\n\r\n    async list(limit: number, skip: number): Promise<TokenOwner[]> {\r\n        return this.tokenOwnerRepository.list(limit, skip)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport {\r\n    TokenOwnerService\r\n}\r\n\r\n","import { Changeset } from \"../../reader/service/core/database-service.js\"\nimport { TokenOwner } from \"../dto/token-owner.js\"\n\n\ninterface TokenOwnerRepository {\n    get(_id:string): Promise<TokenOwner>\n    put(tokenOwner:TokenOwner) : Promise<TokenOwner>\n    putAll(tokenOwners:TokenOwner[]) : Promise<void>\n    getENS(_id:string) : Promise<string>\n    list(limit: number, skip: number): Promise<TokenOwner[]> \n\n}\n\n\nlet changesets:Changeset[] = [\n    {\n        id: '0',\n        changeset: async (db) => {\n\n            await db.createIndex({\n                index: {\n                    fields: ['count']\n                }\n            })\n\n            await db.put({\n                _id: '_design/by_token_id',\n                views: {\n                    by_token_id: {\n                            map: function (doc) { \n                          \n                                for (let tokenId of doc.tokenIds) {\n                                    //@ts-ignore\n                                    emit(tokenId)\n                                }\n\n                            }.toString(),\n                    }\n                }\n            })\n\n        }\n    }\n]\n\n\nexport {\n    TokenOwnerRepository, changesets\n}\n","import axios from \"axios\"\r\nimport {  inject, injectable } from \"inversify\"\r\nimport { TokenOwner } from \"../../dto/token-owner.js\"\r\nimport { DatabaseService } from \"../../../reader/service/core/database-service.js\"\r\nimport { changesets, TokenOwnerRepository } from \"../token-owner-repository.js\"\r\n\r\n\r\n@injectable()\r\nclass TokenOwnerRepositoryBrowserImpl implements TokenOwnerRepository {\r\n  \r\n    db:any\r\n    dbName:string = \"token-owners\"\r\n\r\n    @inject('DatabaseService')\r\n    private databaseService:DatabaseService\r\n\r\n    @inject('baseURI') \r\n    private baseURI:Function\r\n\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            initialRecords: false,\r\n            changesets: changesets\r\n        })\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    async getENS(_id: string): Promise<string> {\r\n\r\n        let name\r\n\r\n        try {\r\n            //Download it.\r\n            let result:any = await axios.get(`${this.baseURI()}sync/tokenOwner/${_id}/ens.json`)\r\n            name = result.data?.name\r\n        } catch(ex) {}\r\n\r\n        return name\r\n    }\r\n\r\n\r\n    async get(_id:string): Promise<TokenOwner> {    \r\n        \r\n        try {\r\n            //Download it.\r\n            let result = await axios.get(`${this.baseURI()}sync/tokenOwner/${_id}/tokenOwner.json`)\r\n            return Object.assign(new TokenOwner(), result.data)\r\n        } catch(ex) {\r\n            console.log(ex)\r\n        }\r\n\r\n    }\r\n\r\n    async put(tokenOwner:TokenOwner) : Promise<TokenOwner> {\r\n        return\r\n    }\r\n\r\n    async putAll(tokenOwners:TokenOwner[]) : Promise<void> {\r\n        return\r\n    }\r\n\r\n    async list(limit: number, skip: number): Promise<TokenOwner[]> {\r\n        return\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n    TokenOwnerRepositoryBrowserImpl\r\n}","import { inject, injectable } from \"inversify\"\r\nimport { Token } from \"../dto/token.js\"\r\nimport { TokenRepository } from \"../repository/token-repository.js\"\r\n\r\n@injectable()\r\nclass TokenService {\r\n\r\n    @inject(\"TokenRepository\")\r\n    private tokenRepository:TokenRepository\r\n\r\n    constructor() {}\r\n\r\n\r\n    async get(_id:string): Promise<Token> {        \r\n        return this.tokenRepository.get(_id)\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport {\r\n    TokenService\r\n}\r\n\r\n","import { inject, injectable } from \"inversify\"\r\nimport { RowItemViewModel } from \"../../dto/item-page.js\"\r\nimport { Item } from \"../../dto/item.js\"\r\nimport { Changeset, DatabaseService } from \"../../service/core/database-service.js\"\r\nimport { RowItemViewModelRepository } from \"../row-item-view-model-repository.js\"\r\n\r\n\r\n\r\n\r\n@injectable()\r\nclass RowItemViewModelRepositoryBrowserImpl implements RowItemViewModelRepository {\r\n\r\n\r\n    changesets:Changeset[] = [\r\n        {\r\n            id: '0',\r\n            changeset: async (db) => {\r\n\r\n                await db.createIndex({\r\n                    index: {\r\n                        fields: ['tokenId']\r\n                    }\r\n                })\r\n                        \r\n            }\r\n        }\r\n    ]\r\n\r\n\r\n    db:any\r\n    dbName:string = \"row-item-view-models\"\r\n    \r\n    @inject('DatabaseService')\r\n    private databaseService: DatabaseService\r\n    \r\n    constructor() {}\r\n\r\n    async load() {\r\n        this.db = await this.databaseService.getDatabase({\r\n            name: this.dbName,\r\n            initialRecords: true,\r\n            initialRecordsPath: \"t/all.json\",\r\n            changesets: this.changesets\r\n        })\r\n    }\r\n\r\n\r\n    async get(_id: string): Promise<RowItemViewModel> {\r\n        return this.db.get(_id)\r\n    }\r\n    \r\n\r\n\r\n    async put(item: Item) {\r\n        await this.db.put(item)\r\n    }\r\n\r\n\r\n\r\n    async getByTokenIds(ids:number[]) : Promise<RowItemViewModel[]> {\r\n\r\n        let response = await this.db.find({\r\n            selector: {\r\n                tokenId: { $in: ids },\r\n            }\r\n        })\r\n\r\n        if (response.docs?.length > 0) {\r\n            return response.docs\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n}\r\n\r\nexport {\r\n    RowItemViewModelRepositoryBrowserImpl\r\n}\r\n\r\n\r\n","import { Container } from \"inversify\";\r\n\r\nimport Framework7 from 'framework7';\r\nimport axios from \"axios\"\r\nimport he from 'he'\r\n\r\nimport { BrowserProvider } from \"ethers\"\r\n\r\nimport PouchDB from 'pouchdb-browser';\r\nimport PouchFind from 'pouchdb-find'\r\n// import PouchQuickSearch from 'pouchdb-quick-search'\r\n\r\n//Enable find plugin\r\nPouchDB.plugin(PouchFind)\r\n\r\n//Enable quicksearch\r\n// PouchDB.plugin(PouchQuickSearch)\r\n\r\nimport dayjs from \"dayjs\"\r\nimport relativeTime from 'dayjs/plugin/relativeTime.js'\r\ndayjs.extend(relativeTime)\r\n\r\nimport localizedFormat from 'dayjs/plugin/localizedFormat.js'\r\ndayjs.extend(localizedFormat)\r\n\r\n\r\n//Import CSS\r\nimport 'framework7/css/bundle'\r\nimport 'framework7-icons/css/framework7-icons.css'\r\nimport './html/css/app.css'\r\n\r\n\r\n// Import additional components\r\nimport Dialog from 'framework7/components/dialog'\r\nimport Toast from 'framework7/components/toast'\r\nimport Preloader from 'framework7/components/preloader'\r\nimport VirtualList from 'framework7/components/virtual-list'\r\nimport ListIndex from 'framework7/components/list-index'\r\nimport Range from 'framework7/components/range'\r\nimport Accordion from 'framework7/components/accordion'\r\nimport InfiniteScroll from 'framework7/components/infinite-scroll'\r\nimport Card from 'framework7/components/card'\r\nimport Chip from 'framework7/components/chip'\r\nimport Form from 'framework7/components/form'\r\nimport Grid from 'framework7/components/grid'\r\nimport Popup from 'framework7/components/popup'\r\nimport Popover from 'framework7/components/popover'\r\nimport Stepper from 'framework7/components/stepper'\r\n\r\n\r\n\r\n// Install F7 Components using .use() method on Framework7 class:\r\nFramework7.use([Dialog, Toast, Preloader, VirtualList, ListIndex, Card, Chip, Form, Grid, \r\n  Range, Accordion, Popup, InfiniteScroll, Popover, Stepper])\r\n\r\n\r\n\r\nimport Navbar from './components/reader/navbar.f7.html'\r\n\r\nimport TokenToolbar from './components/reader/token-toolbar.f7.html'\r\nimport Transaction from './components/reader/transaction.f7.html'\r\n\r\n// import NftInfo from './components/reader/item/nft-info.f7.html'\r\n\r\nimport AttributeFilter from './components/reader/channel/attribute-filter.f7.html'\r\nimport ExploreTotalInfo from './components/reader/channel/explore-total-info.f7.html'\r\n\r\nimport MintInfo from './components/reader/channel/mint-info.f7.html'\r\nimport LargestSales from './components/reader/channel/largest-sales.f7.html'\r\n\r\nimport TransactionRow from './components/reader/channel/transaction-row.f7.html'\r\nimport LeaderboardRows from './components/reader/channel/leaderboard-rows.f7.html'\r\n\r\n\r\n\r\nimport SearchList from './components/reader/item/search-list.f7.html'\r\nimport InfiniteScrollContent from './components/reader/item/infinite-scroll-content.f7.html'\r\n\r\n\r\nimport { WalletService } from \"./service/core/wallet-service.js\";\r\nimport { WalletServiceImpl } from \"./service/core/wallet-service-impl.js\";\r\nimport { ChannelRepository } from \"./repository/channel-repository.js\";\r\nimport { TokenRepository } from \"./repository/token-repository.js\";\r\n\r\nimport { ItemRepository } from \"./repository/item-repository.js\";\r\nimport { AuthorRepository } from \"./repository/author-repository.js\";\r\nimport { MetadataRepository } from \"./repository/metadata-repository.js\";\r\nimport { ImageRepository } from \"./repository/image-repository.js\";\r\nimport { AnimationRepository } from \"./repository/animation-repository.js\";\r\nimport { StaticPageRepository } from \"./repository/static-page-repository.js\";\r\nimport { ItemPageRepository } from \"./repository/item-page-repository.js\";\r\nimport { AttributeTotalRepository } from \"./repository/attribute-total-repository.js\";\r\nimport { ReaderSettingsRepository } from \"./repository/reader-settings-repository.js\";\r\nimport { ChannelRepositoryBrowserImpl } from \"./repository/browser/channel-repository-impl.js\";\r\nimport { ItemRepositoryBrowserImpl } from \"./repository/browser/item-repository-impl.js\";\r\nimport { AuthorRepositoryBrowserImpl } from \"./repository/browser/author-repository-impl.js\";\r\nimport { MetadataRepositoryBrowserImpl } from \"./repository/browser/metadata-repository-impl.js\";\r\nimport { ImageRepositoryBrowserImpl } from \"./repository/browser/image-repository-impl.js\";\r\nimport { AnimationRepositoryBrowserImpl } from \"./repository/browser/animation-repository-impl.js\";\r\nimport { StaticPageRepositoryBrowserImpl } from \"./repository/browser/static-page-repository-impl.js\";\r\nimport { ItemPageRepositoryBrowserImpl } from \"./repository/browser/item-page-repository-impl.js\";\r\nimport { AttributeTotalRepositoryBrowserImpl } from \"./repository/browser/attribute-total-repository-impl.js\";\r\nimport { ReaderSettingsRepositoryBrowserImpl } from \"./repository/browser/reader-settings-repository-impl.js\";\r\nimport { TokenRepositoryBrowserImpl } from \"./repository/browser/token-repository-impl.js\";\r\n\r\nimport { ChannelWebService } from \"./service/web/channel-web-service.js\";\r\nimport { ItemWebService } from \"./service/web/item-web-service.js\";\r\nimport { AuthorWebService } from \"./service/web/author-web-service.js\";\r\nimport { MintWebService } from \"./service/web/mint-web-service.js\";\r\nimport { StaticPageService } from \"./service/static-page-service.js\";\r\nimport { ItemPageService } from \"./service/item-page-service.js\";\r\nimport { QueueService } from \"./service/core/queue-service.js\";\r\nimport { PagingService } from \"./service/core/paging-service.js\";\r\nimport { DatabaseService } from \"./service/core/database-service.js\";\r\nimport { AnimationService } from \"./service/animation-service.js\";\r\nimport { UiService } from \"./service/core/ui-service.js\";\r\nimport { ItemService } from \"./service/item-service.js\";\r\nimport { ImageService } from \"./service/image-service.js\";\r\nimport { ChannelService } from \"./service/channel-service.js\";\r\nimport { AuthorService } from \"./service/author-service.js\";\r\nimport { TokenContractService } from \"./service/token-contract-service.js\";\r\nimport { SchemaService } from \"./service/core/schema-service.js\";\r\nimport { QuillService } from \"./service/core/quill-service.js\";\r\nimport { ReaderSettingsService } from \"./service/reader-settings-service.js\";\r\n\r\n\r\nimport { ERCEventService } from \"./service/erc-event-service.js\";\r\nimport { AttributeTotalService } from \"./service/attribute-total-service.js\"; \r\nimport { ComponentStateService } from \"./service/core/component-state-service.js\";\r\nimport { ComponentStateRepository } from \"./repository/component-state-repository.js\";\r\nimport { ComponentStateRepositoryBrowserImpl } from \"./repository/browser/component-state-repository-impl.js\";\r\nimport { ComponentState } from \"./dto/component-state.js\";\r\n\r\n\r\nimport { TokenOwnerPageService } from \"./service/token-owner-page-service.js\";\r\nimport { TokenOwnerPageRepository } from \"./repository/token-owner-page-repository.js\";\r\nimport { TokenOwnerPageRepositoryBrowserImpl } from \"./repository/browser/token-owner-page-repository-impl.js\";\r\n\r\n\r\nimport { TransactionWebService } from \"./service/web/transaction-web-service.js\";\r\nimport { ProcessedTransactionService } from \"./service/processed-transaction-service.js\";\r\nimport { ProcessedTransactionRepository } from \"./repository/processed-transaction-repository.js\";\r\nimport { ProcessedTransactionRepositoryBrowserImpl } from \"./repository/browser/processed-transaction-repository-impl.js\";\r\nimport { TokenOwnerService } from \"./service/token-owner-service.js\";\r\nimport { TokenOwnerRepositoryBrowserImpl } from \"./repository/browser/token-owner-repository-impl.js\";\r\nimport { TokenOwnerRepository } from \"./repository/token-owner-repository.js\";\r\nimport { ContractStateRepository } from \"../sync/repository/contract-state-repository.js\";\r\nimport { TokenService } from \"./service/token-service.js\";\r\nimport { RowItemViewModelRepositoryBrowserImpl } from \"./repository/browser/row-item-view-model-repository-impl.js\";\r\nimport { RowItemViewModelRepository } from \"./repository/row-item-view-model-repository.js\";\r\n\r\n\r\n\r\nlet container: Container\r\n\r\n\r\nasync function getMainContainer(customContainer:Container, theBaseURI:string, theHostname:string, version:string, routes:any[], channelId:string) {\r\n\r\n  if (container) return container\r\n\r\n  container = customContainer\r\n  \r\n  globalThis.baseURI = theBaseURI\r\n  globalThis.hostname = theHostname\r\n  globalThis.channelId = channelId\r\n\r\n  function framework7() {\r\n\r\n    Framework7.registerComponent(\"nav-bar\", Navbar)\r\n\r\n    Framework7.registerComponent(\"token-toolbar\", TokenToolbar)\r\n\r\n    // Framework7.registerComponent(\"nft-info\", NftInfo)\r\n    Framework7.registerComponent(\"attribute-filter\", AttributeFilter)\r\n    Framework7.registerComponent(\"explore-total-info\", ExploreTotalInfo)\r\n\r\n    Framework7.registerComponent(\"mint-info\", MintInfo)\r\n    Framework7.registerComponent(\"largest-sales\", LargestSales)\r\n\r\n\r\n    Framework7.registerComponent(\"transaction-viewer\", Transaction)\r\n    Framework7.registerComponent(\"transaction-row\", TransactionRow)\r\n\r\n    Framework7.registerComponent(\"leaderboard-rows\", LeaderboardRows)\r\n\r\n\r\n    Framework7.registerComponent(\"search-list\", SearchList)\r\n    Framework7.registerComponent(\"infinite-scroll-content\", InfiniteScrollContent)\r\n\r\n    \r\n\r\n    globalThis.app = new Framework7({\r\n      el: '#app', // App root element\r\n      id: 'large-reader', // App bundle ID\r\n      name: 'Large Reader', // App name\r\n      theme: 'auto', // Automatic theme detection\r\n      init: false,\r\n      \r\n      view: {\r\n        browserHistory: true,\r\n        browserHistorySeparator: \"\",\r\n        browserHistoryOnLoad: false,\r\n        browserHistoryInitialMatch: false\r\n      },\r\n      \r\n      navbar: {\r\n        hideOnPageScroll: true\r\n      },\r\n\r\n      // subnavbar: {\r\n      //   hideOnPageScroll: true\r\n      // },\r\n\r\n      toolbar: {\r\n        hideOnPageScroll: true\r\n      },\r\n\r\n      routes: routes\r\n    })\r\n\r\n    return globalThis.app\r\n  }\r\n\r\n  container.bind(\"framework7\").toConstantValue(framework7())\r\n\r\n  container.bind(\"version\").toConstantValue(version)\r\n\r\n  container.bind(\"PouchDB\").toConstantValue(async () => {\r\n    return PouchDB\r\n  })\r\n\r\n\r\n  container.bind(\"provider\").toConstantValue(async () => {\r\n\r\n    if (typeof window !== \"undefined\" && window['ethereum']) {\r\n\r\n      //@ts-ignore\r\n      window.web3Provider = window.ethereum\r\n\r\n      return new BrowserProvider(window['ethereum'])\r\n\r\n    }\r\n\r\n  })\r\n\r\n\r\n  container.bind(\"contracts\").toConstantValue(async () => {\r\n\r\n    let contract\r\n    let contractABI\r\n\r\n\r\n    let contractResponse = await axios.get(`${globalThis.hostname}${globalThis.baseURI}backup/contract/contract.json`, { responseType: 'json'})\r\n    let contractABIResponse = await axios.get(`${globalThis.hostname}${globalThis.baseURI}backup/contract/contract-abi.json`, { responseType: 'json'})\r\n\r\n\r\n    if (contractResponse.status === 200) {\r\n        contract = contractResponse.data\r\n    }\r\n\r\n    if (contractResponse.status === 200) {\r\n        contractABI = contractABIResponse.data\r\n    }\r\n\r\n    if (!contract.contractAddress) return []\r\n\r\n    //Override address\r\n    contractABI['Channel'].address = contract.contractAddress\r\n\r\n    return contractABI\r\n\r\n  })\r\n\r\n  container.bind(\"baseURI\").toConstantValue(() => {\r\n    return globalThis.baseURI\r\n  })\r\n\r\n  container.bind(\"hostname\").toConstantValue(() => {\r\n    return globalThis.hostname\r\n  })\r\n\r\n  container.bind(\"channelId\").toConstantValue(() => {\r\n    return globalThis.channelId\r\n  })\r\n\r\n\r\n  container.bind<WalletService>(\"WalletService\").to(WalletServiceImpl).inSingletonScope()\r\n\r\n  container.bind<ChannelRepository>(\"ChannelRepository\").to(ChannelRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<ItemRepository>(\"ItemRepository\").to(ItemRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<AuthorRepository>(\"AuthorRepository\").to(AuthorRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<MetadataRepository>(\"MetadataRepository\").to(MetadataRepositoryBrowserImpl).inSingletonScope()\r\n  \r\n  container.bind<ImageRepository>(\"ImageRepository\").to(ImageRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<AnimationRepository>(\"AnimationRepository\").to(AnimationRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<StaticPageRepository>(\"StaticPageRepository\").to(StaticPageRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<ItemPageRepository>(\"ItemPageRepository\").to(ItemPageRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<TokenOwnerPageRepository>(\"TokenOwnerPageRepository\").to(TokenOwnerPageRepositoryBrowserImpl).inSingletonScope()\r\n\r\n  container.bind<AttributeTotalRepository>(\"AttributeTotalRepository\").to(AttributeTotalRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<ReaderSettingsRepository>(\"ReaderSettingsRepository\").to(ReaderSettingsRepositoryBrowserImpl).inSingletonScope()\r\n\r\n  //@ts-ignore\r\n  container.bind<ContractStateRepository>(\"ContractStateRepository\").to({}).inSingletonScope()\r\n  container.bind<ComponentStateRepository>(\"ComponentStateRepository\").to(ComponentStateRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<TokenOwnerRepository>(\"TokenOwnerRepository\").to(TokenOwnerRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<TokenRepository>(\"TokenRepository\").to(TokenRepositoryBrowserImpl).inSingletonScope()\r\n\r\n  container.bind<ProcessedTransactionRepository>(\"ProcessedTransactionRepository\").to(ProcessedTransactionRepositoryBrowserImpl).inSingletonScope()\r\n  container.bind<RowItemViewModelRepository>(\"RowItemViewModelRepository\").to(RowItemViewModelRepositoryBrowserImpl).inSingletonScope()\r\n\r\n\r\n  container.bind<ChannelWebService>(\"ChannelWebService\").to(ChannelWebService).inSingletonScope()\r\n  container.bind<ItemWebService>(\"ItemWebService\").to(ItemWebService).inSingletonScope()\r\n  container.bind<AuthorWebService>(\"AuthorWebService\").to(AuthorWebService).inSingletonScope()\r\n  container.bind<MintWebService>(\"MintWebService\").to(MintWebService).inSingletonScope()\r\n  container.bind<StaticPageService>(\"StaticPageService\").to(StaticPageService).inSingletonScope()\r\n  container.bind<ItemPageService>(\"ItemPageService\").to(ItemPageService).inSingletonScope()\r\n  container.bind<QueueService>(\"QueueService\").to(QueueService).inSingletonScope()\r\n  container.bind<TransactionWebService>(\"TransactionWebService\").to(TransactionWebService).inSingletonScope()\r\n\r\n\r\n  container.bind<PagingService>(\"PagingService\").to(PagingService).inSingletonScope()\r\n  container.bind<DatabaseService>(\"DatabaseService\").to(DatabaseService).inSingletonScope()\r\n  container.bind<AnimationService>(\"AnimationService\").to(AnimationService).inSingletonScope()\r\n\r\n  container.bind<UiService>(\"UiService\").to(UiService).inSingletonScope()\r\n  container.bind<ItemService>(\"ItemService\").to(ItemService).inSingletonScope()\r\n  container.bind<ImageService>(\"ImageService\").to(ImageService).inSingletonScope()\r\n  container.bind<ChannelService>(\"ChannelService\").to(ChannelService).inSingletonScope()\r\n  container.bind<AuthorService>(\"AuthorService\").to(AuthorService).inSingletonScope()\r\n  container.bind<TokenContractService>(\"TokenContractService\").to(TokenContractService).inSingletonScope()\r\n  container.bind<SchemaService>(\"SchemaService\").to(SchemaService).inSingletonScope()\r\n  container.bind<QuillService>(\"QuillService\").to(QuillService).inSingletonScope()\r\n  container.bind<AttributeTotalService>(\"AttributeTotalService\").to(AttributeTotalService).inSingletonScope()\r\n  container.bind<ComponentStateService>(\"ComponentStateService\").to(ComponentStateService).inSingletonScope()\r\n\r\n  container.bind<ReaderSettingsService>(\"ReaderSettingsService\").to(ReaderSettingsService).inSingletonScope()\r\n  container.bind<ERCEventService>(\"ERCEventService\").to(ERCEventService).inSingletonScope()\r\n\r\n  //@ts-ignore\r\n  container.bind(\"GenerateService\").to({}).inSingletonScope()\r\n  container.bind<TokenOwnerService>(\"TokenOwnerService\").to(TokenOwnerService).inSingletonScope()\r\n  container.bind<TokenService>(\"TokenService\").to(TokenService).inSingletonScope()\r\n\r\n  container.bind<TokenOwnerPageService>(\"TokenOwnerPageService\").to(TokenOwnerPageService).inSingletonScope()\r\n\r\n  container.bind<ProcessedTransactionService>(\"ProcessedTransactionService\").to(ProcessedTransactionService).inSingletonScope()\r\n\r\n\r\n  //Attach container to window so we can easily access it from the browser console\r\n  globalThis.container = container\r\n  globalThis.he = he\r\n  globalThis.dayjs = dayjs\r\n  globalThis.ComponentState = ComponentState \r\n\r\n\r\n  return container\r\n}\r\n\r\n\r\n\r\nexport {\r\n  getMainContainer, container\r\n}\r\n\r\n\r\n\r\n\r\n","import { inject, injectable } from \"inversify\";\nimport { HomeRepository } from \"../../repository/home-repository.js\";\nimport { HomeViewModel } from \"../../repository/web/home-repository-impl.js\";\n\n\n@injectable()\nclass HomeWebService {\n\n    constructor() {}\n\n    @inject(\"HomeRepository\")\n    private homeRepository:HomeRepository\n\n    async get() : Promise<HomeViewModel> {\n        return this.homeRepository.get(0)\n    }\n\n    abbreviateDollars(number, digits) {\n\n        if (!number) return \"$0\"\n\n        var SI_SYMBOL = [\"\", \"\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n\n\n        // what tier? (determines SI symbol)\n        var tier = Math.log10(Math.abs(number)) / 3 | 0\n\n        // if zero or thousands, we don't need a suffix\n        if(tier == 0 || tier == 1) {\n          let result = new Intl.NumberFormat('en-US', { currency: \"USD\", style:\"currency\" }).format(number)\n          return result\n        }\n\n        // get suffix and determine scale\n        var suffix = SI_SYMBOL[tier]\n        var scale = Math.pow(10, tier * 3)\n\n        // scale the number\n        var scaled = number / scale\n\n        // format number and add suffix\n        return new Intl.NumberFormat('en-US', { currency: \"USD\", style:\"currency\" }).format(scaled) + suffix\n    }\n\n}\n\n\nexport {\n    HomeWebService\n}","import axios from \"axios\"\nimport { inject, injectable } from \"inversify\"\nimport { HomeRepository } from \"../home-repository.js\"\n\n\n@injectable()\nclass HomeRepositoryBrowserImpl implements HomeRepository {\n\n    constructor(\n        @inject('libraryURL') private libraryURL\n    ) {}\n\n    async get(pageNumber: number): Promise<HomeViewModel> {   \n        const response = await axios.get(`${this.libraryURL}/home.json`)\n            \n        return response.data\n    }\n\n}\n\ninterface HomeViewModel {\n    \n}\n\nexport {\n    HomeRepositoryBrowserImpl, HomeViewModel\n}\n\n\n","class RoutingService {\n\n    static async resolveWithSpinner(resolve, url, options?) {\n\n        if (!globalThis.app) return \n\n        globalThis.app.preloader.show()\n\n        resolve({ \n          componentUrl: url, \n          options: options\n        })\n        \n\n        globalThis.app.preloader.hide()\n\n    }\n\n    static getReaderRoutes (baseURI) {\n\n        const routes = []\n\n        let resolvedBaseURI = `${baseURI}partial/`\n\n\n        //Map the base route without a slash if it's longer than just a slash\n        if (baseURI != \"/\" && baseURI.endsWith(\"/\")) {\n    \n\n          routes.push({\n            path: `${baseURI.substring(0, baseURI.length -1)}`,\n            async async({ resolve, reject, to }) {\n              await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}index.html`)\n\n              // await RoutingService.resolveWithSpinner(resolve, 'index.html')\n            }\n          })\n    \n        }\n    \n        RoutingService.addSharedRoutes(routes, baseURI)\n    \n\n        routes.push({\n          path: '(.*)',\n          //@ts-ignore\n          async async({ resolve, reject, to }) {\n            console.log(`404 error: ${to.path}`)\n            await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}404.html`)\n          }\n        })\n\n          \n        return routes\n\n\n    }\n\n    static getLibraryRoutes (libraryURL) {\n\n        let resolvedLibraryURL = `${libraryURL}/partial`\n\n        const routes = [\n          {\n            path: `${libraryURL}`,\n            async async({ resolve, reject, to }) {\n              await RoutingService.resolveWithSpinner(resolve, `${resolvedLibraryURL}/index.html`)\n            }\n          },\n\n          {\n            path: `${libraryURL}/`,\n            async async({ resolve, reject, to }) {\n              await RoutingService.resolveWithSpinner(resolve, `${resolvedLibraryURL}/index.html`)\n            }\n          },\n\n\n          {\n            path: `${libraryURL}/index.html`,\n            async async({ resolve, reject, to }) {\n              await RoutingService.resolveWithSpinner(resolve,`${resolvedLibraryURL}/index.html`)\n            }\n          }\n\n        ]\n    \n        RoutingService.addSharedRoutes(routes, \"/r/:reader_slug/\")\n    \n        routes.push({\n          path: '(.*)',\n          //@ts-ignore\n          async async({ resolve, reject, to }) {\n            console.log(`404 error: ${to.path}`)\n            await RoutingService.resolveWithSpinner(resolve, `${resolvedLibraryURL}/404.html`)\n          }\n        })\n\n\n        return routes\n    }\n\n    private static addSharedRoutes(routes, baseURI) {\n            \n        let resolvedBaseURI\n\n        if (baseURI.indexOf(':reader_slug') > 0) {\n          resolvedBaseURI = baseURI.replace(\":reader_slug\", \"{{reader_slug}}\")\n        } else {\n          resolvedBaseURI = baseURI\n        }\n\n        resolvedBaseURI += \"partial/\"\n\n        routes.push(...[\n            {\n              path: `${baseURI}`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}index.html`)\n              }\n            },\n            {\n              path: `${baseURI}index.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}index.html`)\n              }\n            },\n      \n      \n            {\n              path: `${baseURI}mint.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}mint.html`)\n              }\n            },\n      \n            {\n              path: `${baseURI}search.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}search.html`)\n              }\n            },      \n            {\n              path: `${baseURI}explore.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}explore.html`)\n              }\n            },\n            {\n              path: `${baseURI}activity`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}activity/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}activity/index.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}activity/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}leaderboard`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}leaderboard/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}leaderboard/index.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve,`${resolvedBaseURI}leaderboard/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}sales`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}sales/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}sales/index.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}sales/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}attributes`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}attributes/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}attributes/index.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}attributes/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}attribute`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}attribute/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}attribute/index.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}attribute/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}u`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}u/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}u/index.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}u/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}u/activity`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}u/activity/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}u/activity/index.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}u/activity/index.html`)\n              }\n            },\n            {\n              path: `${baseURI}list-:page.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}list-{{page}}.html`)\n              }\n            },\n            {\n              path: `${baseURI}t/:tokenId`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}t/{{tokenId}}/index.html`, { force: true })\n              }\n            },\n            {\n              path: `${baseURI}t/:tokenId/index.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve,`${resolvedBaseURI}t/{{tokenId}}/index.html`, { force: true })\n              }\n            },\n            {\n              path: `${baseURI}s/:slug.html`,\n              async async({ resolve, reject, to }) {\n                await RoutingService.resolveWithSpinner(resolve, `${resolvedBaseURI}s/{{slug}}.html`)\n              }\n            }\n      \n        ])\n\n    }\n\n\n}\n\n\nexport { RoutingService }","import \"regenerator-runtime/runtime.js\"\nimport \"reflect-metadata\"\n\nimport {Workbox} from 'workbox-window'\nimport { Container } from \"inversify\"\n\nimport { getMainContainer } from \"../reader/inversify.config.js\"\n\nimport { HomeWebService } from \"./service/web/home-web-service.js\"\nimport { HomeRepository } from \"./repository/home-repository.js\"\nimport { HomeRepositoryBrowserImpl } from \"./repository/web/home-repository-impl.js\"\nimport { RoutingService } from \"../reader/service/core/routing-service.js\"\n\n//Import CSS\nimport './html/css/app.css'\n\n\nlet initLibrary = async (libraryURL:string, baseURI:string, hostname:string, version:string, channelId:string) => {\n\n    console.log(\"Initializing Library\")\n    \n    if ('serviceWorker' in navigator) {\n\n        const wb = new Workbox(`${hostname}/sw-library-${version}.js`, {\n            scope: `/`\n        })\n    \n        let container:Container = new Container()\n\n        container.bind(\"libraryURL\").toConstantValue(libraryURL)\n        container.bind<HomeWebService>(\"HomeWebService\").to(HomeWebService).inSingletonScope()\n        container.bind<HomeRepository>(\"HomeRepository\").to(HomeRepositoryBrowserImpl).inSingletonScope()\n\n\n        let routes = RoutingService.getLibraryRoutes(libraryURL)\n\n        container = await getMainContainer(container, baseURI, hostname, version, routes, channelId)\n\n        if (navigator.serviceWorker.controller) {\n            startApp(container, hostname)\n        } else {\n            wb.addEventListener('controlling', e => {\n                startApp(container, hostname)\n            })\n        }\n\n        wb.register()\n    }\n\n\n} \n\nlet startApp = async (container:Container, hostname:string) => {\n\n    // let container = getMainContainer(baseURI, version, routablePages)            \n    let app:any = container.get(\"framework7\")\n    \n    //Create the main view\n\n    //Get URL\n    let internalUrl = window.location.toString().replace(`${hostname}`, '')\n\n    // console.log(`internal URL ${internalUrl}`)\n\n    const mainView = app.views.create('.view-main', {\n        url: internalUrl\n    })\n\n\n    mainView.on(\"init\", async (view) => {\n\n        console.log(`Navigating to ${internalUrl}`)\n        //When the view loads lets reload the initial page so that we fire the component logic. \n        view.router.navigate(internalUrl, { reloadCurrent: true, animate: false })\n    })\n    \n    app.init()\n\n\n}\n\nexport { initLibrary }\n\n"],"names":["framework7Component","props","$on","$f7","$update","walletAddress","walletService","globalThis","container","get","baseURI","hostname","title","symbol","logo","active","libraryURL","library_url","largeURL","large_url","showMintPage","show_mint_page","showActivityPage","show_activity_page","hideMenu","hide_menu","breadcrumbs","showConnect","getForkLink","length","encodeURIComponent","truncateEthAddress","address","displayAddress","async","undefined","provider","initProvider","getAddress","wallet","connect","connectWallet","initWallet","$ctx","$","$h","$root","$f7route","$f7router","$theme","$store","map","b","path","text","id","readerSettingsService","tokenId","token_id","itemCount","item_count","currentPage","current_page","link","href","rangeSliderChange","e","preventDefault","currentTarget","val","preloader","show","updateCurrentPage","parseInt","views","main","router","navigate","transition","hide","rangeChange","range","target","value","app","on","p","style","attributeOptions","handlerBody","filters","attributeParams","handler","addClass","document","removeEventListener","addEventListener","attributeChange","name","ev","CustomEvent","dispatchEvent","deleteChipClick","attributeId","data","Object","keys","key","ao","traitType","values","v","count","totalItems","totalMatches","mintingViewModel","baseURL","baseurl","m","totalMinted","totalSupply","transactionWebService","largestSales","largest_sales","sales","sale","index","rowItemViewModels","coverImageId","coverImageGenerated","Intl","NumberFormat","format","ethValue","abbreviateDollars","usdValue","dayjs","date","Transfer","transaction","event","base_uri","row_item_view_models","rowItemViewModel","imageLink","isMint","_id","transactionValue","markets","Array","from","k","join","aggregator","timestamp","fromNow","tokenPrice","price","toFixed","currency","fromAddress","getDisplayAddress","toAddress","Approval","approved","namedArgs","owner","ApprovalForAll","operator","transactionsViewModel","ens","transactions","items","token","events","processedEvent","tokenOwners","token_owners","u","rank","ensName","salesReport","buys","lastActive","itemWebService","results","searching","searchbarSubmit","blur","showIn","query","hideIn","itemViewModel","item","excerpt","coverImage","generated","contentHTML","WalletServiceImpl","contracts","getProvider","ethersContracts","constructor","this","ethereum","accounts","refreshPage","networkId","console","log","send","getSigner","c","abi","match","injectable","inject","Function","DatabaseService","PouchDB","channelId","dbCache","config","fullName","details","info","doc_count","update_seq","changesets","localChangesets","ids","changeset","push","put","initialRecords","loadInitialRecords","ex","updated","includes","response","initialRecordsPath","fetch","json","bulkDocs","ChannelRepositoryBrowserImpl","db","createIndex","fields","dbName","databaseService","getDatabase","channel","channels","allDocs","include_docs","rows","doc","dateCreated","contractResponse","axios","contractAddress","Item","_rev","description","content","authorId","category","attributeSelections","coverImageAsAnimation","originalJSONMetadataId","animationId","datePublished","lastUpdated","ItemRepositoryBrowserImpl","static","assign","skip","limit","find","selector","$exists","sort","docs","$eq","$in","pageNumber","escape","s","replace","toLowerCase","itemPage","tokenIds","startTokenId","search","highlighting","row","Author","url","coverPhotoId","AuthorRepositoryBrowserImpl","NFTMetadata","image","image_data","external_url","attributes","background_color","animation_url","MetadataRepositoryBrowserImpl","Image","cid","buffer","svg","ImageRepositoryBrowserImpl","Animation","AnimationRepositoryBrowserImpl","StaticPage","slug","contentMarkdown","locations","StaticPageRepositoryBrowserImpl","location","$all","ItemPageRepositoryBrowserImpl","AttributeTotal","categoryPercent","AttributeTotalRepositoryBrowserImpl","d","attributeTotal","ReaderSettings","lastPageJump","Allow","ReaderSettingsRepositoryBrowserImpl","readerSettings","result","Token","TokenRepositoryBrowserImpl","AuthorService","authorRepository","getDisplayName","author","ChannelService","channelRepository","PagingService","buildPagingViewModel","offset","numberOfPages","viewModel","PagingViewModel","start","end","Math","min","previousOffset","max","nextOffset","page","endPage","ceil","lastOffset","showNext","showPrevious","showFirst","showLast","calculateEndIndex","currentCount","endIndex","calculateDescendingEndIndex","calculateDescendingOffset","calculatedOffset","pageNumbers","SchemaService","itemRepository","imageRepository","animationRepository","staticPageRepository","readerSettingsRepository","rowItemViewModelRepository","attributeTotalRepository","componentStateRepository","dbs","repositories","getRepositories","repo","filter","r","load","ImageService","list","bufferToDataURL","getSVGURL","svgToDataURL","svgStr","mimeType","toString","StaticPageService","listByLocation","concat","JSON","parse","stringify","staticPage","ChannelWebService","channelService","authorService","imageService","pagingService","schemaService","staticPageService","loadedChannelData","getViewModel","pagingViewModel","staticPagesViewModel","channelContractAbbrev","authorDisplayName","reloadAll","AnimationService","QuillService","ops","qdc","renderCustomWith","customOp","contextOp","insert","type","img","src","width","height","convert","deltaToMarkdown","AttributeTotalService","getByIds","totals","totalKeys","Set","as","flat","totalKey","substring","indexOf","total","at","minimumFractionDigits","maximumFractionDigits","a","ItemService","attributeTotalService","all","getByTokenId","getByTokenIds","getRowItemViewModelsByAttribute","getRowItemViewModelsByOwner","getRowItemViewModelsByTokenIds","getRowItemViewModelsByTokenId","listByTokenId","buildAttributeTotals","ItemPageService","itemPageRepository","parser","DOMParser","ItemWebService","itemService","quillService","animationService","itemPageService","allTokensCache","attributeReport","animation","animationContentHTML","selections","selection","attributeTotals","matches","body","parseFromString","getElementsByTagName","serializeToString","slice","op","ipfsimage","getUrl","translateContent","params","clonedParams","parentFilteredIds","_paramsToFilteredIds","x","aovm","exploreQuery","filteredIds","searchTokenIds","allAttributeTotals","attributeTotalIds","reduce","getMintViewModel","viewModels","getSearchViewModel","itemViewModels","perPage","i","translateRowItemViewModel","AuthorWebService","TokenContractService","metadataRepository","mintEventListenerAdded","lastMintedTokenId","channelContract","getChannelContract","balanceOf","quantity","totalMintCost","mint","wait","mintFromStartOrFail","ownerOf","getContract","MintWebService","tokenContractService","getTotalMinted","lastMinted","Number","mintPrice","minting","totalWei","calculateTotalMint","mintAsOwner","mintPriceWei","QueueService","promiseView","self","queueItem","Guid","newGuid","icon","Promise","resolve","reject","_beforeSaveAction","before","then","promise","_showSuccess","_showError","toast","create","closeButton","open","error","close","message","closeButtonText","closeTimeout","random","UiService","showExceptionPopup","dialog","alert","showPopup","showAlert","spinnerDialog","showSpinner","hideSpinner","progressDialog","showProgress","hideProgress","progress","setProgress","setText","ValidationException","Error","errors","super","ReaderSettingsService","Date","toJSON","forbidUnknownValues","whitelist","ERCEvent","removed","topics","logIndex","args","eventSignature","isTransfer","isBurn","ERCEventService","ercEvent","fragment","ComponentStateService","componentState","ComponentState","ComponentStateRepositoryBrowserImpl","TokenOwnerPageService","tokenOwnerPageRepository","getHome","getTotals","TokenOwnerPageRepositoryBrowserImpl","ProcessedTransactionService","processedTransactionRepository","processedEvents","add","rivm","getSalesReport","getAttributeSalesReport","getAttributesOverall","getLargestSales","TransactionWebService","processedTransactionService","headers","latest","getLatest","number","digits","tier","log10","abs","suffix","scaled","pow","ProcessedTransactionRepositoryBrowserImpl","processedTransaction","attributeSalesReport","attributeKeyToInteger","attributeOverallSales","chr","hash","charCodeAt","TokenOwner","TokenOwnerService","tokenOwnerRepository","getENS","tokenOwner","forEach","putAll","by_token_id","emit","TokenOwnerRepositoryBrowserImpl","TokenService","tokenRepository","RowItemViewModelRepositoryBrowserImpl","getMainContainer","customContainer","theBaseURI","theHostname","version","routes","bind","toConstantValue","registerComponent","el","theme","init","view","browserHistory","browserHistorySeparator","browserHistoryOnLoad","browserHistoryInitialMatch","navbar","hideOnPageScroll","toolbar","window","web3Provider","contract","contractABI","responseType","contractABIResponse","status","to","inSingletonScope","he","plugin","use","HomeWebService","homeRepository","HomeRepositoryBrowserImpl","RoutingService","options","componentUrl","resolvedBaseURI","endsWith","resolveWithSpinner","addSharedRoutes","resolvedLibraryURL","force","initLibrary","navigator","wb","scope","getLibraryRoutes","serviceWorker","controller","startApp","register","internalUrl","reloadCurrent","animate"],"sourceRoot":""}