<% 

    let channelViewModel = it.baseViewModel.channelViewModel 
    let hostname = it.baseViewModel.hostname
    let baseURL = it.baseViewModel.baseURL
    let marketplaces = it.baseViewModel.marketplaces
    let externalLinks = it.baseViewModel.externalLinks
    let routablePages = it.baseViewModel.routablePages
    let attributeReport = it.baseViewModel.attributeReport
    let base64Version = it.baseViewModel.base64Version
    let channelId = it.baseViewModel.channelId
    let showMintPage = it.baseViewModel.showMintPage
    let showActivityPage = it.baseViewModel.showActivityPage
    let logo = it.baseViewModel.logo

    const link = (href) => {
        return `${baseURL + href}`
    }    

    const absoluteLink = (href) => {
        return `${hostname + baseURL + href}`
    }   

    const escapeExcerpt = (excerpt) => {
        return it.baseViewModel.excerptHtml(excerpt, { pruneLength: 500 })
        
        //return it.baseViewModel.he.encode(excerpt.toString())
    }

    let coverImageLink = channelViewModel.coverImage ? absoluteLink(`backup/${channelViewModel.coverImage.generated ? 'generated' : 'export'}/images/${channelViewModel.coverImage._id}.${channelViewModel.coverImage.generated ? 'png' : 'jpg'}`)  : ''


%>


<!DOCTYPE html>
<html lang="en">

<head>

    <%~ include("headStart", {baseURL: baseURL}) %>


    <style>
    html {
        visibility: hidden;
        opacity: 0;
    }
    </style>


    <title>
        User Activity for <%=channelViewModel.channel.title%>
    </title>

    <%~ 
      include("_meta_tags", {
        title: `User Profile for ${channelViewModel.channel.title}`,
        url: 'u',
        imageUrl: coverImageLink,
        descriptionHTML: `User Profile for ${channelViewModel.channel.title}`,
        hostname: hostname,
        baseURL: baseURL,
        excerptHtml: it.baseViewModel.excerptHtml,
        he: it.baseViewModel.he
      }) 
    %>


    <%~ it.baseViewModel.headEndContents %>
    
</head>

<body>

    <div id="app">

        <div class="view view-main">

            <div class="page" data-name="user-activity">

                <nav-bar
                    logo="${logo}"
                    library_url="<%=it.baseViewModel.libraryURL ? it.baseViewModel.libraryURL : ''%>"
                    large_url="<%=it.baseViewModel.largeURL ? it.baseViewModel.largeURL : ''%>"
                    title="User"
                    active="User"
                    show_mint_page="<%=showMintPage%>"
                    show_activity_page="<%=showActivityPage%>"
                    breadcrumbs="${breadcrumbs}"
                    baseURI="${baseURI}"
                    hostname="${hostname}"
                >
                </nav-bar>


                <div class="page-content infinite-scroll-content" id="user-tokens-infinite-scroll">

                    <div class="fixed-width-content center">

                        <div class="hidden-on-load">

                            <div class="block-title block-title-large">Account Details</div>
                            <div class="block-header">${address}</div>
                        
                            <div class="block">
                        
                                <div class="user-info">
                            
                                    <div class="row">
                                        <div>Etherscan</div>
                                        <div >
                                            <a href="https://etherscan.io/address/${address}" class="item-link external">${address ? walletService.truncateEthAddress(address) : ' '}</a>
                                        </div>
                                    </div>
                            
                                    ${tokenOwner?.ensName ? $h`
                                        <div class="row">
                                            <div>ENS Name</div>
                                            <div>${tokenOwner?.ensName}</div>
                                        </div>  
                                    ` : $h` `}
                            
                                    <div class="row">
                                        <div>Tokens Owned</div>
                                        <div><strong>${tokenOwner?.count ? tokenOwner.count : 0}</strong></div>
                                    </div>

                                    <div class="row">
                                        <div>Transactions</div>
                                        <div><strong>${tokenOwner?.transactionCount}</strong></div>
                                    </div>

                            
                                    <div class="row">
                                        <div>Rank</div>
                                        <div><strong>#${tokenOwner?.rank}</strong> (#${tokenOwner?.overallRank} overall)</div>
                                    </div>

                                </div>
                            
                            </div>


                            ${tokenOwner ? $h`
                            
                                <% if(channelViewModel.channel?.contractAddress) { %>

                                    <div class="block-title block-title-medium">Sales</div>
                                    <div class="block block-strong inset stats">
                            
                                        <div class="stats-row margin-bottom">

                                            <div>
                                                Number of Sales
                                            </div>
                    
                                            <div class="price">
                                                <strong>${new Intl.NumberFormat('en-US').format(tokenOwner.salesReport?.sales?.events ? tokenOwner.salesReport?.sales?.events : 0)}</strong>
                                            </div>

                                        </div>

                                        <div class="stats-row margin-bottom">

                                            <div>
                                                Average Sale
                                            </div>
                    
                                            <div class="price">
                                                <strong>${new Intl.NumberFormat('en-US').format(tokenOwner.salesReport?.sales?.averageEthValue ? tokenOwner.salesReport?.sales?.averageEthValue : 0)}</strong> ETH <span class="dollars">${transactionWebService.abbreviateDollars(tokenOwner.salesReport?.sales?.averageUsdValue ? tokenOwner.salesReport?.sales?.averageUsdValue : 0, 2)}</span>
                                            </div>

                                        </div>

                                        <div class="stats-row margin-bottom">

                                            <div>
                                                Total Value of All Sales
                                            </div>
                    
                                            <div class="price">
                                                <strong>${new Intl.NumberFormat('en-US').format(tokenOwner.salesReport?.sales?.ethValue ? tokenOwner.salesReport?.sales?.ethValue : 0)}</strong> ETH <span class="dollars">${transactionWebService.abbreviateDollars(tokenOwner.salesReport?.sales?.usdValue ? tokenOwner.salesReport?.sales?.usdValue : 0, 2)}</span>
                                            </div>

                                        </div>                                     
                                    
                                    </div>


                                    <div class="block-title block-title-medium">Buys</div>
                                    <div class="block block-strong inset stats">
                            
                                        <div class="stats-row margin-bottom">

                                            <div>
                                                Number of Buys
                                            </div>
                    
                                            <div class="price">
                                                <strong>${new Intl.NumberFormat('en-US').format(tokenOwner.salesReport?.buys?.events ? tokenOwner.salesReport?.buys?.events : 0)}</strong>
                                            </div>

                                        </div>

                                        <div class="stats-row margin-bottom">

                                            <div>
                                                Average Buy
                                            </div>
                    
                                            <div class="price">
                                                <strong>${new Intl.NumberFormat('en-US').format(tokenOwner.salesReport?.buys?.averageEthValue ? tokenOwner.salesReport?.buys?.averageEthValue : 0)}</strong> ETH <span class="dollars">${transactionWebService.abbreviateDollars(tokenOwner.salesReport?.buys?.averageUsdValue ? tokenOwner.salesReport?.buys?.averageUsdValue : 0, 2)}</span>
                                            </div>

                                        </div>

                                        <div class="stats-row margin-bottom">

                                            <div>
                                                Total Value of All Buys
                                            </div>
                    
                                            <div class="price">
                                                <strong>${new Intl.NumberFormat('en-US').format(tokenOwner.salesReport?.buys?.ethValue ? tokenOwner.salesReport?.buys?.ethValue : 0)}</strong> ETH <span class="dollars">${transactionWebService.abbreviateDollars(tokenOwner.salesReport?.buys?.usdValue ? tokenOwner.salesReport?.buys?.usdValue : 0, 2)}</span>
                                            </div>

                                        </div>                                     
                                    
                                    </div>

                                <% } %>

                                <div class="block">
                                    <p class="segmented">
                                        <a class="button button-outline button-active" href="#">Owned</a>
                                        <a class="button button-outline" href="${baseURI}u/activity?address=${address}">Activity</a>
                                    </p>
                                </div>
                            
                            ` : $h`
                                
                            `}
                          
                            <div class="list cards-list virtual-list" id="user-tokens-list">
                                <ul class="item-flex"></ul>
                            </div>
                          
                            <div class="preloader infinite-scroll-preloader"></div>

                            
                        </div>

                        <div class="hide-on-pageinit">

                            <div class="card skeleton-text">
                                <div class="card-header">User Info</div>
                                <div class="card-content card-content-padding data-table">
                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi
                                    lobortis et massa ac interdum. Cras consequat felis at consequat hendrerit.
                                </div>

                              </div>

                        </div>

                        <br /><br />


                        <%~ include("footer", {baseURL: baseURL}) %>



                    </div>
            
                </div>
              
            
            </div>

        </div>

    </div>

    <%~ it.baseViewModel.bodyContents %>

    <script type="module" id="page-init-scripts">

        const init = (props, { $, $f7, $h, $on, $update }) => {

            let channelWebService = globalThis.container.get("ChannelWebService")            
            let baseURI = globalThis.container.get("baseURI")()
            let hostname = globalThis.container.get("hostname")()


            let tokenOwnerService = globalThis.container.get("TokenOwnerService")
            let itemWebService = globalThis.container.get("ItemWebService")
            let walletService = globalThis.container.get("WalletService")
            let uiService = globalThis.container.get("UiService")
            let transactionWebService = globalThis.container.get("TransactionWebService")

            let address
            let tokenOwner

            let virtualList

            let hasMoreItems = true
            let loadingInProgress = false

            let page = 1

            let firstPageItems
            let totalTokens

            let logo = JSON.parse(`<%~ JSON.stringify(logo ? logo : {})  %>`)


            let breadcrumbs = [{
                text: JSON.parse(`<%~ JSON.stringify(channelViewModel.channel.symbol)  %>`),
                path: baseURI
            }, {
                text: "Leaderboard",
                path: `${baseURI}leaderboard`
            }]


            const link = (href) => {
              return baseURI + href
            }   

            const imageLink = (rowItemViewModel) => {
                let imgExt = rowItemViewModel.coverImageGenerated ? 'svg' : 'jpg'
                return link('backup/export/images/' + rowItemViewModel.coverImageId + "." + imgExt)
            }


            const loadUser = async () => {
                
                loading = true

                try  {
                    tokenOwner = await tokenOwnerService.get(address)

                    if (tokenOwner) {

                        let result = await itemWebService.ownerItemPage(address, page)

                        firstPageItems = result.items
                        totalTokens = result.totalMatches

                    }


                    createVirtualList()

                    
                } catch(ex) { 
                    $('.infinite-scroll-preloader').hide()
                    console.log(ex) 
                }
                
                loading = false

                await $update()

            }

            const createVirtualList = () => {

                virtualList = $f7.virtualList.create({
                    el: '#user-tokens-list',
                    createUl: false,
                    renderItem(item) {
                        return getTemplate(item)
                    },
                    height: 287,
                    items: firstPageItems,                    
                    cols: getWidth() >= 1024 ? 5 : 2,
                    emptyTemplate: `
                        <li class="item-content">
                            <div class="item-inner">
                                No results found.
                            </div>
                        </li>
                        `
                })


                if (virtualList.items?.length < totalTokens) {
                    hasMoreItems = true
                    document.getElementById("user-tokens-infinite-scroll").addEventListener( 'infinite', infiniteScroll )
                } else {
                    hasMoreItems = false
                    $('.infinite-scroll-preloader').hide()
                }

            }

            const resizeListener = (e) => {
                const viewPortWidth = getWidth()

                if (virtualList) {
                    virtualList.params.cols = viewPortWidth >= 1024 ? 5 : 2
                    virtualList?.update()
                }


                console.log("Resized...")

            }

            const getWidth = () => {
                return Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)
            }

            const getTemplate = (rowItemViewModel) => {
                
                let tokenLink = link('t/' + rowItemViewModel.tokenId)
                let imgExt = rowItemViewModel.coverImageGenerated ? 'svg' : 'jpg'
                let imageLink = link('backup/export/images/' + rowItemViewModel.coverImageId + "." + imgExt)
                let title = rowItemViewModel.title

                return `<li class="flex-card">
                            <a href="${tokenLink}" class="item-link">
                                <div class="card" >
                                    <div class="card-content">
                                        <div class="square">
                                            <img src="${imageLink}"/>
                                        </div>
                                    </div>

                                    <div class="card-footer">
                                        ${title}
                                    </div>
                                </div>
                            </a>
                        </li>
                `
            }

            async function infiniteScroll(e) {

                // Exit, if loading in progress
                if (loadingInProgress || !hasMoreItems) return

                console.log(`Infinite scrolling...`)

                // Set loading flag
                loadingInProgress = true
                $('.infinite-scroll-preloader').show()


                try {
                    
                    page++

                    let result = await itemWebService.ownerItemPage(address, page)

                    let items = result.items
                    virtualList.appendItems(items)

                    if (virtualList.items?.length == tokenOwner.tokenIds?.length) {
                        hasMoreItems = false
                    }

                } catch (ex) {
                    console.log(ex)
                }

                $f7.preloader.hide()
                $('.infinite-scroll-preloader').hide()


                loadingInProgress = false


            }

    


            $on('pageInit', async () => {

                await channelWebService.loadChannel(
                        "<%= channelViewModel.channel._id %>",
                        '<%= baseURL %>',
                        '<%= hostname %>'
                )

                baseURI = globalThis.container.get("baseURI")()
                hostname = globalThis.container.get("hostname")()

                await $update()

                window.addEventListener('resize', resizeListener)

                address = $f7.views.main.router.currentRoute?.query?.address

                breadcrumbs.push({
                    text: address
                })

                $('.infinite-scroll-preloader').show()

                await loadUser()

                $('.hidden-on-load').removeClass('hidden-on-load')
                $('.hide-on-pageinit').hide()

                await $update()

            })


            $on('pageReinit', async () => {

                await channelWebService.loadChannel(
                        "<%= channelViewModel.channel._id %>",
                        '<%= baseURL %>',
                        '<%= hostname %>'
                )

                baseURI = globalThis.container.get("baseURI")()
                hostname = globalThis.container.get("hostname")()

                await $update()

                address = $f7.views.main.router.currentRoute?.query?.address

                breadcrumbs.push({
                    text: address
                })

                await loadUser()

                $('.hide-on-pageinit').hide()

                await $update()


            })


            $on('pageBeforeOut', async () => {
                window.removeEventListener('resize', resizeListener)
                $f7.infiniteScroll.destroy('#user-tokens-infinite-scroll')
            })

            <%~ 
                include("_meta_tags_js", {
                    title: `User Profile for ${channelViewModel.channel.title}`,
                    url: 'u',
                    imageUrl: coverImageLink,
                    descriptionHTML: `User Profile for ${channelViewModel.channel.title}`,
                    hostname: hostname,
                    baseURL: baseURL,
                    excerptHtml: it.baseViewModel.excerptHtml,
                    he: it.baseViewModel.he
                }) 
            %>


            document.querySelector('title').innerHTML = "User Activity <%=channelViewModel.channel.title%>"

            $f7.preloader.hide()

            return $render

        }


    </script>

    <%~ 
        include("_init", {
            hostname: hostname,
            baseURL: baseURL,
            libraryURL: it.baseViewModel.libraryURL,
            routablePages: routablePages,
            base64Version: base64Version
        }) 
    %>

</body>

</html>