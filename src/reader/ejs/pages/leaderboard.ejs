<% 

    let channelViewModel = it.baseViewModel.channelViewModel 
    let hostname = it.baseViewModel.hostname
    let baseURL = it.baseViewModel.baseURL
    let marketplaces = it.baseViewModel.marketplaces
    let externalLinks = it.baseViewModel.externalLinks
    let routablePages = it.baseViewModel.routablePages
    let attributeReport = it.baseViewModel.attributeReport
    let base64Version = it.baseViewModel.base64Version
    let channelId = it.baseViewModel.channelId
    let showMintPage = it.baseViewModel.showMintPage
    let showActivityPage = it.baseViewModel.showActivityPage
    let logo = it.baseViewModel.logo

    const link = (href) => {
        return `${baseURL + href}`
    }    

    const absoluteLink = (href) => {
        return `${hostname + baseURL + href}`
    }   

    const escapeExcerpt = (excerpt) => {
        excerpt = it.baseViewModel.excerptHtml(excerpt, { pruneLength: 500 })
        return it.baseViewModel.he.encode(excerpt.toString())
    }

    let coverImageLink = channelViewModel.coverImage ? absoluteLink(`backup/${channelViewModel.coverImage.generated ? 'generated' : 'export'}/images/${channelViewModel.coverImage._id}.${channelViewModel.coverImage.generated ? 'png' : 'jpg'}`)  : ''


%>


<!DOCTYPE html>
<html lang="en">

<head>

    <%~ include("headStart", {baseURL: baseURL}) %>


    <style>
    html {
        visibility: hidden;
        opacity: 0;
    }
    </style>

    <title>
        Leaderboard for <%=channelViewModel.channel.title%>
    </title>

    <%~ 
      include("_meta_tags", {
        title: `Leaderboard for '${channelViewModel.channel.title}' NFTs`,
        url: 'leaderboard',
        imageUrl: coverImageLink,
        descriptionHTML: `Leaderboard for '${channelViewModel.channel.title}' NFTs`,
        hostname: hostname,
        baseURL: baseURL,
        excerptHtml: it.baseViewModel.excerptHtml,
        he: it.baseViewModel.he
      }) 
    %>

    <%~ it.baseViewModel.headEndContents %>
    
</head>

<body>

    <div id="app">

        <div class="view view-main">

            <!--pageContent-->
            <div class="page" data-name="leaderboard">

                <nav-bar
                    logo="${logo}"
                    library_url="<%=it.baseViewModel.libraryURL ? it.baseViewModel.libraryURL : ''%>"
                    large_url="<%=it.baseViewModel.largeURL ? it.baseViewModel.largeURL : ''%>"
                    title="Leaderboard"
                    active="Leaderboard"
                    show_mint_page="<%=showMintPage%>"
                    show_activity_page="<%=showActivityPage%>"
                    breadcrumbs="${breadcrumbs}"
                >
                </nav-bar>


                <div class="page-content infinite-scroll-content" id="explore-infinite-scroll">

                    <div class="fixed-width-content center">
                            
                        <div class="hidden-on-load">
                        

                            <div class="card data-table">
                                <div class="card-header">
                                    Leaderboard
                                    <div class="last-updated">Last updated: ${dayjs(lastUpdated).fromNow()}</div>
                                </div>
                                <div class="card-content card-content-padding">

                                    ${tokenOwners?.length > 0 ? $h`
                                        
                                        <table class="leaderboard-table">
                                            <thead>
                                                <tr>
                                                    <th class="label-cell">Rank</th>
                                                    <th class="address-cell">Address</th>
                                                    <th class="numeric-cell">Owned</th>
                                                    <th class="numeric-cell">Buys</th>
                                                    <th class="numeric-cell">Sales</th>
                                                    <th class="text-cell">Last Active</th>

                                                </tr>
                                            </thead>
                                    
                                            <leaderboard-rows token_owners="${tokenOwners}"></leaderboard-rows>

                                
                                        </table>
                                
                                        
                                    ` : $h`<span  />`}


                                </div>
                            </div>








                            <div class="block split-row-both">
                                <div>
                                    ${showPrevious ? $h`
                                        <a href="<%= baseURL %>leaderboard/?pageNumber=${pageNumber - 1}" class="button button-outline color-gray">Previous</a>
                                        ` : $h` `}
                                </div>
                                <div>
                                    ${showNext ? $h`
                                        <a href="<%= baseURL %>leaderboard/?pageNumber=${pageNumber + 1}" class="button button-fill">Next</a>
                                        ` : $h` `}
                                </div>
                        
                            </div>

                        </div>


                        <div class="hide-on-pageinit">

                            <div class="card skeleton-text">
                                <div class="card-header">Leaderboard</div>
                                <div class="card-content card-content-padding data-table">
                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi
                                    lobortis et massa ac interdum. Cras consequat felis at consequat hendrerit.
                                </div>

                            </div>

                        </div>

                        <%~ include("footer", {baseURL: baseURL}) %>
                    </div>
            
                </div>
              
            
            </div>
            <!--/pageContent-->

        </div>

    </div>

    <%~ it.baseViewModel.bodyContents %>

    <script type="module" id="page-init-scripts">

        //pageInitScripts
        const init = (props, { $, $f7, $h, $on, $update }) => {

            let channelWebService = globalThis.container.get("ChannelWebService")
            
            let baseURI = globalThis.container.get("baseURI")
            let hostname = globalThis.container.get("hostname")


            let tokenOwnerPageService = globalThis.container.get("TokenOwnerPageService")
            let transactionWebService = globalThis.container.get("TransactionWebService")

            let walletService = globalThis.container.get("WalletService")


            let logo = JSON.parse(`<%~ JSON.stringify(logo ? logo : {})  %>`)


            let breadcrumbs = [{
                text: JSON.parse(`<%~ JSON.stringify(channelViewModel.channel.symbol)  %>`),
                path: baseURI()
            }, {
                text: "Leaderboard",
                path: `${baseURI()}leaderboard`
            }]


            let tokenOwners
            let pageNumber = 0
            let totals = {}
            let lastUpdated

            let showNext
            let showPrevious

            const loadLeaderboard = async () => {
            
                loading = true

                try  {

                    if ($f7.views.main.router.currentRoute?.query?.pageNumber) {
                        pageNumber = parseInt($f7.views.main.router.currentRoute?.query?.pageNumber)
                    }

                    breadcrumbs.push({
                        text: `Page ${pageNumber + 1}`
                    })

                    totals = await tokenOwnerPageService.getTotals()
                    let page = await tokenOwnerPageService.get(pageNumber)

                    tokenOwners = page.tokenOwners

                    let latest = await transactionWebService.getLatest()

                    lastUpdated = latest.lastUpdated

                    showNext = pageNumber < totals.totalPages - 1 
                    showPrevious = pageNumber > 0

                } catch(ex) { console.log(ex) }
                
                $('.hidden-on-load').removeClass('hidden-on-load')


                loading = false

                await $update()

            }


            $on('pageInit', async () => {

                await channelWebService.loadChannel(
                        "<%= channelViewModel.channel._id %>",
                        '<%= baseURL %>',
                        '<%= hostname %>'
                )

                await $update()

                await loadLeaderboard()

                $('.hide-on-pageinit').hide()


                await $update()


            })

            <%~ 
                include("_meta_tags_js", {
                    title: `Leaderboard for '${channelViewModel.channel.title}' NFTs`,
                    url: 'leaderboard',
                    imageUrl: coverImageLink,
                    descriptionHTML: `Leaderboard for '${channelViewModel.channel.title}' NFTs`,
                    hostname: hostname,
                    baseURL: baseURL,
                    excerptHtml: it.baseViewModel.excerptHtml,
                    he: it.baseViewModel.he
                }) 
            %>

            document.querySelector('title').innerHTML = "Leaderboard <%=channelViewModel.channel.title%>"

            $f7.preloader.hide()

            return $render

        }
        ///pageInitScripts

    </script>

    <%~ 
        include("_init", {
            hostname: hostname,
            baseURL: baseURL,
            libraryURL: it.baseViewModel.libraryURL,
            routablePages: routablePages,
            base64Version: base64Version,
            channelId: channelId
        }) 
    %>

</body>

</html>