<% 

    let channelViewModel = it.baseViewModel.channelViewModel 
    let hostname = it.baseViewModel.hostname
    let baseURL = it.baseViewModel.baseURL
    let baseDir = it.baseViewModel.baseDir
    let marketplaces = it.baseViewModel.marketplaces
    let externalLinks = it.baseViewModel.externalLinks
    let routablePages = it.baseViewModel.routablePages
    let attributeReport = it.baseViewModel.attributeReport
    let base64Version = it.baseViewModel.base64Version
    let channelId = it.baseViewModel.channelId
    let showMintPage = it.baseViewModel.showMintPage
    let itemViewModel = it.itemViewModel
    let previous = it.previous
    let next = it.next

    const link = (href) => {
        return `${baseURL + href}`
    }    

    let logo = link(`backup/export/images/${channelViewModel.channel.coverImageId}.jpg`)

    const absoluteLink = (href) => {
        return `${hostname + baseURL + href}`
    }   

    const escapeExcerpt = (excerpt) => {
        excerpt = it.baseViewModel.excerptHtml(excerpt, { pruneLength: 500 })
        return it.baseViewModel.he.encode(excerpt.toString())
    }

    const marketplaceAssetLink = (marketplace, tokenId) => {

        let link = marketplace.assetLink 
  
        //Replace contract if we find it 
        if (channelViewModel.channel.contractAddress) {
          link = link.replace("{contractId}", channelViewModel.channel.contractAddress)
        }
  
        if (tokenId) {
          link = link.replace("{tokenId}", tokenId)
  
        }
  
        return link
    }
    
    const truncateEthAddress = (address) => {
        // Captures 0x + 4 characters, then the last 4 characters.
        const truncateRegex = /^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/
        const match = address.match(truncateRegex)
        if (!match) return address
        return `${match[1]}â€¦${match[2]}`
    }


    let coverImageLink = itemViewModel.coverImage ? absoluteLink(`backup/${itemViewModel.coverImage.generated ? 'generated' : 'export'}/images/${itemViewModel.coverImage._id}.${itemViewModel.coverImage.generated ? 'png' : 'jpg'}`)  : ''

%>


<!DOCTYPE html>
<html>

<head>
    <style>
    html {
        visibility: hidden;
        opacity: 0;
    }
    </style>

    <!-- Required meta tags-->
    <meta charset="utf-8">
    <meta name="viewport"
    content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui, viewport-fit=cover">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <!-- Color theme for statusbar -->
    <title><%= itemViewModel.item.title ? itemViewModel.item.title + ' / ' : '' %><%= itemViewModel.channel.title %> #<%= itemViewModel.item.tokenId %></title>

    <meta property="og:title" content="<%= itemViewModel.item.title ? itemViewModel.item.title + ' / ' : '' %><%= itemViewModel.channel.title %> #<%= itemViewModel.item.tokenId %>" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="" />
    <meta property="og:image" content="<%= coverImageLink %>" />
    <meta property="og:description" content="<%= escapeExcerpt(itemViewModel.contentHTML)%>" />

    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="" />
    <meta property="twitter:title" content="<%= itemViewModel.item.title ? itemViewModel.item.title + ' / ' : '' %><%= itemViewModel.channel.title %> #<%= itemViewModel.item.tokenId %>" />
    <meta property="twitter:description" content="<%= escapeExcerpt(itemViewModel.contentHTML) %>" />
    <meta property="twitter:image" content="<%= coverImageLink %>" />
    
    <%~ it.baseViewModel.headContents %>

</head>

<body>

    <div id="app">

        <div class="view view-main">


            <div class="page" data-name="token-<%=itemViewModel.item._id %>">

                <nav-bar
                    logo="<%=logo%>"
                    title="<%=channelViewModel.channel.title%>"
                    show_mint_page="<%=showMintPage%>"
                >
                </nav-bar>

                <token-toolbar
                    token_id="<%= itemViewModel.item.tokenId %>"
                    item_count="<%= channelViewModel.channel.itemCount %>" 
                >
                </token-toolbar>

<!--                 
                <div class="fab fab-left-center small-only">
                    <a href="#"> 
                        <i class="icon f7-icons color-blue">arrow_left</i>
                    </a>
                </div>
    
                <% if (itemViewModel.item.next) { %>
                    <div class="fab fab-right-center small-only">
                        <a href="#">
                            <i class="icon f7-icons color-blue">arrow_right</i>
                        </a>
                    </div>
                <% } %> -->

           
                <div class="page-content">
                    <div class="swiper" id="swiper-<%= itemViewModel.item.tokenId  %>" style="display:none;">
                        <!-- Slides wrapper -->
                        <div class="swiper-wrapper">
                            <!-- Slides -->
                            <div class="swiper-slide" data-url="<%= itemViewModel.item.previous ? link(`t/${itemViewModel.item.previous.tokenId}`) : link(`index.html`) %>">

                            </div> 

                            <div class="swiper-slide">
                                
                                <%~ includeFile(`${baseDir}/node_modules/large-nft/src/reader/ejs/pages/_token_display.ejs`, {
                                    channelViewModel: channelViewModel,
                                    hostname: hostname,
                                    baseURL: baseURL,
                                    baseDir: baseDir,
                                    marketplaces: marketplaces,
                                    externalLinks: externalLinks,
                                    routablePages: routablePages,
                                    attributeReport: attributeReport,
                                    base64Version: base64Version,
                                    channelId: channelId,
                                    showMintPage: showMintPage,
                                    itemViewModel: itemViewModel
                                }) %>

                            </div>

                            <% if (itemViewModel.item.next) { %>
                                <div class="swiper-slide" data-url="<%= link(`t/${itemViewModel.item.next.tokenId}`) %>">

                                </div> 
                            <% } %>

                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>

    <%~ it.baseViewModel.bodyContents %>

    
    <script type="module" id="page-init-scripts">    

        const init = (props, { $, $f7, $h, $on, $update }) => {
            
            let tokenService = globalThis.container.get("TokenService")
            let readerSettingsService = globalThis.container.get("ReaderSettingsService")
            let baseURI = globalThis.container.get("baseURI")

            let hasPrevious = JSON.parse(`<%~ JSON.stringify(itemViewModel?.item?.previous?.tokenId != undefined) %>`)
            let hasNext = JSON.parse(`<%~ JSON.stringify(itemViewModel?.item?.next?.tokenId != undefined) %>`)

            let swiper


            $on('pageInit', async () => {

                await readerSettingsService.updateCurrentPage(parseInt(props.tokenId))
                $('#token_navigator_form').on('submit', goTokenFormSubmit)



                swiper = $f7.swiper.create('#swiper-<%= itemViewModel.item.tokenId  %>', {
                    initialSlide: 1,
                    // effect: 'fade',
                    // fadeEffect: {
                    //     crossFade: true
                    // },
                    on: {
                        slideChange() {

                            const swiper = this

                            let slide = swiper.$wrapperEl.children('.swiper-slide').eq(swiper.activeIndex)

                            let url = $(slide).data('url')

                            if (url) {
                                $f7.views.main.router.navigate(url, {
                                    transition: 'none',
                                    // clearPreviousHistory: true,
                                    reloadAll: true
                                })
                            }

                        }
                    }
                })

                $('#swiper-<%= itemViewModel.item.tokenId  %>').show()


                const prev = (e) => {
                    swiper.slidePrev(0)
                }

                const next = (e) => {
                    swiper.slideNext(0)
                }

                $('.fab-left-center').on('click', prev)
                $('.fab-right-center').on('click', next)

                $('.back-token-button').on('click', prev)
                $('.continue-button').on('click', next)

            })          

            $on('pageBeforeOut', async () => {
                $('.swiper').hide()
                console.log('Destroying swiper #swiper-<%= itemViewModel.item.tokenId  %>')
                $f7.swiper.destroy('#swiper-<%= itemViewModel.item.tokenId  %>')
            })

            const goTokenFormSubmit = async (e) => {
          
                e.preventDefault()

                const val = $(e.currentTarget).children('.goto-input').val()

                try {
                    $f7.views.main.router.navigate(`${baseURI}t/${parseInt(val.toString())}`)
                } catch(ex) {
                    console.log(ex)
                    $f7.dialog.alert("Invalid Page")
                }

            }

            document.querySelector('meta[property="og:title"]').setAttribute("content", "<%= itemViewModel.item.title ? itemViewModel.item.title + ' / ' : '' %><%= itemViewModel.channel.title %> #<%= itemViewModel.item.tokenId %>")
            document.querySelector('meta[property="og:url"]').setAttribute("content", "<%= link(`token-${itemViewModel.item._id}`) %>")
            document.querySelector('meta[property="og:image"]').setAttribute("content", "<%= coverImageLink %>")
            document.querySelector('meta[property="og:description"]').setAttribute("content", "<%= escapeExcerpt(itemViewModel.contentHTML)%>")

            document.querySelector('meta[property="twitter:url"]').setAttribute("content", "<%= link(`token-${itemViewModel.item._id}`) %>")
            document.querySelector('meta[property="twitter:title"]').setAttribute("content", "<%= itemViewModel.item.title ? itemViewModel.item.title + ' / ' : '' %><%= itemViewModel.channel.title %> #<%= itemViewModel.item.tokenId %>")
            document.querySelector('meta[property="twitter:image"]').setAttribute("content", "<%= coverImageLink %>")
            document.querySelector('meta[property="twitter:description"]').setAttribute("content", "<%= escapeExcerpt(itemViewModel.contentHTML)%>" )

            document.querySelector('title').innerHTML = "<%= itemViewModel.item.title ? itemViewModel.item.title + ' / ' : '' %><%= itemViewModel.channel.title %> #<%= itemViewModel.item.tokenId %>"

            $f7.preloader.hide()

            return $render;

        }


    </script>

    <script type="module" id="page-scripts">

        let baseURL = '<%= baseURL %>'
        let hostname = '<%= hostname %>'
        let channelId = '<%= channelId %>'
        let version = atob('<%= base64Version %>').replace('"', '').replace('"', '')

        let routablePages = JSON.parse(`<%~ JSON.stringify(routablePages) %>`)

        let app = reader.initReader(baseURL, hostname, version, routablePages, channelId )

    </script>

    

</body>

</html>